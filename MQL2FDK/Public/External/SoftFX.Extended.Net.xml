<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoftFX.Extended.Net</name>
    </assembly>
    <members>
        <member name="T:SoftFX.Extended.AssetInfo">
            <summary>
            This class has sense for cash accounts only
            </summary>
        </member>
        <member name="M:SoftFX.Extended.AssetInfo.#ctor">
            <summary>
            Creates a new empty instance of AssetInfo.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.AssetInfo.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Creates a new instance of AssetInfo.
            </summary>
            <param name="currency"></param>
            <param name="balance"></param>
            <param name="tradeAmount"></param>
        </member>
        <member name="M:SoftFX.Extended.AssetInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftFX.Extended.AssetInfo.Currency">
            <summary>
            Gets or sets asset currency.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AssetInfo.Balance">
            <summary>
            Gets or sets asset's balance.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AssetInfo.TradeAmount">
            <summary>
            Gets or sets asset's trade amount.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.CurrencyInfo">
            <summary>
            Currency information.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.CurrencyInfo.Name">
            <summary>
            Gets currency name.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.CurrencyInfo.Description">
            <summary>
            Gets currency description.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.CurrencyInfo.SortOrder">
            <summary>
            Gets currency priority.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.CurrencyInfo.Precision">
            <summary>
            Gets currency precision.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.CommissionChargeType">
            <summary>
            Commission charge type.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.CommissionChargeType.OneWay">
            <summary>
            Per-trade.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.CommissionChargeType.RoundTurn">
            <summary>
            Round-turn.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.CommissionType">
            <summary>
            Commission type.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.CommissionType.PerUnit">
            <summary>
            Per unit (implying shares, par, currency, etc)
            </summary>
        </member>
        <member name="F:SoftFX.Extended.CommissionType.Percent">
            <summary>
            Percentage
            </summary>
        </member>
        <member name="F:SoftFX.Extended.CommissionType.Absolute">
            <summary>
            Absolute (total monetary amount)
            </summary>
        </member>
        <member name="F:SoftFX.Extended.CommissionType.PercentageWaivedCash">
            <summary>
            (For CIV buy orders) percentage waived - cash discount
            </summary>
        </member>
        <member name="F:SoftFX.Extended.CommissionType.PercentageWaivedEnhanced">
            <summary>
            (For CIV buy orders) percentage waived - enhanced units
            </summary>
        </member>
        <member name="F:SoftFX.Extended.CommissionType.PerBond">
            <summary>
            Points per bond or or contract 
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.CurrencyInfoEventArgs">
            <summary>
            Contains data for currency info event.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.CurrencyInfoEventArgs.Information">
            <summary>
            Gets currencies information; can not be null.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Resources.EmbeddedModules">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.AlphaFS">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.ICSharpCode_SharpZipLib">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.libeay32">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.libeay64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.Microsoft_Practices_EnterpriseLibrary_Caching">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.Microsoft_Practices_EnterpriseLibrary_Common">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.Microsoft_Practices_ServiceLocation">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.Microsoft_Practices_Unity">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.Microsoft_Practices_Unity_Interception">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.msvcp110_64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.msvcp110_86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.msvcr110_64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.msvcr110_86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.procdump_exe">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_Core_x64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_Core_x86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_FixProvider_x64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_FixProvider_x86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_LlApi_x64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_LlApi_x86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_LlCommon_x64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_LlCommon_x86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_Lrp_x64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_Lrp_x86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_LrpProvider_x64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_LrpProvider_x86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_Sal_x64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.SoftFX_Sal_x86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.ssleay32">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.ssleay64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.System_CoreEx">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.System_Data_SQLite_64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.System_Data_SQLite_86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.System_Interactive">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.System_Reactive">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.TickTrader_BusinessLogic">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.TickTrader_BusinessObjects">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.TickTrader_Common">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.TickTrader_Server_Monitoring">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.TickTrader_Server_QuoteHistory">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.TickTrader_Server_QuoteHistory_Store_Ntfs">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Resources.EmbeddedModules.TickTrader_Server_QuoteHistory_Store_SQLite">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Errors.HistoryNotFoundException">
            <summary>
            This exception wraps related exception from TickTrader libraries.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Errors.RuntimeException">
            <summary>
            Provides extended data for errors; generated by API.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Errors.RuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SoftFX.Extended.Errors.RuntimeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SoftFX.Extended.Errors.RuntimeException.Status">
            <summary>
            Native code error.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Errors.HistoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:SoftFX.Extended.Errors.HistoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SoftFX.Extended.Events.ExceptionEventArgs">
            <summary>
            Contains information about exception.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Events.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance of ExceptionEventArgs.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:SoftFX.Extended.Events.ExceptionEventArgs.Exception">
            <summary>
            Gets exception information.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Extensions.FinancialCalculatorExtensions">
            <summary>
            Financial calculator extensions.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Extensions.FinancialCalculatorExtensions.CalculateAssetRate(SoftFX.Extended.Financial.FinancialCalculator,System.Double,System.String,System.String)">
            <summary>
             Calculates asset cross rate.
            </summary>
            <param name="calculator">Financial calculator.</param>
            <param name="asset">Asset volume.</param>
            <param name="assetCurrency">Asset currency.</param>
            <param name="currency">Deposit currency.</param>
            <returns>Rate or null if rate cannot be calculated.</returns>
        </member>
        <member name="T:SoftFX.Extended.Extensions.SymbolInfoExtensions">
            <summary>
            Extensions for SymbolInfo class.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Extensions.SymbolInfoExtensions.IsSwapEnabled(SoftFX.Extended.SymbolInfo)">
            <summary>
            Returns whether swap is enabled for symbol.
            </summary>
            <param name="symbolInfo"></param>
            <returns>True if swap is enabled.</returns>
        </member>
        <member name="M:SoftFX.Extended.Extensions.SymbolInfoExtensions.GetMarginFactor(SoftFX.Extended.SymbolInfo)">
            <summary>
            Returns margin factor.
            </summary>
            <param name="symbolInfo"></param>
            <returns>Margin factor.</returns>
        </member>
        <member name="T:SoftFX.Extended.Financial.AccountEntryStatus">
            <summary>
            Possible states of account entry properties.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.AccountEntryStatus.NotCalculated">
            <summary>
            Property of account entry is not calculated.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.AccountEntryStatus.Calculated">
            <summary>
            Property of account entry is calculated successfully.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.AccountEntryStatus.CalculatedWithErrors">
            <summary>
            Property of account entry is calculated with errors.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.AccountEntryStatus.UnknownAccountCurrency">
            <summary>
            Property of account entry is not calculated due to unknown account currency.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.CurrencyEntries">
            <summary>
            Represents list of the most quoted currencies.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.CurrencyEntries.InsertItem(System.Int32,System.String)">
            <summary>
            Inserts a currency at the specified index.
            </summary>
            <param name="index">The zero-based index at which currency should be inserted.</param>
            <param name="currency">The currency to insert. The value cannot be null.</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.CurrencyEntries.SetItem(System.Int32,System.String)">
            <summary>
            Replaces the currency at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="currency">The new value for the currency at the specified index. The value cannot be null.</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.CurrencyEntries.Exchange(System.Int32,System.Int32)">
            <summary>
            Exchanges two currencies.
            </summary>
            <param name="first">A zero based index of a currency</param>
            <param name="second">A zero based index of a currency</param>
        </member>
        <member name="T:SoftFX.Extended.Financial.ResolvePriceHandler">
            <summary>
            Delegate for price resolving request by financial calculator.
            </summary>
            <param name="symbol">resolving symbol, can not be null</param>
            <returns></returns>
        </member>
        <member name="T:SoftFX.Extended.Financial.Serialization.AccountData">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.Serialization.AccountData.#ctor">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.Tag">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.Type">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.Leverage">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.Balance">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.Currency">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.Profit">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.ProfitStatus">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.Margin">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.MarginStatus">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.AccountData.Trades">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.Serialization.CalculatorData">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.Serialization.CalculatorData.#ctor">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.CalculatorData.MarginMode">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.CalculatorData.Prices">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.CalculatorData.Symbols">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.CalculatorData.Accounts">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.CalculatorData.Currencies">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.Serialization.PriceData">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.Serialization.PriceData.#ctor">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.PriceData.Symbol">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.PriceData.Bid">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.PriceData.Ask">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.Serialization.SymbolData">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.Serialization.SymbolData.#ctor">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.SymbolData.Tag">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.SymbolData.Symbol">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.SymbolData.From">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.SymbolData.To">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.SymbolData.ContractSize">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.SymbolData.Hedging">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.SymbolData.MarginFactorOfPositions">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.SymbolData.MarginFactorOfLimitOrders">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.SymbolData.MarginFactorOfStopOrders">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.Serialization.TradeData">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.Serialization.TradeData.#ctor">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Tag">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Type">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Side">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Symbol">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Price">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Volume">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Commission">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.AgentCommission">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Swap">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Rate">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.ProfitStatus">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.MarginStatus">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Profit">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Serialization.TradeData.Margin">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.StateCalculator">
            <summary>
            Provides functionality for account financial state calculation.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.StateCalculator.#ctor(SoftFX.Extended.DataTrade,SoftFX.Extended.DataFeed)">
            <summary>
            Creates new financial state of account calculator.
            </summary>
            <param name="trade">valid instance of not started data trade</param>
            <param name="feed">valid instance of not started data feed</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.StateCalculator.Calculate">
            <summary>
            Recalculates margin and profit.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.StateCalculator.GetState">
            <summary>
            Returns StateInfo representation of current state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateCalculator.Calculator">
            <summary>
            Be careful that you use Calculator properties inside of critical section; example:
            StateCalculator calculator = ...
            FinancialCalculator calc = calcualtor.Calculator;
            lock (calc)
            {
            	calc.Currencies.Add("EUR");
            }
            </summary>
        </member>
        <member name="E:SoftFX.Extended.Financial.StateCalculator.StateInfoChanged">
            <summary>
            State calculator raises this event when something has been changed.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.Financial.StateCalculator.CalculatorException">
            <summary>
            State calculator raises this event when exception has been encountered.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.StateInfo">
            <summary>
            Represents financial state of account.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.StateInfo.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Status">
            <summary>
            Gets status of Profit property.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Generation">
            <summary>
            Gets the number, which indicates how many times financial information has been updated.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Balance">
            <summary>
            Gets balance of account, which has been specified for data trade object.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Equity">
            <summary>
            Gets equity of account.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Profit">
            <summary>
            Gets profit of all opened positions for data trade account by data feed quotes.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Margin">
            <summary>
            Gets margin of data trade account by data feed quotes.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Commission">
            <summary>
            Gets total commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.AgentCommission">
            <summary>
            Gets total agent commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Swap">
            <summary>
            Gets total swap.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.FreeMargin">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.MarginLevel">
            <summary>
            Gets margin level.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Prices">
            <summary>
            Quotes snapshot, which has been used for calculation the financial information.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Quotes">
            <summary>
            Quotes snapshot, which has been used for calculation the financial information.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Assets">
            <summary>
            Gets list of available assets.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.TradeRecords">
            <summary>
            Gets list of available trade records.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.Positions">
            <summary>
            Gets list of opened positions. Available for .NET account only.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfo.UnknownSymbols">
            <summary>
            Gets list of symbols, which are not supported by server.
            Example: user has opened position by BTC/USD, but the corresponding symbol information is not available.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.StateInfoEventArgs">
            <summary>
            Provides data for the SoftFX.Extended.Financial.StateCalculator.StateInfoChanged event.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.StateInfoEventArgs.#ctor(SoftFX.Extended.Financial.StateInfo)">
            <summary>
            Initializes a new instance of the SoftFX.Extended.Financial.StateInfoEventArgs
            </summary>
            <param name="info">Represents the current state.</param>
        </member>
        <member name="P:SoftFX.Extended.Financial.StateInfoEventArgs.Information">
            <summary>
            Current state information.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.TradeEntryStatus">
            <summary>
            Possible states of trade entry properties.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.TradeEntryStatus.NotCalculated">
            <summary>
            Property of trade entry are not calculated.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.TradeEntryStatus.Calculated">
            <summary>
            Property of trade entry are calculated successfully.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.TradeEntryStatus.UnknownSymbol">
            <summary>
            Can not calculate property of trade entry due to unknown symbol.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.TradeEntryStatus.OffQuotes">
            <summary>
            Can not calculate property of trade entry due to off quotes.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.MarginMode">
            <summary>
            List of possible margin modes.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.MarginMode.Dynamic">
            <summary>
            Calculate margin in dynamic mode
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.MarginMode.Static">
            <summary>
            Calculate margin in static mode
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.MarginMode.StaticIfPossible">
            <summary>
            Margin rate will be calculated dynamically, if it is not specified directly.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.FinancialEntries`1">
            <summary>
            Represents container for 
            </summary>
            <typeparam name="TEntry"></typeparam>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntries`1.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="owner">Owner object.</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntries`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="entry">Financial entry.</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntries`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="entry">Financial entry.</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntries`1.Clear">
            <summary>
            Clears collection.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntries`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntries`1.System#Collections#Generic#ICollection{TEntry}#CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntries`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntries`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialEntries`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialEntries`1.Count">
            <summary>
            Returns number of symbol entries.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialEntries`1.System#Collections#Generic#ICollection{TEntry}#IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.FinancialEntry">
            <summary>
            Represents financial entry.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntry.#ctor(System.Object)">
            <summary>
            Creates new instance of financial entry.
            </summary>
            <param name="owner">valid instance of owner</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntry.ToString">
            <summary>
            Returns user defined information or internal index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialEntry.Owner">
            <summary>
            Gets or owner of the financial entry instance.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialEntry.Tag">
            <summary>
            Gets or sets user defined data.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.FinancialEntry`1">
            <summary>
            Represents financial entry.
            </summary>
            <typeparam name="TOwner">Owner type.</typeparam>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialEntry`1.#ctor(`0)">
            <summary>
            Creates new instance of financial entry.
            </summary>
            <param name="owner">valid instance of owner</param>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialEntry`1.Owner">
            <summary>
            Gets or owner of the financial entry instance.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.PriceEntry">
            <summary>
            Represents bid/ask prices entry.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.PriceEntry.Bid">
            <summary>
            The best price of bids.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Financial.PriceEntry.Ask">
            <summary>
            The best price of asks.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntry.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new price entry instance.
            </summary>
            <param name="bid">a price for bid</param>
            <param name="ask">a price for ask</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntry.PriceFromSide(SoftFX.Extended.TradeRecordSide)">
            <summary>
            Returns ask for buy and bid for sell
            </summary>
            <param name="side">trade entry side</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntry.PriceFromOppositeSide(SoftFX.Extended.TradeRecordSide)">
            <summary>
            Returns bid for buy and ask for sell
            </summary>
            <param name="side">trade entry side</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntry.PriceMultiplierFromProfit(System.Double)">
            <summary>
            Returns price rate, which should be used as multiplier for converting profit
            from profit currency to account currency.
            Example: xxx/yyy => zzz
            in this case we need profit conversion from yyy to zzz
            profit(zzz) = profit(yyy) * PriceMultiplierFromProfit(profit)
            </summary>
            <param name="profit">a converting profit</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntry.PriceDivisorFromProfit(System.Double)">
            <summary>
            Returns price rate, which should be used as divisor for converting profit
            from profit currency to account currency.
            Example: xxx/yyy => zzz
            in this case we need profit conversion from yyy to zzz
            profit(zzz) = profit(yyy) / PriceDivisorFromProfit(profit)
            </summary>
            <param name="profit">a converting profit</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntry.PriceMultiplierFromAsset(System.Double)">
            <summary>
            Returns price rate, which should be used as multiplier for converting asset
            from asset currency to account currency.
            </summary>
            <param name="asset">a converting asset</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntry.PriceDivisorFromAsset(System.Double)">
            <summary>
            Returns price rate, which should be used as divisor for converting asset
            from asset currency to account currency.
            </summary>
            <param name="asset">a converting asset</param>
            <returns></returns>
        </member>
        <member name="T:SoftFX.Extended.Financial.FinancialCalculator">
            <summary>
            Contains methods for offline calculation of profit and margin.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialCalculator.#ctor">
            <summary>
            Creates a new financial calculator instance.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialCalculator.#ctor(SoftFX.Extended.Financial.ResolvePriceHandler)">
            <summary>
            Creates a new financial calculator instance.
            </summary>
            <param name="handler">Price resolution handler.</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialCalculator.Load(System.String)">
            <summary>
            Load a financial calculator from a file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialCalculator.Load(System.IO.Stream)">
            <summary>
            Load a financial calculator from a stream.
            </summary>
            <param name="stream">Stream to load data from. Stream will not be closed by this method.</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialCalculator.Save(System.String)">
            <summary>
            Save the financial calculator to a file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialCalculator.Save(System.IO.Stream)">
            <summary>
            Save the financial calculator to a stream.
            </summary>
            <param name="stream">Stream to save data to. Stream will not be closed by this method.</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialCalculator.Calculate">
            <summary>
            Recalculates margin and profit.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.FinancialCalculator.Clear">
            <summary>
            Resets all calculated properties to null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialCalculator.MarginMode">
            <summary>
            Gets or sets mode of margin calculation.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialCalculator.Accounts">
            <summary>
            Gets container, which manages all accounts.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialCalculator.Prices">
            <summary>
            Gets container, which manages all prices.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialCalculator.Symbols">
            <summary>
            Gets container, which manages all symbols.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.FinancialCalculator.Currencies">
            <summary>
            Gets container, which manages list of major currencies.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.AccountEntry">
            <summary>
            Represents account entry.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.AccountEntry.#ctor(SoftFX.Extended.Financial.FinancialCalculator)">
            <summary>
            Creates a new account entry
            </summary>
            <param name="owner">instance of financial calculator</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.AccountEntry.Clear">
            <summary>
            Resets all calculated properties to null
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Type">
            <summary>
            Gets or sets account type.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Leverage">
            <summary>
            Gets or sets the account instance leverage.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Balance">
            <summary>
            Gets or sets the account instance balance.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Currency">
            <summary>
            Gets or sets the account instance currency.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Profit">
            <summary>
            Gets calculated profit if it is available, otherwise returns null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.ProfitStatus">
            <summary>
            Gets status of Profit property.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Margin">
            <summary>
            Gets calculated margin if it is available, otherwise returns null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.MarginStatus">
            <summary>
            Gets status of Margin property.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Equity">
            <summary>
            Gets calculated equity if it is available, otherwise returns null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.EquityStatus">
            <summary>
            Gets status of Equity property.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.MarginLevel">
            <summary>
            Gets calculated margin level if it is available, otherwise returns null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.MarginLevelStatus">
            <summary>
            Gets status of Margin Level property.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.FreeMargin">
            <summary>
            Gets calculated margin level if it is available, otherwise returns null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.FreeMarginStatus">
            <summary>
            Gets status of Margin Level property.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Commission">
            <summary>
            Gets total commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.AgentCommission">
            <summary>
            Gets total agent commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Swap">
            <summary>
            Gets total swap.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Assets">
            <summary>
            Gets list of available assets.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.AssetsStatus">
            <summary>
            Gets status of Assets property.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.AccountEntry.Trades">
            <summary>
            Provides access to trade entries, which belong to the account.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.PriceEntries">
            <summary>
            Provides access to price entries collection.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntries.#ctor">
            <summary>
            Creates a new instance of price entires.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntries.TryGetPriceEntry(System.String)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntries.ToDictionary">
            <summary>
            Gets all prices as dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntries.Update(System.String,System.Double,System.Double)">
            <summary>
            Updates bid/ask prices for a symbol.
            </summary>
            <param name="symbol">an updating symbol</param>
            <param name="bid">a bid price</param>
            <param name="ask">an ask price</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntries.Update(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,SoftFX.Extended.Financial.PriceEntry}})">
            <summary>
            
            </summary>
            <param name="prices"></param>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntries.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntries.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntries.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Financial.PriceEntries.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftFX.Extended.Financial.SymbolEntries">
            <summary>
            Provides access to symbol entries collection.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.SymbolEntries.#ctor(SoftFX.Extended.Financial.FinancialCalculator)">
            <summary>
            Creates a new instance of symbol entires.
            </summary>
            <param name="owner">a valid instance of financial calculator</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.SymbolEntries.Add(SoftFX.Extended.Financial.SymbolEntry)">
            <summary>
            Adds a new symbol entry to the container.
            </summary>
            <param name="symbol">a valid symbol entry</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.SymbolEntries.Remove(SoftFX.Extended.Financial.SymbolEntry)">
            <summary>
            Removes an existing symbol entry from the container.
            </summary>
            <param name="symbol">a valid symbol entry</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.SymbolEntries.Clear">
            <summary>
            Removes all existing entries.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.SymbolEntry">
            <summary>
            Represents normalized symbol in the following format Symbol = To / From.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.SymbolEntry.#ctor(SoftFX.Extended.Financial.FinancialCalculator,System.String)">
            <summary>
            Creates a new symbol entry from symbol in XXX/YYY format.
            </summary>
            <param name="owner">valid instance of financial calculator</param>
            <param name="symbol">symbol inf XXX/YYY format</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.SymbolEntry.#ctor(SoftFX.Extended.Financial.FinancialCalculator,System.String,System.String,System.String)">
            <summary>
            Creates a new symbol entry.
            </summary>
            <param name="owner">va</param>
            <param name="symbol">Financial instrument name</param>
            <param name="profitCurrency">Profit currency</param>
            <param name="marginCurrency">Trade currency</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.SymbolEntry.ToString">
            <summary>
            Returns a formatted string to simplify debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.Symbol">
            <summary>
            Gets symbol name of financial instrument.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.ProfitCurrency">
            <summary>
            Gets profit currency.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.MarginCurrency">
            <summary>
            Gets margin currency.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.ContractSize">
            <summary>
            Gets or sets optional contract size
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.MarginCalcMode">
            <summary>
            Gets margin calculation mode of the symbol.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.Hedging">
            <summary>
            Gets or sets of hedging.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.MarginFactor">
            <summary>
            Gets or sets symbol margin factor.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.MarginFactorOfPositions">
            <summary>
            Gets or sets margin factor of positions.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.MarginFactorOfLimitOrders">
            <summary>
            Gets or sets margin factor of limit orders.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.SymbolEntry.MarginFactorOfStopOrders">
            <summary>
            Gets or sets margin factor of stop orders.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.TradeEntry">
            <summary>
            Represents trade entry.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.TradeEntry.#ctor(SoftFX.Extended.Financial.AccountEntry)">
            <summary>
            Creates a new instance of trade entry.
            </summary>
            <param name="owner">valid account entry instance</param>
        </member>
        <member name="M:SoftFX.Extended.Financial.TradeEntry.#ctor(SoftFX.Extended.Financial.AccountEntry,SoftFX.Extended.TradeRecordType,SoftFX.Extended.TradeRecordSide,System.String,System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Creates a new instance of trade entry.
            </summary>
            <param name="owner">valid account entry instance</param>
            <param name="type"></param>
            <param name="side"></param>
            <param name="symbol"></param>
            <param name="price"></param>
            <param name="volume"></param>
            <param name="staticMarginRate"></param>
        </member>
        <member name="M:SoftFX.Extended.Financial.TradeEntry.Clear">
            <summary>
            Resets all calculated properties to null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.Type">
            <summary>
            Gets and sets type of the trade entry.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.Side">
            <summary>
            Gets and sets side of the trade entry.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.Symbol">
            <summary>
            Gets and sets trade symbol.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.Price">
            <summary>
            Gets and sets trade price.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.Volume">
            <summary>
            Gets and sets trade volume.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.StaticMarginRate">
            <summary>
            Gets or sets static margin rate.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.Commission">
            <summary>
            Gets and sets trade commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.AgentCommission">
            <summary>
            ets and sets trade agent commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.Swap">
            <summary>
            Gets and sets trade swap.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.ProfitStatus">
            <summary>
            Gets status of Profit property.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.MarginStatus">
            <summary>
            Gets status of Margin property.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.Profit">
            <summary>
            Gets calculated profit if it is available, otherwise returns null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.TradeEntry.Margin">
            <summary>
            Gets calculated margin if it is available, otherwise returns null.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Implementation.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Implementation.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Implementation.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.LrpConnectionStringBuilder">
            <summary>
            Represents LRP connection parameters.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.ConnectionStringBuilder">
            <summary>
            Contains common methods of all connection string builders.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.ConnectionStringBuilder.#ctor">
            <summary>
            Sets all string properties to empty value.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.ConnectionStringBuilder.TestConnections(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            The method tries to connect to remote server and returns list of valid connection strings.
            </summary>
            <param name="address">host name or IP address; can not benull</param>
            <param name="ports">list of ports, which should be checked; can be null in this case list of predefined ports will be checked</param>
            <param name="timeoutInMs">timeout in ms of connection establishing; can be zero or negative in this case default timeout will be used</param>
            <returns>list of valid connection strings</returns>
        </member>
        <member name="M:SoftFX.Extended.ConnectionStringBuilder.TestFeedConnections(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            The method tries to connect to remote server and returns list of valid connection strings.
            </summary>
            <param name="username">a valid username</param>
            <param name="password">a valid password</param>
            <param name="address">host name or IP address; can not benull</param>
            <param name="ports">list of ports, which should be checked; can be null in this case list of predefined ports will be checked</param>
            <param name="timeoutInMs">timeout in ms of connection establishing; can be zero or negative in this case default timeout will be used</param>
            <returns>list of valid connection strings</returns>
        </member>
        <member name="M:SoftFX.Extended.ConnectionStringBuilder.TestTradeConnections(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            The method tries to connect to remote server and returns list of valid connection strings.
            </summary>
            <param name="username">a valid username</param>
            <param name="password">a valid password</param>
            <param name="address">host name or IP address; can not benull</param>
            <param name="ports">list of ports, which should be checked; can be null in this case list of predefined ports will be checked</param>
            <param name="timeoutInMs">timeout in ms of connection establishing; can be zero or negative in this case default timeout will be used</param>
            <returns>list of valid connection strings</returns>
        </member>
        <member name="M:SoftFX.Extended.ConnectionStringBuilder.ToString">
            <summary>
            Makes and returns connection string.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.ConnectionStringBuilder.Username">
            <summary>
            Gets or sets the username of the data feed instance.
            Can not be modified, when the data feed is running.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ConnectionStringBuilder.Password">
            <summary>
            Gets or sets the password of the data feed instance.
            Can not be modified, when the data feed is running.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ConnectionStringBuilder.ProtocolType">
            <summary>
            Gets protocol type name.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.LrpConnectionStringBuilder.#ctor">
            <summary>
            Creates a new instance of LrpConnectionStringBuilder and initializes all properties to default values.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.LrpConnectionStringBuilder.TestLrpConnections(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            The method tries to connect to remote server and returns list of valid connection strings.
            </summary>
            <param name="address">host name or IP address; can not benull</param>
            <param name="ports">list of ports, which should be checked; can be null in this case list of predefined ports will be checked</param>
            <param name="timeoutInMs">timeout in ms of connection establishing; can be zero or negative in this case default timeout will be used</param>
            <returns>list of valid connection strings</returns>
        </member>
        <member name="M:SoftFX.Extended.LrpConnectionStringBuilder.TestFeedLrpConnections(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            The method tries to connect to remote server and returns list of valid connection strings.
            </summary>
            <param name="address">host name or IP address; can not benull</param>
            <param name="username">a valid username</param>
            <param name="password">a valid password</param>
            <param name="ports">list of ports, which should be checked; can be null in this case list of predefined ports will be checked</param>
            <param name="timeoutInMs">timeout in ms of connection establishing; can be zero or negative in this case default timeout will be used</param>
            <returns>list of valid connection strings</returns>
        </member>
        <member name="M:SoftFX.Extended.LrpConnectionStringBuilder.TestTradeLrpConnections(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            The method tries to connect to remote server and returns list of valid connection strings.
            </summary>
            <param name="address">host name or IP address; can not benull</param>
            <param name="username">a valid username</param>
            <param name="password">a valid password</param>
            <param name="ports">list of ports, which should be checked; can be null in this case list of predefined ports will be checked</param>
            <param name="timeoutInMs">timeout in ms of connection establishing; can be zero or negative in this case default timeout will be used</param>
            <returns>list of valid connection strings</returns>
        </member>
        <member name="P:SoftFX.Extended.LrpConnectionStringBuilder.SecureConnection">
            <summary>
            Gets or sets SSL using mode.
            Can not be modified, when data feed is running.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.LrpConnectionStringBuilder.Address">
            <summary>
            Gets or sets trading platform address of the data feed/trade instance. Can be IP address or host name.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.LrpConnectionStringBuilder.Port">
            <summary>
            Gets or sets trading platform port of the data feed/trade instance.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.LrpConnectionStringBuilder.EventsLogFileName">
            <summary>
            Gets or sets file name for events log.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.LrpConnectionStringBuilder.MessagesLogFileName">
            <summary>
            Gets or sets file name for messages log.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.LrpConnectionStringBuilder.EnableQuotesLogging">
            <summary>
            Enables or disables quotes logging in message log.
            Anyway quotes logging does not write in log raw message information,
            because for quotes transmitting LRP uses special codecs.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.LrpConnectionStringBuilder.EnableNetworkStatistics">
            <summary>
            Gets or sets whether network usage statistics should be enabled.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.LrpConnectionStringBuilder.ProtocolType">
            <summary>
            Gets protocol type name = "Lrp".
            </summary>
        </member>
        <member name="T:SoftFX.Extended.PairBar">
            <summary>
            Contains bar information for bid and/or ask.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.PairBar.#ctor(SoftFX.Extended.Bar,SoftFX.Extended.Bar)">
            <summary>
            Creates a new instance of PairBar class.
            </summary>
            <param name="bid">a bar for bid.</param>
            <param name="ask">a bar for ask.</param>
        </member>
        <member name="P:SoftFX.Extended.PairBar.Bid">
            <summary>
            Gets or sets bar information for bid.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.PairBar.Ask">
            <summary>
            Gets or sets bar information for ask.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.PairBars">
            <summary>
            Bars enumeration.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.PairBars.#ctor(SoftFX.Extended.DataFeed,System.String,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime)">
            <summary>
            Creates a new PairBars stream instance.
            If startTime is less or equal than endTime then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range: Min(startTime, endTime) &lt;= Bar.From and Bar.To &lt;= Max(startTime, endTime)
            </summary>
            <param name="datafeed">Datafeed instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="endTime">A end time of bars enumeration.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.PairBars.#ctor(SoftFX.Extended.Storage.IStorage,System.String,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime)">
            <summary>
            Creates a new PairBars stream instance.
            If startTime is less or equal than endTime then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range: Min(startTime, endTime) &lt;= Bar.From and Bar.To &lt;= Max(startTime, endTime)
            </summary>
            <param name="storage">Online/Offline provider of data feed storage instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="endTime">A end time of bars enumeration.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.PairBars.#ctor(SoftFX.Extended.DataFeed,System.String,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Creates a new Bars stream instance.
            If startTime is less or equal than endTime then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range: Min(startTime, endTime) &lt;= Bar.From and Bar.To &lt;= Max(startTime, endTime)
            </summary>
            <param name="datafeed">Datafeed instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="endTime">A end time of bars enumeration.</param>
            <param name="preferredBufferSize">Bars enumeration requests bars from server by chunks. This is preferred chunk size. It should be positive.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If preferredBufferSize is less than 2.</exception>
        </member>
        <member name="M:SoftFX.Extended.PairBars.#ctor(SoftFX.Extended.DataFeed,System.String,SoftFX.Extended.BarPeriod,System.DateTime,System.Int32)">
            <summary>
            Creates a new Bars stream instance.
            If barsNumber is less than zero then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range:
            	Bar.From &gt;= startTime for forward enumeration
            	Bar.To &lt;= startTime for backward enumeration
            </summary>
            <param name="datafeed">DataFeed instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="barsNumber">Requested bars number; positive value means forward enumeration; negative value means backward enumeration.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.PairBars.#ctor(SoftFX.Extended.Storage.IStorage,System.String,SoftFX.Extended.BarPeriod,System.DateTime,System.Int32)">
            <summary>
            Creates a new Bars stream instance.
            If barsNumber is less than zero then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range:
            	Bar.From &gt;= startTime for forward enumeration
            	Bar.To &lt;= startTime for backward enumeration
            </summary>
            <param name="storage">Online/Offline provider of data feed storage instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="barsNumber">Requested bars number; positive value means forward enumeration; negative value means backward enumeration.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.PairBars.#ctor(SoftFX.Extended.DataFeed,System.String,SoftFX.Extended.BarPeriod,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Creates a new Bars stream instance.
            If barsNumber is less than zero then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range:
            	Bar.From &gt;= startTime for forward enumeration
            	Bar.To &lt;= startTime for backward enumeration
            </summary>
            <param name="datafeed">Datafeed instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="barsNumber">Requested bars number; positive value means forward enumeration; negative value means backward enumeration.</param>
            <param name="preferredBufferSize">Bars enumeration requests bars from server by chunks. This is preferred chunk size. It should be positive.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If preferredBufferSize is less than 2.</exception>
        </member>
        <member name="M:SoftFX.Extended.PairBars.GetEnumerator">
            <summary>
            The method returns bars enumerator.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.PairBars.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            The method returns bars enumerator.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="T:SoftFX.Extended.AccountType">
            <summary>
            Represents two possible accounting types.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.AccountType.Net">
            <summary>
            Net accounting is similar to bank accounting.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.AccountType.Gross">
            <summary>
            Gross accounting.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.AccountType.Cash">
            <summary>
            Cash account
            </summary>
        </member>
        <member name="T:SoftFX.Extended.BalanceOperation">
            <summary>
            The class contains details of balance operation.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.BalanceOperation.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.BalanceOperation.Balance">
            <summary>
            Actual account balance after balance operation.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.BalanceOperation.TransactionAmount">
            <summary>
            Amount of a balance transaction.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.BalanceOperation.TransactionCurrency">
            <summary>
            Currency of a balance transaction.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Bar">
            <summary>
            Contains bar information.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Bar.#ctor(System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new bar instance. The constructor doesn't validate input arguments.
            </summary>
            <param name="from">Start time of the bar.</param>
            <param name="to">End time of the bar.</param>
            <param name="open">Open price of the bar.</param>
            <param name="close">Close price of the bar.</param>
            <param name="low">Low price of the bar.</param>
            <param name="high">Hight price of the bar.</param>
            <param name="volume">Volume of the bar.</param>
        </member>
        <member name="M:SoftFX.Extended.Bar.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.Bar.From">
            <summary>
            Start date and time of the bar.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Bar.To">
            <summary>
            End date and time of the bar.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Bar.Open">
            <summary>
            Gets bar open price.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Bar.Close">
            <summary>
            Gets bar close price.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Bar.High">
            <summary>
            Gets bar highest price.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Bar.Low">
            <summary>
            Gets bar lowest price.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Bar.Volume">
            <summary>
            Gets volume of the bar period.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.BarPeriod">
            <summary>
            Contains different bar period.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.S1">
            <summary>
            Bar period is 1 second.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.S10">
            <summary>
            Bar period is 10 seconds.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.M1">
            <summary>
            Bar period is 1 minute.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.M5">
            <summary>
            Bar period is 5 minutes.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.M15">
            <summary>
            Bar period is 15 minutes.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.M30">
            <summary>
            Bar period is 30 minutes.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.H1">
            <summary>
            Bar period is 1 hour.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.H4">
            <summary>
            Bar period is 4 hours.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.D1">
            <summary>
            Bar period is 1 day.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.W1">
            <summary>
            Bar period is 1 week.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.BarPeriod.MN1">
            <summary>
            Bar period is 1 month.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.BarPeriod.#ctor(System.String)">
            <summary>
            Creates a new instance of BarPeriod class from string.
            </summary>
            <param name="text">string repsentation of bar period</param>
        </member>
        <member name="M:SoftFX.Extended.BarPeriod.op_Addition(SoftFX.Extended.BarPeriod,System.DateTime)">
            <summary>
            Calculates a next date time.
            </summary>
            <param name="period">A valid bar period.</param>
            <param name="time">A valid date time.</param>
            <returns>A next date time.</returns>
        </member>
        <member name="M:SoftFX.Extended.BarPeriod.op_Addition(System.DateTime,SoftFX.Extended.BarPeriod)">
            <summary>
            Calculates a next date time.
            </summary>
            <param name="time">A valid date time.</param>
            <param name="period">A valid bar period.</param>
            <returns>A next date time.</returns>
        </member>
        <member name="M:SoftFX.Extended.BarPeriod.op_Subtraction(System.DateTime,SoftFX.Extended.BarPeriod)">
            <summary>
            Calculates a previous date time.
            </summary>
            <param name="time">A valid date time.</param>
            <param name="period">A valid bar period.</param>
            <returns>A previous date time.</returns>
        </member>
        <member name="M:SoftFX.Extended.BarPeriod.ToString">
            <summary>
            Converts the value of the current bar period object to its equivalent string representation.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="T:SoftFX.Extended.Storage.Sequences.Range`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.Range`1.LowerBound">
            <summary>
            Gets index, which points to the first element.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.Range`1.UpperBound">
            <summary>
            Gets index, which points the position after last element.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.Range`1.Count">
            <summary>
            Gets total elements number.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.Range`1.Front">
            <summary>
            Gets the first element.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.Range`1.Back">
            <summary>
            Gets the last element.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.Range`1.Item(System.Int32)">
            <summary>
            Gets element by index.
            </summary>
            <param name="index">an index of required element.</param>
            <returns></returns>
        </member>
        <member name="T:SoftFX.Extended.DataHistoryInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataHistoryInfo.FromAll">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataHistoryInfo.ToAll">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataHistoryInfo.From">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataHistoryInfo.To">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataHistoryInfo.LastTickId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataHistoryInfo.Files">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataHistoryInfo.Bars">
            <summary>
            
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.NotificationEventArgs">
            <summary>
            Notification message.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Events.NotificationEventArgs.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.Events.NotificationEventArgs.Severity">
            <summary>
            Gets the notification severity.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.NotificationEventArgs.Type">
            <summary>
            Gets the notification type.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.NotificationEventArgs.Text">
            <summary>
            Gets the notification text.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.NotificationEventArgs`1">
            <summary>
            Notification message with argument.
            </summary>
            <typeparam name="T">any type.</typeparam>
        </member>
        <member name="P:SoftFX.Extended.Events.NotificationEventArgs`1.Data">
            <summary>
            Gets notification argument.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Financial.Asset">
            <summary>
            Represents real asset for cash account or exposure for net / gross account.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Financial.Asset.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.Financial.Asset.Currency">
            <summary>
            The asset currency.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Asset.Volume">
            <summary>
            The asset volume.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Asset.LockedVolume">
            <summary>
            The asset locked volume. For cash accounts only.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Asset.Rate">
            <summary>
            Price rate, which used for converting from volume to deposit currency.
            Will be 1 for cash account asset.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Financial.Asset.DepositCurrency">
            <summary>
            Amount of actually spent deposit currency = Volume * Rate / Leverage.
            Equals to Volume for cash account asset.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.ClosePositionResult">
            <summary>
            Close position info.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.ClosePositionResult.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.ClosePositionResult.ExecutedVolume">
            <summary>
            Gets executed volume, if Success is true, otherwise zero.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ClosePositionResult.ExecutedPrice">
            <summary>
            Gets executed price, if Success is true, otherwise zero.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ClosePositionResult.Sucess">
            <summary>
            Gets a value indicating whether the position closing is successful.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.PositionReportEventArgs">
            <summary>
            Contains data for position report event.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Events.PositionReportEventArgs.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.Events.PositionReportEventArgs.Report">
            <summary>
            Gets a position report; can not be null.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.NetworkActivity">
            <summary>
            The class contains statistics of a client connection.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.NetworkActivity.DataBytesSent">
            <summary>
            Returns number of unencrypted bytes, which have been sent;
            this value represents quantity of logical data.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.NetworkActivity.SslBytesSent">
            <summary>
            Returns number of encrypted bytes, which have been sent;
            this value represents quantity of physical data.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.NetworkActivity.DataBytesReceived">
            <summary>
            Returns number of unencrypted bytes, which have been received;
            this value represents quantity of logical data.
            Zero for non-secure connection.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.NetworkActivity.SslBytesReceived">
            <summary>
            Returns number of encrypted bytes, which have been received;
            this value represents quantity of physical data.
            Zero for non-secure connection.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Errors.InvalidHandleException">
            <summary>
            This exception indicates that invalid pointer (not null) has been passed to FDK native library.
            It can be, if your code destroying data feed/trade object and use it at the same time.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Errors.InvalidHandleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SoftFX.Extended.Events.TradeTransactionReportEventArgs">
            <summary>
            Data for TradeTransactionReport event.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.TradeTransactionReportEventArgs.Report">
            <summary>
            Trade transaction report
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Network">
            <summary>
            The class contains information about network usage by client connection.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Network.GetLastSessionActivity">
            <summary>
            Returns network activity of last session. Can not be null.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.NotificationType">
            <summary>
            Contains possible values of notification type.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.NotificationType.None">
            <summary>
            Generic notification.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.NotificationType.MarginCall">
            <summary>
            Margin call notification.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.NotificationType.MarginCallRevocation">
            <summary>
            Margin call revocation notification.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.NotificationType.StopOut">
            <summary>
            Stop out notification.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.NotificationType.Balance">
            <summary>
            Balance operation: deposit, withdrawal.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.NotificationType.ConfigUpdated">
            <summary>
            Configuration has been changed.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.OrderStatus">
            <summary>
            Possible FIX order statuses.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.New">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.Calculated">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.Filled">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.PartiallyFilled">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.Canceled">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.PendingCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.Rejected">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.Expired">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.PendingReplace">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderStatus.Done">
            <summary>
            
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Position">
            <summary>
            Contains position information for a symbol.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Position.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.Position.Symbol">
            <summary>
            Gets the position symbol.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Position.SettlementPrice">
            <summary>
            Gets the position settlement price.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Position.BuyAmount">
            <summary>
            Gets total amount, which has been bought.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Position.SellAmount">
            <summary>
            Gets total amount, which has been sold.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Position.Commission">
            <summary>
            Gets commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Position.AgentCommission">
            <summary>
            Gets agent commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Position.Swap">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Position.Profit">
            <summary>
            It's used by FinancialCalculator.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Position.BuyPrice">
            <summary>
            Gets average price of buy position.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Position.SellPrice">
            <summary>
            Gets average price of sell position.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.RejectReason">
            <summary>
            Possible reject reasons.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.DealerReject">
            <summary>
            Dealer reject.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.UnknownSymbol">
            <summary>
            Unknown symbol.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.TradeSessionIsClosed">
            <summary>
            Trade session is closed.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.OrderExceedsLImit">
            <summary>
            Order exceeds limit.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.OffQuotes">
            <summary>
            Off quotes
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.UnknownOrder">
            <summary>
            You try to use (modify, close, delete etc.) unknown order.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.DuplicateClientOrderId">
            <summary>
            Duplicate client order ID.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.InvalidTradeRecordParameters">
            <summary>
            Unsupported order characteristic.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.IncorrectQuantity">
            <summary>
            Incorrect quantity.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.RejectReason.Other">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Reports.TradeTransactionReason">
            <summary>
            Trade transaction reason.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReason.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReason.ClientRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReason.PendingOrderActivation">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReason.StopOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReason.StopLossActivation">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReason.TakeProfitActivation">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReason.DealerDecision">
            <summary>
            
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Reports.TradeTransactionReportType">
            <summary>
            Trade transaction report type.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReportType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReportType.OrderOpened">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReportType.OrderCanceled">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReportType.OrderExpired">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReportType.OrderFilled">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReportType.PositionClosed">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReportType.BalanceTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReportType.Credit">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Reports.TradeTransactionReportType.PositionOpened">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderType.Position">
            <summary>
            An opened position.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderType.Limit">
            <summary>
            An order placed with a brokerage to buy or sell a set number of shares at a specified price or better.
            Limit orders also allow an investor to limit the length of time an order can be outstanding before being canceled.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.OrderType.Stop">
            <summary>
            A stop-limit order will be executed at a specified price (or better) after a given stop price has been reached.
            Once the stop price is reached, the stop-limit order becomes a limit order to buy (or sell) at the limit price or better.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Severity">
            <summary>
            Contains possible values of notification severity.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Severity.Information">
            <summary>
            Information message.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Severity.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.Severity.Error">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedHistorySource.GetBarMetadataFile(System.String,System.String,TickTrader.Common.Business.FxPriceType)">
            <summary>
            Reads data chunk for a specified symbol.
            </summary>
            <param name="symbol">Can not be null.</param>
            <param name="periodicity">Can not be null.</param>
            <param name="priceType"></param>
            <returns>Can not be null</returns>
        </member>
        <member name="T:SoftFX.Extended.Storage.DataFeedStorage">
            <summary>
            High level functionality of data feed history local cache.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.#ctor(System.String,System.Type,System.Int32,SoftFX.Extended.DataFeed,System.Boolean,System.Boolean)">
            <summary>
            Creates and initializes a new data feed storage.
            </summary>
            <param name="location">Specified location for data feed history local cache.</param>
            <param name="storageProviderType">Type of storage provider.</param>
            <param name="storageVersion">Storage version.</param>
            <param name="dataFeed">Can be null, in this case you can use storage in offline mode only.</param>
            <param name="flushOnDispose">If true, then quotes cache in memory will be flushed to hard drive.</param>
            <param name="saveTickLevel2History">Save incomning ticks as level2 history or not</param>
            <exception cref="T:System.ArgumentNullException">If location is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.#ctor(System.String,System.Type,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates and initializes a new data feed offline storage.
            </summary>
            <param name="location">Specified location for data feed history local cache.</param>
            <param name="storageProviderType">Type of storage provider.</param>
            <param name="storageVersion">Storage version.</param>
            <param name="flushOnDispose">If true, then quotes cache in memory will be flushed to hard drive.</param>
            <param name="saveTickLevel2History">Save incomning ticks as level2 history or not</param>
            <exception cref="T:System.ArgumentNullException">If location is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.#ctor(System.String,System.Type,System.Int32,SoftFX.Extended.DataFeed,System.Boolean)">
            <summary>
            Creates and initializes a new data feed storage.
            </summary>
            <param name="location">Specified location for data feed history local cache.</param>
            <param name="storageProviderType">Type of storage provider.</param>
            <param name="storageVersion">Storage version.</param>
            <param name="dataFeed">Can be null, in this case you can use storage in offline mode only.</param>
            <param name="flushOnDispose">If true, then quotes cache in memory will be flushed to hard drive.</param>
            <exception cref="T:System.ArgumentNullException">If location is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.#ctor(System.String,System.Type,System.Int32,System.Boolean)">
            <summary>
            Creates and initializes a new data feed offline storage.
            </summary>
            <param name="location">Specified location for data feed history local cache.</param>
            <param name="storageProviderType">Type of storage provider.</param>
            <param name="storageVersion">Storage version.</param>
            <param name="flushOnDispose">If true, then quotes cache in memory will be flushed to hard drive.</param>
            <exception cref="T:System.ArgumentNullException">If location is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.#ctor(System.String,System.Type,SoftFX.Extended.DataFeed,System.Boolean)">
            <summary>
            Creates and initializes a new data feed storage Ver.1.
            </summary>
            <param name="location">Specified location for data feed history local cache.</param>
            <param name="storageProviderType">Type of storage provider.</param>
            <param name="dataFeed">Can be null, in this case you can use storage in offline mode only.</param>
            <param name="flushOnDispose">If true, then quotes cache in memory will be flushed to hard drive.</param>
            <exception cref="T:System.ArgumentNullException">If location is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates and initializes a new data feed offline storage Ver.1.
            </summary>
            <param name="location">Specified location for data feed history local cache.</param>
            <param name="storageProviderType">Type of storage provider.</param>
            <param name="flushOnDispose">If true, then quotes cache in memory will be flushed to hard drive.</param>
            <exception cref="T:System.ArgumentNullException">If location is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.GetSupportedPeriodicityToStoreLevel(System.Int32)">
            <summary>
            
            </summary>
            <param name="qhVersion"></param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.Bind(SoftFX.Extended.DataFeed)">
            <summary>
            Binds / unbinds data feed for tick events.
            Storage uses tick events, if newDataFeed is not null
            Storage does not use tick events, if newDataFeed is null
            </summary>
            <param name="newDataFeed">A data feed instance or null</param>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.RebuildBarsFromBars(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.Append(SoftFX.Extended.Quote)">
            <summary>
            The method append a new quote to the storage.
            </summary>
            <param name="quote"></param>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.StopAppend(System.String)">
            <summary>
            The method stops quotes appending for a symbol.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.Import(System.Collections.Generic.IEnumerable{SoftFX.Extended.Quote},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Imports quotes to storage.
            </summary>
            <param name="ticks">Ticks, which should be imported.</param>
            <param name="level2">Ignore depth of level2, if false.</param>
            <param name="overwriteTickChainsWithEqualTime"></param>
            <param name="rebuild">The method rebuilds all bars, if true.</param>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.Import(System.String,SoftFX.Extended.BarPeriod,System.Collections.Generic.IEnumerable{SoftFX.Extended.Bar},SoftFX.Extended.PriceType,System.Boolean)">
            <summary>
            Imports bars to storage.
            </summary>
            <param name="symbol">Symbol of importing bars</param>
            <param name="period">Period of importing bars</param>
            <param name="bars">Importing bars</param>
            <param name="priceType">Price type of importing bars</param>
            <param name="overwriteBarChainsWithEqualTime"></param>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.Dispose">
            <summary>
            Flushes all data to storage.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.Synchronize(System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            The method synchronizes ticks/level2.
            </summary>
            <param name="symbol"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="marketDepth"></param>
        </member>
        <member name="M:SoftFX.Extended.Storage.DataFeedStorage.Synchronize(System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime)">
            <summary>
            The method synchronizes bars.
            </summary>
            <param name="symbol"></param>
            <param name="priceType"></param>
            <param name="period"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="P:SoftFX.Extended.Storage.DataFeedStorage.Location">
            <summary>
            Gets the data feed storage location.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.DataFeedStorage.Offline">
            <summary>
            Local quotes storage.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.DataFeedStorage.Online">
            <summary>
            Server quotes storage.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Storage.HistoryInfo">
            <summary>
            History information of bars/quotes.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.HistoryInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SoftFX.Extended.Storage.HistoryInfo"/> object.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.HistoryInfo.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:SoftFX.Extended.Storage.HistoryInfo"/> object.
            </summary>
            <param name="availableFrom"></param>
            <param name="availableTo"></param>
        </member>
        <member name="M:SoftFX.Extended.Storage.HistoryInfo.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.Storage.HistoryInfo.AvailableFrom">
            <summary>
            The time from which information is available.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.HistoryInfo.AvailableTo">
            <summary>
            The time to which information is available.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Storage.IStorage">
            <summary>
            Define storage methods.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.IStorage.GetQuotes(System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            The method returns quotes for required date time interval.
            All quotes should be in the following time range: Min(startTime, endTime) &lt;= Quote.CreatingTime &lt;= Max(startTime, endTime)
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="startTime">A start time of ticks enumeration.</param>
            <param name="endTime">A end time of ticks enumeration.</param>
            <param name="depth">
            0 - full book
            (1..n) - restricted book
            </param>
            <returns>Can not be null</returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.IStorage.GetBars(System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime)">
            <summary>
            Gets Bars from storage.
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="priceType"></param>
            <param name="period"></param>
            <param name="startTime">A start time of ticks enumeration.</param>
            <param name="endTime">A end time of ticks enumeration.</param>
            <returns>Returns Bars array.</returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.IStorage.GetBars(System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.Int32)">
            <summary>
            Gets Bars from storage.
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="priceType"></param>
            <param name="period"></param>
            <param name="startTime">A start time of ticks enumeration.</param>
            <param name="barsNumber">Requested bars number; positive value means forward enumeration; negative value means backward enumeration.</param>
            <returns>Returns Bars array.</returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.IStorage.GetPairBars(System.String,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime)">
            <summary>
            Gets PairBars from storage.
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="period"></param>
            <param name="startTime">A start time of ticks enumeration.</param>
            <param name="endTime">A end time of ticks enumeration.</param>
            <returns>Returns PairBars array.</returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.IStorage.GetPairBars(System.String,SoftFX.Extended.BarPeriod,System.DateTime,System.Int32)">
            <summary>
            Gets PairBars from storage.
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="period"></param>
            <param name="startTime">A start time of ticks enumeration.</param>
            <param name="barsNumber">Requested bars number; positive value means forward enumeration; negative value means backward enumeration.</param>
            <returns>Returns PairBars array.</returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.IStorage.GetQuotesInfo(System.String,System.Int32)">
            <summary>
            Gets quotes information.
            </summary>
            <param name="symbol"></param>
            <param name="depth"></param>
            <returns>Returns quotes information.</returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.IStorage.GetBarsInfo(System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod)">
            <summary>
            Gets bars information.
            </summary>
            <param name="symbol"></param>
            <param name="priceType"></param>
            <param name="period"></param>
            <returns>Return bars information.</returns>
        </member>
        <member name="T:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleIterator">
            <summary>
            Quotes range iterator.
            If startTime is less than endTime this is enumeration from past to future.
            If startTime is more than endTime this is enumeration from future to past.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleIterator.#ctor(SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence)">
            <summary>
            Creates a new iterator instance.
            </summary>
            <param name="sequence">An existing sequence instance.</param>
            <exception cref="T:System.ArgumentNullException">if sequence is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleIterator.#ctor(SoftFX.Extended.Storage.IStorage,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new iterator instance.
            </summary>
            <param name="storage">specifies storage, which will be used for quotes requesting.</param>
            <param name="symbol">specifies symbol of quotes enumeration.</param>
            <param name="startTime">specifies start time of quotes enumeration.</param>
            <param name="endTime">specifies finish time of quotes enumeration.</param>
            <param name="depth">specifies required depth of enumerating quotes.</param>
            <param name="lowerBound"></param>
            <param name="uppperBound"></param>
            <exception cref="T:System.ArgumentNullException">If storage or symbol are null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If depth is negative or zero.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleIterator.NextTick">
            <summary>
            The method moves the iterator to the next tick.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleIterator.Sequence">
            <summary>
            Gets used sequence.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleIterator.Finish">
            <summary>
            Returns true, it the iterator points to the location before the first element in sequence.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleIterator.Continue">
            <summary>
            Returns true, if the iterator points to the location after the last element in sequence.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleIterator.Current">
            <summary>
            Gets the current quote.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence">
            <summary>
            Sequence of quotes ranges.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.#ctor(SoftFX.Extended.Storage.IStorage,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new quotes ranges sequence.
            </summary>
            <param name="storage">specifies storage, which will be used for quotes requesting.</param>
            <param name="symbol">specifies symbol of quotes enumeration.</param>
            <param name="startTime">specifies start time of quotes enumeration.</param>
            <param name="endTime">specifies finish time of quotes enumeration.</param>
            <param name="depth">specifies required depth of enumerating quotes.</param>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
            <exception cref="T:System.ArgumentNullException">If storage or symbol are null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If depth is negative or zero.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.#ctor(SoftFX.Extended.Storage.IStorage,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Creates a new quotes ranges sequence.
            </summary>
            <param name="storage">specifies storage, which will be used for quotes requesting.</param>
            <param name="symbol">specifies symbol of quotes enumeration.</param>
            <param name="startTime">specifies start time of quotes enumeration.</param>
            <param name="endTime">specifies finish time of quotes enumeration.</param>
            <param name="depth">specifies required depth of enumerating quotes.</param>
            <param name="size"></param>
            <exception cref="T:System.ArgumentNullException">If storage or symbol are null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If depth is negative or zero.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.GetEnumerator">
            <summary>
             Retrieves an object that can iterate through the ranges.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the ranges.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.Storage">
            <summary>
            Gets used storage.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.Symbol">
            <summary>
            Gets used symbol.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.StartTime">
            <summary>
            Gets used start time.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.EndTime">
            <summary>
            Gets used end time.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.Depth">
            <summary>
            Gets used level2 depth.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.LowerBound">
            <summary>
            Gets lower bound of quotes range, which should be enumerated.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesRangeSingleSequence.UpperBound">
            <summary>
            Gets upper bound of quotes range, which should be enumerated.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Storage.Sequences.QuotesSingleIterator">
            <summary>
            Quotes iterator.
            If startTime is less than endTime this is enumeration from past to future.
            If startTime is more than endTime this is enumeration from future to past.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesSingleIterator.#ctor(SoftFX.Extended.Storage.Sequences.QuotesSingleSequence)">
            <summary>
            Creates a new iterator instance.
            </summary>
            <param name="sequence">An existing sequence instance.</param>
            <exception cref="T:System.ArgumentNullException">if sequence is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesSingleIterator.#ctor(SoftFX.Extended.Storage.IStorage,System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Creates a new iterator instance.
            </summary>
            <param name="storage">specifies storage, which will be used for quotes requesting.</param>
            <param name="symbol">specifies symbol of quotes enumeration.</param>
            <param name="startTime">specifies start time of quotes enumeration.</param>
            <param name="endTime">specifies finish time of quotes enumeration.</param>
            <param name="depth">specifies required depth of enumerating quotes.</param>
            <exception cref="T:System.ArgumentNullException">If storage or symbol are null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If depth is negative or zero.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesSingleIterator.NextTick">
            <summary>
            The method moves the iterator to the next tick.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesSingleIterator.Sequence">
            <summary>
            Gets used sequence.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesSingleIterator.Finish">
            <summary>
            Returns true, it the iterator points to the location before the first element in sequence.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesSingleIterator.Continue">
            <summary>
            Returns true, if the iterator points to the location after the last element in sequence.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesSingleIterator.Current">
            <summary>
            Gets the current quote.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Storage.Sequences.QuotesSingleSequence">
            <summary>
            The sequence enumerates quotes for a specified time interval.
            If startTime is less than endTime this is enumeration from past to future.
            If startTime is more than endTime this is enumeration from future to past.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesSingleSequence.#ctor(SoftFX.Extended.Storage.IStorage,System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Creates a new single quotes sequence.
            </summary>
            <param name="storage">specifies storage, which will be used for quotes requesting.</param>
            <param name="symbol">specifies symbol of quotes enumeration.</param>
            <param name="startTime">specifies start time of quotes enumeration.</param>
            <param name="endTime">specifies finish time of quotes enumeration.</param>
            <param name="depth">specifies required depth of enumerating quotes.</param>
            <exception cref="T:System.ArgumentNullException">If storage or symbol are null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If depth is negative or zero.</exception>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesSingleSequence.GetEnumerator">
            <summary>
            Creates enumerator for the sequence.
            </summary>
            <returns>a new enumerator instance.</returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.Sequences.QuotesSingleSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates enumerator for the sequence.
            </summary>
            <returns>a new enumerator instance.</returns>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesSingleSequence.Storage">
            <summary>
            Gets used storage.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesSingleSequence.Symbol">
            <summary>
            Gets used symbol.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesSingleSequence.StartTime">
            <summary>
            Gets used start time.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesSingleSequence.EndTime">
            <summary>
            Gets used end time.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.Sequences.QuotesSingleSequence.Depth">
            <summary>
            Gets used level2 depth.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Storage.StorageProvider">
            <summary>
            The class contains all supported storage adapter types.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.StorageProvider.Ntfs">
            <summary>
            Gets NtfsMultiMetaFiles.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.StorageProvider.SQLite">
            <summary>
            SQLite storage provider type.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Storage.StorageProvider.Providers">
            <summary>
            Gets list of all possible storage providers.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Storage.StorageConvert.BidComparator(SoftFX.Extended.QuoteEntry,SoftFX.Extended.QuoteEntry)">
            <summary>
            Comparator two bid quote entries.
            </summary>
            <param name="first">A first quote entry.</param>
            <param name="second">A second quote entry.</param>
            <returns>0, -1, 1</returns>
        </member>
        <member name="M:SoftFX.Extended.Storage.StorageConvert.AskComparator(SoftFX.Extended.QuoteEntry,SoftFX.Extended.QuoteEntry)">
            <summary>
            Comparator for two ask quote entries.
            </summary>
            <param name="first">A first quote entry.</param>
            <param name="second">A second quote entry.</param>
            <returns>0, -1, 1</returns>
        </member>
        <member name="T:SoftFX.Extended.StreamIterator`1">
            <summary>
            Contains common part of all streams.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.StreamIterator`1.Next">
            <summary>
            Moves the iterator to the next stream element.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.StreamIterator`1.NextEx(System.Int32)">
            <summary>
            Moves the iterator to the next stream element.
            </summary>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
        </member>
        <member name="M:SoftFX.Extended.StreamIterator`1.ToArray">
            <summary>
            Reads an associated stream to the end and returns all elements as array.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.StreamIterator`1.Dispose">
            <summary>
            Release all unmanaged resources.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.StreamIterator`1.Finalize">
            <summary>
            Release all unmanaged resources.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.StreamIterator`1.EndOfStream">
            <summary>
            Returns true, if the end of associated stream has been reached.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.StreamIterator`1.Item">
            <summary>
            Gets the current stream element.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.TimeDirection">
            <summary>
            The enumeration describes possible time directions.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TimeDirection.Forward">
            <summary>
            From past to future.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TimeDirection.Backward">
            <summary>
            From future to past.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Errors.LogoutException">
            <summary>
            This exception indicates that a synchronous call has been interrupted by logout event.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Errors.LogoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SoftFX.Extended.Bars">
            <summary>
            Bars enumeration.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Bars.#ctor(SoftFX.Extended.DataFeed,System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime)">
            <summary>
            Creates a new Bars stream instance.
            If startTime is less or equal than endTime then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range: Min(startTime, endTime) &lt;= Bar.From and Bar.To &lt;= Max(startTime, endTime)
            </summary>
            <param name="datafeed">DataFeed instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="priceType">A required price type: Bid or Ask.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="endTime">A end time of bars enumeration.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Bars.#ctor(SoftFX.Extended.Storage.IStorage,System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime)">
            <summary>
            Creates a new Bars stream instance.
            If startTime is less or equal than endTime then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range: Min(startTime, endTime) &lt;= Bar.From and Bar.To &lt;= Max(startTime, endTime)
            </summary>
            <param name="storage">Online/Offline provider of data feed storage instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="priceType">A required price type: Bid or Ask.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="endTime">A end time of bars enumeration.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Bars.#ctor(SoftFX.Extended.DataFeed,System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Creates a new Bars stream instance.
            If startTime is less or equal than endTime then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range: Min(startTime, endTime) &lt;= Bar.From and Bar.To &lt;= Max(startTime, endTime)
            </summary>
            <param name="datafeed">DataFeed instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="priceType">A required price type: Bid or Ask.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="endTime">A end time of bars enumeration.</param>
            <param name="preferredBufferSize">Bars enumeration requests bars from server by chunks. This is preferred chunk size. It should be positive.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If preferredBufferSize is less than 2.</exception>
        </member>
        <member name="M:SoftFX.Extended.Bars.#ctor(SoftFX.Extended.DataFeed,System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.Int32)">
            <summary>
            Creates a new Bars stream instance.
            If barsNumber is less than zero then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range:
            	Bar.From &gt;= startTime for forward enumeration
            	Bar.To &lt;= startTime for backward enumeration
            </summary>
            <param name="datafeed">Datafeed instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="priceType">A required price type: Bid or Ask.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="barsNumber">Requested bars number; positive value means forward enumeration; negative value means backward enumeration.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Bars.#ctor(SoftFX.Extended.Storage.IStorage,System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.Int32)">
            <summary>
            Creates a new Bars stream instance.
            If barsNumber is less than zero then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range:
            	Bar.From &gt;= startTime for forward enumeration
            	Bar.To &lt;= startTime for backward enumeration
            </summary>
            <param name="storage">Online/Offline provider of data feed storage instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="priceType">A required price type: Bid or Ask.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="barsNumber">Requested bars number; positive value means forward enumeration; negative value means backward enumeration.</param>
            <exception cref="T:System.ArgumentNullException">If storage, period or symbol is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Bars.#ctor(SoftFX.Extended.DataFeed,System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Creates a new Bars stream instance.
            If barsNumber is less than zero then this is forward bars enumeration (from past to future), otherwise this is backward enumeration (from future to past).
            Anyway all bars should be in the following time range:
            	Bar.From &gt;= startTime for forward enumeration
            	Bar.To &lt;= startTime for backward enumeration
            </summary>
            <param name="datafeed">Datafeed instance; can not be null.</param>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="priceType">A required price type: Bid or Ask.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="barsNumber">Requested bars number; positive value means forward enumeration; negative value means backward enumeration.</param>
            <param name="preferredBufferSize">Bars enumeration requests bars from server by chunks. This is preferred chunk size. It should be positive.</param>
            <exception cref="T:System.ArgumentNullException">If datafeed, period or symbol is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If preferredBufferSize is less than 2.</exception>
        </member>
        <member name="M:SoftFX.Extended.Bars.GetEnumerator">
            <summary>
            The method returns bars enumerator.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.Bars.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            The method returns bars enumerator.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="T:SoftFX.Extended.DataCache">
            <summary>
            Contains common local cache methods of feed and trade.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataCache.SessionInfo">
            <summary>
            Returns cache of session information.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataCache.Client">
            <summary>
            Data client.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.DataCache`1">
            <summary>
            Contains common local cache methods of feed and trade.
            </summary>
            <typeparam name="TClient">Data client.</typeparam>
        </member>
        <member name="P:SoftFX.Extended.DataCache`1.Client">
            <summary>
            Data client.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.DataClient">
            <summary>
            Provides common methods of DataTrade and DataFeed classes.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataClient.Initialize(System.String)">
            <summary>
            Initializes the data feed instance; it must be stopped.
            </summary>
            <param name="connectionString">Can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If connectionString is null.</exception>
            <exception cref="T:System.InvalidOperationException">If the instance is not stopped.</exception>
        </member>
        <member name="M:SoftFX.Extended.DataClient.OnInitialized">
            <summary>
            This method is called when DataClient object is constructed.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataClient.Start">
            <summary>
            Starts data feed/trade instance.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataClient.Start(System.Int32)">
            <summary>
            Starts data feed/trade instance and waits for logon event.
            </summary>
            <param name="timeoutInMilliseconds">Timeout of logon waiting.</param>
            <returns>true, if logon event is occurred, otherwise false</returns>
        </member>
        <member name="M:SoftFX.Extended.DataClient.Stop">
            <summary>
            Stops data feed instance. The method can not be called into any feed/trade event handler.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataClient.GenerateOperationId">
            <summary>
            The method generates a new unique string ID.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataClient.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataClient.SynchOperationTimeout">
            <summary>
            Gets or sets default synchronous operation timeout in milliseconds.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataClient.UsedProtocolVersion">
            <summary>
            Gets used protocol version of the object.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataClient.IsStarted">
            <summary>
            Returns true, the data trade/feed object is started, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataClient.IsStopped">
            <summary>
            Returns true, the data trade/feed object is stopped, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataClient.Network">
            <summary>
            Returns a network information of corresponded client connection; can not be null.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataClient.Logon">
            <summary>
            Occurs when data feed is logon.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataClient.Logout">
            <summary>
            Occurs when data feed is logout.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataClient.SessionInfo">
            <summary>
            Occurs when session info received or changed.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataClient.CacheInitialized">
            <summary>
            Occurs when local cache initialized.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.DataFeed">
            <summary>
            This class connects to trading platform and receives quotes and other notifications.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataFeed.#ctor">
            <summary>
            Creates a new data feed instance. You should use Initialize method to finish the instance initialization.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataFeed.#ctor(System.String)">
            <summary>
            Creates and initializes a new data feed instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">If connectionString is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.DataFeed.OnInitialized">
            <summary>
            This method is called when DataFeed object is constructed.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataFeed.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataFeed.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataFeed.Tick">
            <summary>
            Occurs when a new quote is received.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataFeed.CurrencyInfo">
            <summary>
            Occurs when currencies information is initialized.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataFeed.SymbolInfo">
            <summary>
            Occurs when symbols information is initialized.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataFeed.Notify">
            <summary>
            Occurs when a notification is received.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataFeed.Server">
            <summary>
            Gets object, which encapsulates server side methods.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataFeed.Cache">
            <summary>
            Gets object, which encapsulates client cache methods.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataFeed.QuotesQueueThresholdSize">
            <summary>
            Gets or sets queue size for quotes.
            Note: FDK uses a separated queue for every symbol.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.DataFeedCache">
            <summary>
            The class contains methods, which are executed in client side.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataFeedCache.GetBid(System.String)">
            <summary>
            The method gets the best bid price by symbol.
            </summary>
            <param name="symbol">a required financial security.</param>
            <returns>The best bid price.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedCache.TryGetBid(System.String,System.Double@)">
            <summary>
            The method gets the best bid price by symbol.
            </summary>
            <param name="symbol">a required financial security.</param>
            <param name="price">the best bid.</param>
            <returns>false, if off quotes, otherwise true.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedCache.TryGetBid(System.String,System.Double@,System.Double@,System.DateTime@)">
            <summary>
            The method gets the best bid price, volume and creation time by symbol.
            </summary>
            <param name="symbol">Can not be null.</param>
            <param name="price">the best bid.</param>
            <param name="volume">volume of the best bid.</param>
            <param name="creationTime">the quote creation time.</param>
            <returns>false, if off quotes, otherwise true.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedCache.GetAsk(System.String)">
            <summary>
            The method gets the best ask price by symbol.
            </summary>
            <param name="symbol">a required financial security.</param>
            <returns>The best ask price.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedCache.TryGetAsk(System.String,System.Double@)">
            <summary>
            The method gets the best ask price by symbol.
            </summary>
            <param name="symbol">a required financial security.</param>
            <param name="price">the best ask.</param>
            <returns>false, if off quotes, otherwise true.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedCache.TryGetAsk(System.String,System.Double@,System.Double@,System.DateTime@)">
            <summary>
            The method gets the best ask price, volume and creation time by symbol.
            </summary>
            <param name="symbol">Can not be null.</param>
            <param name="price">the best ask.</param>
            <param name="volume">volume of the best ask.</param>
            <param name="creationTime">the quote creation time.</param>
            <returns>false, if off quotes, otherwise true.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedCache.GetLevel2(System.String)">
            <summary>
            The method gets level2 quotes by symbol.
            </summary>
            <param name="symbol">Can not be null.</param>
            <returns>Level2 quotes.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedCache.TryGetLevel2(System.String,SoftFX.Extended.Quote@)">
            <summary>
            The method gets level2 quotes by symbol.
            </summary>
            <param name="symbol">Can not be null.</param>
            <param name="quote"></param>
            <returns>True, if quote for the symbol is presented, otherwise false.</returns>
        </member>
        <member name="P:SoftFX.Extended.DataFeedCache.Symbols">
            <summary>
            Gets symbols information. Returned value can not be null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataFeedCache.Currencies">
            <summary>
            Gets currencies information. Returned value can not be null.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.DataFeedServer">
            <summary>
            The class contains methods, which are executed in server side.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.DataServer`1">
            <summary>
            
            </summary>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="T:SoftFX.Extended.DataServer">
            <summary>
            Contains common server side methods of feed and trade.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataServer.GetFileChunk(System.String,System.Int32)">
            <summary>
            Gets a specified chunk of a specified file.
            </summary>
            <param name="fileId">A requested file id; can not be null.</param>
            <param name="chunkId">A requested chunk id; can not be negative.</param>
            <returns>Returns data and information of downloaded chunk; can not be null</returns>
        </member>
        <member name="M:SoftFX.Extended.DataServer.GetFileChunkEx(System.String,System.Int32,System.Int32)">
            <summary>
            Gets a specified chunk of a specified file.
            </summary>
            <param name="fileId">A requested file id; can not be null.</param>
            <param name="chunkId">A requested chunk id; can not be negative.</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns>Returns data and information of downloaded chunk; can not be null</returns>
        </member>
        <member name="M:SoftFX.Extended.DataServer.GetSessionInfo">
            <summary>
            The method returns the current trade session information.
            </summary>
            <returns>can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataServer.GetSessionInfoEx(System.Int32)">
            <summary>
            The method returns the current trade session information.
            </summary>
            <param name="timeoutInMilliseconds">timeout of the operation in milliseconds</param>
            <returns>can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.DataServer.Client">
            <summary>
            Data client.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataServer`1.Client">
            <summary>
            Data client.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetCurrencies">
            <summary>
            The method returns list of currencies supported by server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetCurrencies(System.Int32)">
            <summary>
            The method returns list of currencies supported by server.
            </summary>
            <param name="timeoutInMilliseconds">timeout of the operation</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetSymbols">
            <summary>
            The method returns list of symbols supported by server.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetSymbolsEx(System.Int32)">
            <summary>
            The method returns list of symbols supported by server.
            </summary>
            <param name="timeoutInMilliseconds">timeout of the operation</param>
            <returns>can not be null</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetQuotesHistoryVersion">
            <summary>
            Returns version of server quotes history.
            </summary>
            <returns>quote history version</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.SubscribeToQuotes(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            The method subscribes to quotes.
            </summary>
            <param name="symbols">list of requested symbols; can not be null</param>
            <param name="depth">
            0 - full book
            (1..5) - restricted book
            </param>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.SubscribeToQuotesEx(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            The method subscribes to quotes.
            </summary>
            <param name="symbols">list of requested symbols; can not be null</param>
            <param name="depth">
            0 - full book
            (1..5) - restricted book
            </param>
            <param name="timeoutInMilliseconds">Timeout of the operation</param>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.UnsubscribeQuotes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The method unsubscribes quotes.
            </summary>
            <param name="symbols">list of symbols, which server should not send to the client; can not be null</param>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.UnsubscribeQuotesEx(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            The method unsubscribes quotes.
            </summary>
            <param name="symbols">list of symbols, which server should not send to the client; can not be null</param>
            <param name="timeoutInMilliseconds">timeout of the operation</param>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetBarsHistory(System.String,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.DateTime,System.DateTime)">
            <summary>
            The method gets history bars from the server.
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="priceType">A required price type: Bid or Ask.</param>
            <param name="startTime">A start time of bars enumeration.</param>
            <param name="endTime">A end time of bars enumeration.</param>
            <param name="period">Bar period instance; can not be null.</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetHistoryBars(System.String,System.DateTime,System.Int32,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod)">
            <summary>
            The method gets history bars from the server.
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="time">Date and time which specifies the historical point.</param>
            <param name="barsNumber">The maximum number of bars in the requested chart. The value can be negative or positive.
            Positive value means historical chart from the specified historical point to future.</param>
            <param name="priceType">Can be bid or ask.</param>
            <param name="period">Chart periodicity.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetHistoryBarsEx(System.String,System.DateTime,System.Int32,SoftFX.Extended.PriceType,SoftFX.Extended.BarPeriod,System.Int32)">
            <summary>
            The method gets history bars from the server.
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="time">Date and time which specifies the historical point.</param>
            <param name="barsNumber">The maximum number of bars in the requested chart. The value can be negative or positive.
            Positive value means historical chart from the specified historical point to future.</param>
            <param name="priceType">Can be bid or ask.</param>
            <param name="period">Chart periodicity.</param>
            <param name="timeoutInMilliseconds">timeout of the operation</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetBarsHistoryFiles(System.String,System.DateTime,SoftFX.Extended.PriceType,System.String)">
            <summary>
            The method gets history bars from the server.
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="time">Date and time which specifies the historical point.</param>
            <param name="priceType"></param>
            <param name="period"></param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetBarsHistoryFilesEx(System.String,System.DateTime,SoftFX.Extended.PriceType,System.String,System.Int32)">
            <summary>
            The method gets history bars from the server.
            </summary>
            <param name="symbol">A required symbol; can not be null.</param>
            <param name="time">Date and time which specifies the historical point.</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <param name="priceType"></param>
            <param name="period"></param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetQuotesHistoryFiles(System.String,System.Boolean,System.DateTime)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="includeLevel2"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetQuotesHistoryFilesEx(System.String,System.Boolean,System.DateTime,System.Int32)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="includeLevel2"></param>
            <param name="time"></param>
            <param name="timeoutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetBarsHistoryMetaInfoFile(System.String,SoftFX.Extended.PriceType,System.String)">
            <summary>
            Gets meta information file ID for a specified input arguments.
            </summary>
            <param name="symbol">Can not be null.</param>
            <param name="priceType"></param>
            <param name="period">Can not be null</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetBarsHistoryMetaInfoFileEx(System.String,SoftFX.Extended.PriceType,System.String,System.Int32)">
            <summary>
            Gets meta information file ID for a specified input arguments.
            </summary>
            <param name="symbol"></param>
            <param name="priceType"></param>
            <param name="period"></param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetQuotesHistoryMetaInfoFile(System.String,System.Boolean)">
            <summary>
            Gets meta information file ID for a specified input arguments.
            </summary>
            <param name="symbol">Can not be null.</param>
            <param name="includeLevel2">False: ticks contains only the best bid/ask prices; true: ticks contains full level2.</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataFeedServer.GetQuotesHistoryMetaInfoFileEx(System.String,System.Boolean,System.Int32)">
            <summary>
            Gets meta information file ID for a specified input arguments.
            </summary>
            <param name="symbol">Can not be null.</param>
            <param name="includeLevel2">False: ticks contains only the best bid/ask prices; true: ticks contains full level2.</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="T:SoftFX.Extended.DataStream">
            <summary>
            The class provides methods for reading server side files.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataStream.#ctor(SoftFX.Extended.DataClient,System.String)">
            <summary>
            Creates a new data stream object.
            </summary>
            <param name="dataClient">A data client; can not be null.</param>
            <param name="fileId">A server file Id; can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If dataClient or fileId is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.DataStream.#ctor(SoftFX.Extended.DataClient,System.String,System.Int32)">
            <summary>
            Creates a new data stream object.
            </summary>
            <param name="dataClient">A data client; can not be null.</param>
            <param name="fileId">A server file Id; can not be null.</param>
            <param name="timeoutInMilliseconds">
            Timeout of server requests in milliseconds.
            If the value is not positive, then default data client timeout will be used.
            </param>
        </member>
        <member name="M:SoftFX.Extended.DataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between offset and (offset + count - 1) replaced
            by the bytes read from the current source.
            </param>
            <param name="offset">
             The zero-based byte offset in buffer at which to begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <exception cref="T:System.IO.IOException">If data stream detects that the reading file has been changed.</exception>
            <returns>Number of</returns>
        </member>
        <member name="M:SoftFX.Extended.DataStream.ToArray">
            <summary>
            Reads all data from the current stream position to the end of the stream and returns as array.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataStream.Flush">
            <summary>
            Always throw exception.
            </summary>
            <exception cref="T:System.IO.IOException">Always.</exception>
        </member>
        <member name="M:SoftFX.Extended.DataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
             The method doesn't supported by DataStream.
            </summary>
            <param name="offset">The parameter is ignored.</param>
            <param name="origin">The parameter is ignored.</param>
            <exception cref="T:System.NotSupportedException">Always.</exception>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataStream.SetLength(System.Int64)">
            <summary>
            The method doesn't supported by DataStream.
            </summary>
            <param name="value">The parameter is ignored.</param>
            <exception cref="T:System.NotImplementedException">Always.</exception>
        </member>
        <member name="M:SoftFX.Extended.DataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            The method doesn't supported by DataStream.
            </summary>
            <param name="buffer">The parameter is ignored.</param>
            <param name="offset">The parameter is ignored.</param>
            <param name="count">The parameter is ignored</param>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:SoftFX.Extended.DataStream.FileName">
            <summary>
            Gets server side file name.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataStream.CanRead">
            <summary>
            Gets always true.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataStream.CanSeek">
            <summary>
            Gets always false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataStream.CanWrite">
            <summary>
            Gets always false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataStream.Length">
            <summary>
            Always throw exception.
            </summary>
            <exception cref="T:System.IO.IOException">Always.</exception>
        </member>
        <member name="P:SoftFX.Extended.DataStream.Position">
            <summary>
            The property get current stream position.
            </summary>
            <exception cref="T:System.NotSupportedException">Always for set operation.</exception>
        </member>
        <member name="T:SoftFX.Extended.DataTrade">
            <summary>
            This class connects to trading platform and provides trading functionality.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataTrade.#ctor">
            <summary>
            Creates a new data trade instance.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataTrade.#ctor(System.String)">
            <summary>
            Creates and initializes a new data trade instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">If connectionString is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.DataTrade.OnInitialized">
            <summary>
            This method is called when DataTrade object is constructed.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataTrade.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataTrade.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataTrade.AccountInfo">
            <summary>
            Occurs when account information is changed.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataTrade.ExecutionReport">
            <summary>
            Occurs when a trade operation is executing.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataTrade.TradeTransactionReport">
            <summary>
            
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataTrade.PositionReport">
            <summary>
            The event is supported by Net account only.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataTrade.Notify">
            <summary>
            Occurs when a notification is received.
            </summary>
        </member>
        <member name="E:SoftFX.Extended.DataTrade.BalanceOperation">
            <summary>
            Occurs when a notification of balance operation is received.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataTrade.Server">
            <summary>
            Gets object, which encapsulates server side methods.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataTrade.Cache">
            <summary>
            Gets object, which encapsulates client cache methods.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.DataTradeCache">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataTradeCache.TradeRecords">
            <summary>
            Gets trade records.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataTradeCache.Positions">
            <summary>
            Gets postions; available for Net account only.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.DataTradeCache.AccountInfo">
            <summary>
            Gets account information.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.DataTradeServer">
            <summary>
            The class contains methods, which are executed in server side.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.GetAccountInfo">
            <summary>
            The method returns the current account information.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.GetAccountInfoEx(System.Int32)">
            <summary>
            The method returns the current account information.
            </summary>
            <param name="timeoutInMilliseconds">timeout of the synchrnous operation.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.SendOrder(System.String,SoftFX.Extended.TradeCommand,SoftFX.Extended.TradeRecordSide,System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            The method opens a new order.
            </summary>
            <param name="symbol">Trading currency pair symbol; can not be null.</param>
            <param name="command">Market, limit or stop.</param>
            <param name="side">Order side: buy or sell.</param>
            <param name="price">Activating price for pending orders; price threshold for market orders.</param>
            <param name="volume">Requsted volume.</param>
            <param name="stopLoss">Stop loss price.</param>
            <param name="takeProfit">Take profit price.</param>
            <param name="expiration">Expiration time, should be specified for pending orders.</param>
            <param name="comment">User defined comment for a new opening order. Null is interpreded as empty string.</param>
            <returns>A new order; can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.SendOrderEx(System.String,SoftFX.Extended.TradeCommand,SoftFX.Extended.TradeRecordSide,System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Int32)">
            <summary>
            The method opens a new order.
            </summary>
            <param name="symbol">Trading currency pair symbol; can not be null.</param>
            <param name="command">Market, limit or stop.</param>
            <param name="side">Trade record side: buy or sell.</param>
            <param name="price">Activating price for pending orders; price threshold for market orders.</param>
            <param name="volume">Requsted volume.</param>
            <param name="stopLoss">Stop loss price.</param>
            <param name="takeProfit">Take profit price.</param>
            <param name="expiration">Expiration time, should be specified for pending orders.</param>
            <param name="comment">User defined comment for a new opening order. Null is interpreded as empty string.</param>
            <param name="timeoutInMilliseconds">Timeout of the synchronous operation.</param>
            <returns>A new trade record; can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.SendOrderEx(System.String,System.String,SoftFX.Extended.TradeCommand,SoftFX.Extended.TradeRecordSide,System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            The method opens a new order.
            </summary>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <param name="symbol">Trading currency pair symbol; can not be null.</param>
            <param name="command">Market, limit or stop.</param>
            <param name="side">Trade record side: buy or sell.</param>
            <param name="price">Activating price for pending orders; price threshold for market orders.</param>
            <param name="volume">Requsted volume.</param>
            <param name="stopLoss">Stop loss price.</param>
            <param name="takeProfit">Take profit price.</param>
            <param name="expiration">Expiration time, should be specified for pending orders.</param>
            <param name="comment">User defined comment for a new opening order. Null is interpreded as empty string.</param>
            <returns>A new trade record; can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.SendOrderEx(System.String,System.String,SoftFX.Extended.TradeCommand,SoftFX.Extended.TradeRecordSide,System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Int32)">
            <summary>
            The method opens a new order.
            </summary>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <param name="symbol">Trading currency pair symbol; can not be null.</param>
            <param name="command">Market, limit or stop.</param>
            <param name="side">Trade record side: buy or sell.</param>
            <param name="price">Activating price for pending orders; price threshold for market orders.</param>
            <param name="volume">Requsted volume.</param>
            <param name="stopLoss">Stop loss price.</param>
            <param name="takeProfit">Take profit price.</param>
            <param name="expiration">Expiration time, should be specified for pending orders.</param>
            <param name="comment">User defined comment for a new opening order. Null is interpreded as empty string.</param>
            <param name="timeoutInMilliseconds">Timeout of the synchronous operation.</param>
            <returns>A new trade record; can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.DeletePendingOrder(System.String,System.String,SoftFX.Extended.TradeRecordSide)">
            <summary>
            The method deletes an existing pending order.
            </summary>
            <param name="orderId">An existing pending order ID.</param>
            <param name="clientId">An existing pending client order ID.</param>
            <param name="side">Order side: buy or sell.</param>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.DeletePendingOrderEx(System.String,System.String,SoftFX.Extended.TradeRecordSide,System.Int32)">
            <summary>
            The method deletes an existing pending order.
            </summary>
            <param name="orderId">An existing pending order ID.</param>
            <param name="clientId">An existing pending client order ID.</param>
            <param name="side">Order side: buy or sell.</param>
            <param name="timeoutInMilliseconds">Timeout of the synchronous operation.</param>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.DeletePendingOrderEx(System.String,System.String,System.String,SoftFX.Extended.TradeRecordSide)">
            <summary>
            The method deletes an existing pending order.
            </summary>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <param name="orderId">An existing pending order ID.</param>
            <param name="clientId">An existing pending client order ID.</param>
            <param name="side">Order side: buy or sell.</param>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ModifyTradeRecord(System.String,System.String,System.String,SoftFX.Extended.TradeRecordType,SoftFX.Extended.TradeRecordSide,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            The method modifies an existing trade record.
            </summary>
            <param name="orderId">An existing pending order ID.</param>
            <param name="clientId">An existing pending client order ID.</param>
            <param name="symbol">Currency pair.</param>
            <param name="type">Order type: Limit or Stop.</param>
            <param name="side">Order side: buy or sell.</param>
            <param name="newActivationPrice">A new activation price.</param>
            <param name="volume">A new volume of pending order.</param>
            <param name="newStopLoss">A new stop loss price of pending order.</param>
            <param name="newTakeProfit">A new take profit price of pending order.</param>
            <param name="newExpiration">A new expiration time.</param>
            <param name="newComment">A new comment.</param>
            <returns>A modified trade record.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ModifyTradeRecordEx(System.String,System.String,System.String,SoftFX.Extended.TradeRecordType,SoftFX.Extended.TradeRecordSide,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Int32)">
            <summary>
            The method modifies an existing trade record.
            </summary>
            <param name="orderId">An existing pending order ID.</param>
            <param name="clientId">An existing pending client order ID.</param>
            <param name="symbol">Currency pair.</param>
            <param name="type">Order type: Limit or Stop.</param>
            <param name="side">Order side: buy or sell.</param>
            <param name="newActivationPrice">A new activation price.</param>
            <param name="volume">A new volume of pending order.</param>
            <param name="newStopLoss">A new stop loss price of pending order.</param>
            <param name="newTakeProfit">A new take profit price of pending order.</param>
            <param name="newExpiration">A new expiration time.</param>
            <param name="newComment">A new comment.</param>
            <param name="timeoutInMilliseconds">Timeout of the synchronous operation.</param>
            <returns>A modified trade record.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ModifyTradeRecordEx(System.String,System.String,System.String,System.String,SoftFX.Extended.TradeRecordType,SoftFX.Extended.TradeRecordSide,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            The method modifies an existing trade record.
            </summary>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <param name="orderId">An existing pending order ID.</param>
            <param name="clientId">An existing pending client order ID.</param>
            <param name="symbol">Currency pair.</param>
            <param name="type">Order type: Limit or Stop.</param>
            <param name="side">Order side: buy or sell.</param>
            <param name="newActivationPrice">A new activation price.</param>
            <param name="volume">A new volume of pending order.</param>
            <param name="newStopLoss">A new stop loss price of pending order.</param>
            <param name="newTakeProfit">A new take profit price of pending order.</param>
            <param name="newExpiration">A new expiration time.</param>
            <param name="newComment">A new comment.</param>
            <returns>A modified trade record.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ClosePosition(System.String)">
            <summary>
            The method closes an existing position.
            The method is supported by Gross account only.
            </summary>
            <param name="orderId">Order ID; can not be null.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ClosePositionEx(System.String,System.String)">
            <summary>
            The method closes an existing position.
            The method is supported by Gross account only.
            </summary>
            <param name="orderId">Order ID; can not be null.</param>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ClosePositionEx(System.String,System.Int32)">
            <summary>
            The method closes an existing position.
            The method is supported by Gross account only.
            </summary>
            <param name="orderId">Order ID; can not be null.</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ClosePositionEx(System.String,System.String,System.Int32)">
            <summary>
            The method closes an existing position.
            The method is supported by Gross account only.
            </summary>
            <param name="orderId">Order ID; can not be null.</param>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ClosePositionPartially(System.String,System.Double)">
            <summary>
            The method closes an existing market order.
            The method is supported by Gross account only.
            </summary>
            <param name="orderId">Order ID; can not be null.</param>
            <param name="volume">closing volume</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ClosePositionPartiallyEx(System.String,System.Double,System.Int32)">
            <summary>
            The method closes an existing market order.
            The method is supported by Gross account only.
            </summary>
            <param name="orderId">Order ID; can not be null.</param>
            <param name="volume">closing volume</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ClosePositionPartiallyEx(System.String,System.Double,System.String)">
            <summary>
            The method closes an existing market order.
            The method is supported by Gross account only.
            </summary>
            <param name="orderId">Order ID; can not be null.</param>
            <param name="volume">closing volume</param>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.ClosePositionPartiallyEx(System.String,System.Double,System.String,System.Int32)">
            <summary>
            The method closes an existing market order.
            The method is supported by Gross account only.
            </summary>
            <param name="orderId">Order ID; can not be null.</param>
            <param name="volume">closing volume</param>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.CloseByPositions(System.String,System.String)">
            <summary>
            The method closes by two orders.
            The method is supported by Gross account only.
            </summary>
            <param name="firstOrderId">The first order ID; can not be null.</param>
            <param name="secondOrderId">The second order ID; can not be null.</param>
            <returns>True, if the operation has been succeeded; otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.CloseByPositionsEx(System.String,System.String,System.Int32)">
            <summary>
            The method closes by two orders.
            The method is supported by Gross account only.
            </summary>
            <param name="firstOrderId">The first order ID; can not be null.</param>
            <param name="secondOrderId">The second order ID; can not be null.</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns>True, if the operation has been succeeded; otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.CloseAllPositions">
            <summary>
            The method closes all opened market orders.
            The method is supported by Gross account only.
            </summary>
            <returns>Number of affected orders.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.CloseAllPositionsEx(System.Int32)">
            <summary>
            The method closes all opened market orders.
            The method is supported by Gross account only.
            </summary>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns>Number of affected orders.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.GetTradeRecords">
            <summary>
            The method returns all trade records for the account.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.GetTradeRecordsEx(System.Int32)">
            <summary>
            The method returns all trade records for the account.
            </summary>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds</param>
            <returns>can not be null</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.GetTradeTransactionReports(SoftFX.Extended.TimeDirection,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            The method gets snapshot of trade transaction reports and subscribe to notifications.
            All reports will be received as events.
            </summary>
            <param name="direction">Time direction of reports snapshot</param>>
            <param name="subscribeToNotifications">Specify false to receive only history snapshot; true to receive history snapshot and updates.</param>
            <param name="from">
            Optional parameter, which specifies the start date and time for trade transaction reports.
            You should specify the parameter, if you specified "to" parameter.
            The parameter is supported since 1.6 FIX version.
            </param>
            <param name="to">
            Optional parameter, which specifies the finish date and time for trade transaction reports.
            You should specify the parameter, if you specified "from" parameter.
            The parameter is supported since 1.6 FIX version.
            </param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.GetTradeTransactionReports(SoftFX.Extended.TimeDirection,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32)">
            <summary>
            The method gets snapshot of trade transaction reports and subscribe to notifications.
            All reports will be received as events.
            </summary>
            <param name="direction">Time direction of reports snapshot</param>>
            <param name="subscribeToNotifications">Specifye false to receive only history snapshot; true to receive history snapshot and updates.</param>
            <param name="from">
            Optional parameter, which specifies the start date and time for trade transaction reports.
            You should specify the parameter, if you specified "to" parameter.
            The parameter is supported since 1.6 FIX version.
            </param>
            <param name="to">
            Optional parameter, which specifies the finish date and time for trade transaction reports.
            You should specify the parameter, if you specified "from" parameter.
            The parameter is supported since 1.6 FIX version.
            </param>
            <param name="preferedBufferSize"> Specifies number of reports requested at once. Server has itself limitation and if you specify out of range value it will be ignored.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.GetTradeTransactionReportsEx(SoftFX.Extended.TimeDirection,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            The method gets snapshot of trade transaction reports and subscribe to notifications.
            All reports will be received as events.
            </summary>
            <param name="direction">Time direction of reports snapshot</param>
            <param name="subscribeToNotifications">Specifye false to receive only history snapshot; true to receive history snapshot and updates.</param>
            <param name="from">
            Optional parameter, which specifies the start date and time for trade transaction reports.
            You should specify the parameter, if you specified "to" parameter.
            The parameter is supported since 1.6 FIX version.
            </param>
            <param name="to">
            Optional parameter, which specifies the finish date and time for trade transaction reports.
            You should specify the parameter, if you specified "from" parameter.
            The parameter is supported since 1.6 FIX version.
            </param>
            <param name="preferedBufferSize"> Specifies number of reports requested at once. Server has itself limitation and if you specify out of range value it will be ignored.</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.UnsubscribeTradeTransactionReports">
            <summary>
            The method stops trade transaction reports receiving.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.DataTradeServer.UnsubscribeTradeTransactionReportsEx(System.Int32)">
            <summary>
            The method stops trade transaction reports receiving.
            </summary>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds</param>
        </member>
        <member name="T:SoftFX.Extended.AccountInfo">
            <summary>
            Contains account information.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.AccountInfo.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.Name">
            <summary>
            Gets account name. Supported since ext.1.11 fix version.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.Leverage">
            <summary>
            Gets the account leverage.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.Balance">
            <summary>
            Gets the account balance.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.Margin">
            <summary>
            Gets the account margin.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.Equity">
            <summary>
            Gets the account equity.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.Currency">
            <summary>
            Gets the account balance currency.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.AccountId">
            <summary>
            Gets the the account id.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.Type">
            <summary>
            Gets the accounting type.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.MarginCallLevel">
            <summary>
            Gets margin call level.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.StopOutLevel">
            <summary>
            Get stop out level.7
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.IsValid">
            <summary>
            Gets account state:
            true, if account is valid
            false, if account has broken/invalid trades
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.IsReadOnly">
            <summary>
            Gets true, if account can trade, otherwise false (investor password).
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.IsBlocked">
            <summary>
            Gets whether account is blocked or not.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.AccountInfo.Assets">
            <summary>
            Gets assets; this feature is available for cash accounts only.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.AccountInfoEventArgs">
            <summary>
            Contains account information.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.AccountInfoEventArgs.Information">
            <summary>
            Gets account information.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.CacheEventArgs">
            <summary>
            Contains data for the cache event.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.DataEventArgs">
            <summary>
            The class contains common part of all SoftFX event arguments.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Events.DataEventArgs.ToString">
            <summary>
            Returns formated string for the instance.
            </summary>								
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.Events.DataEventArgs.SendingTime">
            <summary>
            Gets UTC server date and time, when the event has been sent by server (if available).
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.DataEventArgs.ReceivingTime">
            <summary>
            Gets UTC client date and time, when the event has been received by server.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.SessionInfoEventArgs">
            <summary>
            This message contains current feed/trade session information. It received by the client in following circumstances:
            1. After successful login;
            2. After trading session status is changed on server (opened to closed, closed to opened);
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Events.SessionInfoEventArgs.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.Events.SessionInfoEventArgs.Information">
            <summary>
            Contains information about feed/trade session info.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.ExecutionReportEventArgs">
            <summary>
            Contains data for execution report event.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.ExecutionReportEventArgs.Report">
            <summary>
            Get corresponded execution report; can not be null.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.SymbolInfoEventArgs">
            <summary>
            Contains data for symbol info event.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.SymbolInfoEventArgs.Information">
            <summary>
            Gets symbols information; can not be null.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.ExecutionReport">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.OrderId">
            <summary>
            Gets OrderID = 37 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.ClientOrderId">
            <summary>
            Gets ClOrdID = 11 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.OrderStatus">
            <summary>
            Gets OrdStatus = 39 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.ExecutionType">
            <summary>
            Gets ExecType = 150 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Symbol">
            <summary>
            Gets Symbol = 55 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.ExecutedVolume">
            <summary>
            Gets CumQty = 14 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.InitialVolume">
            <summary>
            Gets OrderQty = 38 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.LeavesVolume">
            <summary>
            Gets LeavesQty = 151 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.TradeAmount">
            <summary>
            Get LastQty = 32 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Commission">
            <summary>
            Gets Commission = 12 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.AgentCommission">
            <summary>
            Gets AgentCommission = 10113 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Swap">
            <summary>
            Gets Swap = 10096 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.OrderType">
            <summary>
            Gets OrdType = 40 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.OrderSide">
            <summary>
            Gets Side = 54 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.AveragePrice">
            <summary>
            Gets AvgPx = 6 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Price">
            <summary>
            Gets Price = 44 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.StopPrice">
            <summary>
            Gets StopPx = 99 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Expiration">
            <summary>
            Gets ExpireTime = 126 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Created">
            <summary>
            Gets OrdCreated = 10083
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Modified">
            <summary>
            Gets OrdModified = 10084
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.RejectReason">
            <summary>
            Gets OrdRejReason = 103 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.TakeProfit">
            <summary>
            Gets TakeProfit = 10037 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.StopLoss">
            <summary>
            Gets StopLoss = 10038 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Text">
            <summary>
            Gets Text = 58 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Comment">
            <summary>
            Gets user comment, if it is available
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.ClosePositionRequestId">
            <summary>
            Gets ClosePositionRequestId = 10045 field.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Assets">
            <summary>
            Gets assets; it is available for cash accounts only.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.ExecutionReport.Balance">
            <summary>
            Account balance or Double.Nan.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.ExecutionStatus">
            <summary>
            Describes possible trade record executions.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.None">
            <summary>
            Execution report has unknown status
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.New">
            <summary>
            User request has been accepted by dealer.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.Calculated">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.Filled">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.Partial">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.Canceled">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.PendingCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.Rejected">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.Expired">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionStatus.PendingReplacement">
            <summary>
            
            </summary>
        </member>
        <member name="T:SoftFX.Extended.ExecutionType">
            <summary>
            Possible execution types.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.New">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.Trade">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.Expired">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.Canceled">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.PendingCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.Rejected">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.Calculated">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.PendingReplace">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.Replace">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ExecutionType.OrderStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:SoftFX.Extended.FeaturesInfo`2">
            <summary>
            The class describes supported features.
            </summary>
            <typeparam name="TInfoProvider">The class describes supported features of a corresponding class.</typeparam>
            <typeparam name="TInfo">The class describes supported features of an instance.</typeparam>
        </member>
        <member name="M:SoftFX.Extended.FeaturesInfo`2.#ctor(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Constructs a new FeaturesInfo instance.
            </summary>
            <param name="protocolVersion">Can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If 'protocolVersion' is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.FeaturesInfo`2.ThrowIfFeatureNotSupported(System.String,System.Boolean)">
            <summary>
            The method throws exception, if a feature is not supported.
            </summary>
            <param name="message">Exception message; can not be null.</param>
            <param name="status">True, if a feature is supported, otherwise false</param>
        </member>
        <member name="M:SoftFX.Extended.FeaturesInfo`2.ThrowIfFeatureNotSupported(System.String,System.String,System.Boolean)">
            <summary>
            The method throws exception, if a feature is not supported.
            </summary>
            <param name="message">Exception message; can not be null.</param>
            <param name="feature">Unsupported feature name message; can not be null.</param>/// 
            <param name="status">True, if a feature is supported, otherwise false</param>
        </member>
        <member name="M:SoftFX.Extended.FeaturesInfo`2.ThrowIfPropertyNotSupported(System.String,System.Boolean)">
            <summary>
            The method throws exception, if a property is not supported.
            </summary>
            <param name="property">Property name; can not be null.</param>
            <param name="status">True, if a feature is supported, otherwise false</param>
        </member>
        <member name="M:SoftFX.Extended.FeaturesInfo`2.ThrowIfPropertyNotSupported``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            The method throws exception, if a property is not supported.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="P:SoftFX.Extended.FeaturesInfo`2.FeaturesProvider">
            <summary>
            Gets object, which describes supported features of a corresponded class.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FeaturesInfo`2.Features">
            <summary>
            Gets object, which describes supported features of a corresponded class instance.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FeaturesInfo`2.ProtocolVersion">
            <summary>
            Gets protocol version of the instance.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Features.SymbolInfoFeaturesProvider">
            <summary>
            The class provides methods, which indicate supported properties and methods for a protocol version.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.IFeaturesInfoProvider`1">
            <summary>
            Defines method for obtaining features information for specific protocol version.
            </summary>
            <typeparam name="TInfo"></typeparam>
        </member>
        <member name="M:SoftFX.Extended.IFeaturesInfoProvider`1.GetInfo(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            
            </summary>
            <param name="protocolVersion"></param>
            <returns></returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.GetInfo(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Create a new SymbolInfoFeatures instance for a specified version.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsNameSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'Name' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsCurrencySupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'Currency' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsSettlementCurrencySupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'SettlementCurrency' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsPrecisionSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'Precision' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsRoundLotSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'RoundLot' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsMinTradeVolumeSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'MinTradeVolume' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsMaxTradeVolumeSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'MaxTradeVolume' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsTradeVolumeStepSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'TradeVolumeStep' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsProfitCalcModeSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'ProfitCalcMode' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsMarginCalcModeSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'MarginCalcMode' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsMarginHedgeSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'MarginHedge' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsMarginFactorSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'MarginFactor' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsMarginFactorFractionalSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'MarginFactorFractional' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsContractMultiplierSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'ContractMultiplier' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsColorSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'Color' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsCommissionTypeSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'CommissionType' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsCommissionChargeTypeSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'CommissionCharge' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsLimitsCommissionSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'LimitsCommission' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsCommissionSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'Commission' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsSwapSizeSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'SwapSizeShort' and 'SwapSizeLong' properties, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeaturesProvider.IsIsTradeEnabledSupported(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns true, if a protocol version of symbol info supports 'TradeEnabled' property, otherwise false.
            </summary>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
            <returns>True, if the corresponding property or method is supported for a protocol version, otherwise false.</returns>
        </member>
        <member name="T:SoftFX.Extended.FxFileChunk">
            <summary>
            Contains information about downloading file and data chunk.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FxFileChunk.FileName">
            <summary>
            Gets server side file name.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FxFileChunk.ChunksNumber">
            <summary>
            Gets total chunks number of the file.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FxFileChunk.FileSize">
            <summary>
            Gets size of the file in bytes.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FxFileChunk.Data">
            <summary>
            Gets data buffer of the current file chunk.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.FixConnectionStringBuilder">
            <summary>
            Represents FIX connection parameters.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.FixConnectionStringBuilder.#ctor">
            <summary>
            Creates a new instance of FixConnectionStringBuilder.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.FixConnectionStringBuilder.TestFixConnections(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            The method tries to connect to remote server and returns list of valid connection strings.
            </summary>
            <param name="address">host name or IP address; can not benull</param>
            <param name="ports">list of ports, which should be checked; can be null in this case list of predefined ports will be checked</param>
            <param name="timeoutInMs">timeout in ms of connection establishing; can be zero or negative in this case default timeout will be used</param>
            <returns>list of valid connection strings</returns>
        </member>
        <member name="M:SoftFX.Extended.FixConnectionStringBuilder.TestFeedFixConnections(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            The method tries to connect to remote server and returns list of valid connection strings.
            </summary>
            <param name="address">host name or IP address; can not benull</param>
            <param name="username">a valid username</param>
            <param name="password">a valid password</param>
            <param name="ports">list of ports, which should be checked; can be null in this case list of predefined ports will be checked</param>
            <param name="timeoutInMs">timeout in ms of connection establishing; can be zero or negative in this case default timeout will be used</param>
            <returns>list of valid connection strings</returns>
        </member>
        <member name="M:SoftFX.Extended.FixConnectionStringBuilder.TestTradeFixConnections(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            The method tries to connect to remote server and returns list of valid connection strings.
            </summary>
            <param name="address">host name or IP address; can not benull</param>
            <param name="username">a valid username</param>
            <param name="password">a valid password</param>
            <param name="ports">list of ports, which should be checked; can be null in this case list of predefined ports will be checked</param>
            <param name="timeoutInMs">timeout in ms of connection establishing; can be zero or negative in this case default timeout will be used</param>
            <returns>list of valid connection strings</returns>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.FixVersion">
            <summary>
            Gets or sets the fix version of the data feed instance. Currently only "FIX.4.4" is supported.
            Can not be modified, when the data feed is running.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.Address">
            <summary>
            Gets or sets trading platform address of the data feed instance. Can be IP address or host name.
            Can not be modified, when the data feed is running.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.Port">
            <summary>
            Gets or sets trading platform port of the data feed instance.
            Can not be modified, when the data feed is running.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.SenderCompId">
            <summary>
            Gets the sender ID of the data feed instance. Currently this property is generated by API and can not be specified by client.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.TargetCompId">
            <summary>
            Gets or sets the target comp ID of the data feed instance.
            Can not be modified, when the data feed is running.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.SecureConnection">
            <summary>
            Gets or sets SSL using mode.
            Can not be modified, when data feed is running.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.FixLogDirectory">
            <summary>
            Gets or sets log dictionary for FIX messages.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.FixEventsFileName">
            <summary>
            By default FDK generates file name of events based on session id, but you can override the name.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.FixMessagesFileName">
            <summary>
            By default FDK generates file name of events based on session id, but you can override the name.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.DecodeLogFixMessages">
            <summary>
            If true, the FDK converts FIX messages to good readable format by FIX dictionary using.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.ProtocolVersion">
            <summary>
            Gets or sets protocol version.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.ExcludeMessagesFromLogs">
            <summary>
            Gets or sets regular expression filter to exclude messages from logs.
            Empty string means all messages will be written to logs.
            "W|y|0" means to skip the following messages: security list, market data snapshot and heartbeat.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.EnableNetworkStatistics">
            <summary>
            Gets or sets whether network usage statistics should be enabled.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixConnectionStringBuilder.ProtocolType">
            <summary>
            Gets protocol type name = "Fix".
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Errors.RejectException">
            <summary>
            This exception indicates that user's request has been rejected by server.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Errors.RejectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SoftFX.Extended.Errors.RejectException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SoftFX.Extended.Errors.RejectException.Code">
            <summary>
            Gets business logic code error (if available), otherwise -1.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Errors.RejectException.Reason">
            <summary>
            Returns of reject reason.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Errors.SendException">
            <summary>
            This exception indicates that outgoing request has not been sent.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Errors.SendException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SoftFX.Extended.Errors.TimeoutException">
            <summary>
            This is exception indicates that timeout of a synchronous operation has been reached.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Errors.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SoftFX.Extended.Errors.TimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SoftFX.Extended.Errors.TimeoutException.WaitingInterval">
            <summary>
            Gets used waiting interval in milliseconds.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Errors.TimeoutException.OperationId">
            <summary>
            Gets unique id of corresponding synchronous operation; see messages log for detailed information.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Library">
            <summary>
            This class provides common setting of FDK.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Library.Initialize">
            <summary>
            The method forces FDK initialization. Try to use it, if you have problems.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Library.ExtractUnderlyingFiles(System.String)">
            <summary>
            Extract all underlying libraries to a specified directory.
            </summary>
            <param name="location">A relative or absolute path to directory where libraries and tools should be extracted</param>
        </member>
        <member name="M:SoftFX.Extended.Library.DeleteFilesCache">
            <summary>
            The method delete all extracted dll/exe files from cache. The files cache location is specified by Library.Path.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Library.WriteNormalDumpOnError(System.String)">
            <summary>
            The method specifies a path, which should be used for normal dump writing on exception/fatal error.
            </summary>
            <param name="path">a path to normal dump file</param>
        </member>
        <member name="M:SoftFX.Extended.Library.WriteFullDumpOnError(System.String)">
            <summary>
            The method specifies a path, which should be used for full dump writing on exception/fatal error.
            </summary>
            <param name="path">a path to full dump file</param>
        </member>
        <member name="M:SoftFX.Extended.Library.WriteNormalDump(System.String)">
            <summary>
            The method write a normal dump by specified location.
            </summary>
            <param name="path">a path to normal dump file</param>
        </member>
        <member name="M:SoftFX.Extended.Library.WriteFullDump(System.String)">
            <summary>
            The method write a full dump by specified location.
            </summary>
            <param name="path">a path to full dump file</param>
        </member>
        <member name="P:SoftFX.Extended.Library.Path">
            <summary>
            Gets or sets absolute or relative path to directory, which contains native FDK libraries.
            For example: Libary.Path = @"C:\libs\";
            You can also use environment variable, for example, Library.Path = "&lt;FRE&gt;"
            If specified folder does not contain some dlls, then they will be extracted in runtime.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Library.Version">
            <summary>
            Gets FDK version.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Library.Id">
            <summary>
            Gets unique identifier of the FDK.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Library.Platform">
            <summary>
            Gets current platroform; can be x86 or x64.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Library.ResolveDotNetAssemblies">
            <summary>
            For internal usage: enables or disables resolving of .Net assemblies from resources.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.LogoutReason">
            <summary>
            Possible logout reasons.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.None">
            <summary>
            Logout reason is not specified.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.Unknown">
            <summary>
            Unknown logout reason.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.NetworkError">
            <summary>
            Physical connection error.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.Timeout">
            <summary>
            Connection timeout.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.BlockedAccount">
            <summary>
            Your account is blocked.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.ClientInitiated">
            <summary>
            Logout has been initiated by client.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.InvalidCredentials">
            <summary>
            Invalid username and/or password.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.SlowConnection">
            <summary>
            Your connection is slow.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.InvalidSession">
            <summary>
            FIX: invalid session ID.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.ServerError">
            <summary>
            Server error.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.LoginTimeout">
            <summary>
            Your account is temporarily blocked.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.LoginDeleted">
            <summary>
            Account was deleted.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.LogoutReason.ServerLogout">
            <summary>
            Session dropped by a server.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.MarginCalcMode">
            <summary>
            Margin calculation mode.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.MarginCalcMode.Forex">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.MarginCalcMode.Cfd">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.MarginCalcMode.Futures">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.MarginCalcMode.CfdIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.MarginCalcMode.CfdLeverage">
            <summary>
            
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Reports.TradeTransactionReport">
            <summary>
            Trade transaction report
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.TradeTransactionReportType">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.TradeTransactionReason">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.AccountBalance">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.TransactionAmount">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.TransactionCurrency">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.ClientId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.Quantity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.LeavesQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.Price">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.StopPrice">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.TradeRecordType">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.TradeRecordSide">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.Symbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.OrderCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.OrderModified">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PositionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.Comment">
            <summary>
            Gets user-defined comment.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PositionOpened">
            <summary>
            Time of position opening (always indicated in UTC).
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PosOpenReqPrice">
            <summary>
            Requested (by client) price at which the position is to be opened
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PosOpenPrice">
            <summary>
            Real price at which the position has be opened.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PositionQuantity">
            <summary>
            Quantity of a position. Quantity closed on this (last) fill.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PositionLastQuantity">
            <summary>
            Quantity of the last fill transaction.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PositionLeavesQuantity">
            <summary>
            Quantity of position is still opened for further execution after a transaction.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PositionCloseRequestedPrice">
            <summary>
            Requested (by client) price at which the position is to be closed.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PositionClosePrice">
            <summary>
            Real price at which the position has be closed.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PositionClosed">
            <summary>
            Time of position closing (always indicated in UTC).
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.PositionModified">
            <summary>
            Time of position modification (always indicated in UTC).
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.Commission">
            <summary>
            Commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.AgentCommission">
            <summary>
            Agent Commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.Swap">
            <summary>
            Swap.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.CommCurrency">
            <summary>
            Specifies currency to be used for Commission.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.StopLoss">
            <summary>
            Price at which the order is to be closed.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.TakeProfit">
            <summary>
            Price at which the order is to be closed.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.TransactionTime">
            <summary>
            Transaction time.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.OrderFillPrice">
            <summary>
            Last fill price.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.OrderLastFillAmount">
            <summary>
            Last fill amount.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.OpenConversionRate">
            <summary>
            Open conversion rate.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Reports.TradeTransactionReport.CloseConversionRate">
            <summary>
            Close conversion rate.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.TradeCommand">
            <summary>
            Contains possible trade commands.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeCommand.Market">
            <summary>
            An order that an investor makes through a broker or brokerage service to buy or sell an investment immediately at the best available current price.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeCommand.Limit">
            <summary>
            An order placed with a brokerage to buy or sell a set number of shares at a specified price or better.
            Limit orders also allow an investor to limit the length of time an order can be outstanding before being canceled.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeCommand.Stop">
            <summary>
            An order to buy or sell a security when its price surpasses a particular point.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeCommand.IoC">
            <summary>
            An order to buy or sell a security only if its price matches a particular point.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.TradeRecord">
            <summary>
            Represents market, position or pending order.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.Close">
            <summary>
            The method closes an existing position.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.CloseEx(System.Int32)">
            <summary>
            The method closes an existing position.
            </summary>
            <param name="timeoutInMilliseconds">Timeout of the operation ins milliseconds.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.CloseEx(System.String)">
            <summary>
            The method closes an existing position.
            </summary>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.CloseEx(System.String,System.Int32)">
            <summary>
            The method closes an existing position.
            </summary>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <param name="timeoutInMilliseconds">Timeout of the operation ins milliseconds.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.ClosePartially(System.Double)">
            <summary>
            Closes an existing position partially; not valid for pending orders.
            </summary>
            <param name="volume">Closing volume.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.ClosePartiallyEx(System.Double,System.Int32)">
            <summary>
            Closes an existing position partially; not valid for pending orders.
            </summary>
            <param name="volume">Closing volume.</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.ClosePartiallyEx(System.Double,System.String)">
            <summary>
            Closes an existing position partially; not valid for pending orders.
            </summary>
            <param name="volume">Closing volume.</param>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.ClosePartiallyEx(System.Double,System.String,System.Int32)">
            <summary>
            Closes an existing position partially; not valid for pending orders.
            </summary>
            <param name="volume">Closing volume.</param>
            <param name="operationId">
            Can be null, in this case FDK generates a new unique operation ID automatically.
            Otherwise, please use GenerateOperationId method of DataClient object.
            </param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.CloseBy(SoftFX.Extended.TradeRecord)">
            <summary>
            Closes by two orders.
            </summary>
            <param name="other">Another order; can not be null.</param>
            <returns>True, if the operation has been succeeded; otherwise false.</returns>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.CloseByEx(SoftFX.Extended.TradeRecord,System.Int32)">
            <summary>
            Closes by two orders.
            </summary>
            <param name="other">Another order; can not be null.</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns>True, if the operation has been succeeded; otherwise false.</returns>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.Delete">
            <summary>
            Deletes pending order; not valid for market orders.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.DeleteEx(System.Int32)">
            <summary>
            Deletes pending order; not valid for market orders.
            </summary>
            <param name="timeoutInMilliseconds">timeout of the operation in milliseconds</param>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.Modify(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
            <summary>
            Modifies an existing order.
            </summary>
            <param name="newActivationPrice">A new pending order activation price.</param>
            <param name="newStopLoss">A new pending order stop loss.</param>
            <param name="newTakeProfit">A new pending order take profit.</param>
            <param name="newExpirationTime">A new pending order expiration time.</param>
            <param name="newComment">A new comment</param>
            <returns>A modified trade record.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.ModifyEx(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Int32)">
            <summary>
            Modifies an existing order.
            </summary>
            <param name="newActivationPrice">A new pending order activation price.</param>
            <param name="newStopLoss">A new pending order stop loss.</param>
            <param name="newTakeProfit">A new pending order take profit.</param>
            <param name="newExpirationTime">A new pending order expiration time.</param>
            <param name="newComment">A new comment</param>
            <param name="timeoutInMilliseconds">Timeout of the operation in milliseconds.</param>
            <returns>A modified trade record.</returns>
        </member>
        <member name="M:SoftFX.Extended.TradeRecord.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.DataTrade">
            <summary>
            Gets related data trade instance.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.OrderId">
            <summary>
            Gets unique identifier of the order. Can not be null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.ClientOrderId">
            <summary>
            Gets unique client identifier of the order. Can not be null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Symbol">
            <summary>
            Gets currency pair of the order. Can not be null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Price">
            <summary>
            Gets price of the order.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Volume">
            <summary>
            Gets volume of the order.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.InitialVolume">
            <summary>
            Initially requested order size.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.TakeProfit">
            <summary>
            Gets take profit of the order.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.StopLoss">
            <summary>
            Gets stop loss of the order.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Commission">
            <summary>
            Gets commission of the trade record.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.AgentCommission">
            <summary>
            Gets agents' commission of the trade record.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Swap">
            <summary>
            
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Profit">
            <summary>
            It's used by FinancialCalculator.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Type">
            <summary>
            Gets type of the order.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Side">
            <summary>
            Gets side of the order.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Expiration">
            <summary>
            Gets expiration time of the trade record (if specified by user).
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Created">
            <summary>
            Gets the trade record created time.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Modified">
            <summary>
            Gets the trade record modified time.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.Comment">
            <summary>
            Gets comment of the order. Can not be null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.IsPosition">
            <summary>
            Returns true, if the trade record is position.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.IsStopOrder">
            <summary>
            Returns true, if the trade record is stop order.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.IsLimitOrder">
            <summary>
            Returns true, if the trade record is limit order.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.TradeRecord.IsPendingOrder">
            <summary>
            Returns true, if the trade record is limit or stop order.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.TradeRecordSide">
            <summary>
            Enumerates possible orders side.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeRecordSide.Buy">
            <summary>
            Specifies 'Position buy', 'Limit buy' or 'Stop buy'.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeRecordSide.Sell">
            <summary>
            Specifies 'Position sell', 'Limit sell' or 'Stop sell'.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.TradeRecordType">
            <summary>
            Enumerates possible order types.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeRecordType.Market">
            <summary>
            An order that an investor makes through a broker or brokerage service to buy or sell an investment immediately at the best available current price.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeRecordType.Position">
            <summary>
            An opened position.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeRecordType.Limit">
            <summary>
            An order placed with a brokerage to buy or sell a set number of shares at a specified price or better.
            Limit orders also allow an investor to limit the length of time an order can be outstanding before being canceled.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeRecordType.Stop">
            <summary>
            A stop-limit order will be executed at a specified price (or better) after a given stop price has been reached.
            Once the stop price is reached, the stop-limit order becomes a limit order to buy (or sell) at the limit price or better.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.PriceType">
            <summary>
            Represents available price types.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.PriceType.None">
            <summary>
            Price type undefined, unknown or ignored.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.PriceType.Bid">
            <summary>
            Bid price type.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.PriceType.Ask">
            <summary>
            Ask price type.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.ProfitCalcMode">
            <summary>
            Profit calculation mode.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ProfitCalcMode.Forex">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ProfitCalcMode.Cfd">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ProfitCalcMode.Futures">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ProfitCalcMode.CfdIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:SoftFX.Extended.ProfitCalcMode.CfdLeverage">
            <summary>
            
            </summary>
        </member>
        <member name="T:SoftFX.Extended.QuoteEntry">
            <summary>
            Contains price and volume of bid or ask.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.QuoteEntry.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new quote entry.
            </summary>
            <param name="price">Price should be positive or zero.</param>
            <param name="volume">Volume should be positive or zero.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If price/volume are negative or NAN.</exception>
        </member>
        <member name="M:SoftFX.Extended.QuoteEntry.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.QuoteEntry.Price">
            <summary>
            Price of the quote.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.QuoteEntry.Volume">
            <summary>
            Volume of the quote.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.SymbolInfo">
            <summary>
            Contains symbol parameters.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.SymbolInfo.ToString">
            <summary>
            Converts SymbolInfo to string; format is 'Name = {0}; ContractMultiplier = {1}'
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.Name">
            <summary>
            Gets symbol name.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.Currency">
            <summary>
            Gets currency of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.SettlementCurrency">
            <summary>
            Gets settlement currency of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.Precision">
            <summary>
            Gets precision of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.RoundLot">
            <summary>
            Gets round lot of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.MinTradeVolume">
            <summary>
            Gets minimum trade volume of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.MaxTradeVolume">
            <summary>
            Gets maximum trade volume of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.TradeVolumeStep">
            <summary>
            Gets trading volume step of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.ProfitCalcMode">
            <summary>
            Gets profit calculation mode of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.MarginCalcMode">
            <summary>
            Gets margin calculation mode of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.MarginHedge">
            <summary>
            Gets margin hedge of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.MarginFactor">
            <summary>
            Gets margin factor of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.MarginFactorFractional">
            <summary>
            Gets margin factor of the symbol.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.ContractMultiplier">
            <summary>
            Gets contract multiplier.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.Color">
            <summary>
            Gets color of the symbol assigned by server.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.CommissionType">
            <summary>
            Gets commission type.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.CommissionChargeType">
            <summary>
            Gets commission charge type.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.LimitsCommission">
            <summary>
            Gets commission value for limits.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.Commission">
            <summary>
            Gets commission value.
            </summary>
            <exception cref="T:SoftFX.Extended.Errors.UnsupportedFeatureException">If the feature is not supported by used protocol version.</exception>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.SwapSizeShort">
            <summary>
            Gets swap size short.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.SwapSizeLong">
            <summary>
            Gets swap size long.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SymbolInfo.IsTradeEnabled">
            <summary>
            Gets whether trade is enabled for this symbol.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.LogonEventArgs">
            <summary>
            Contains data for the logon event.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Events.LogonEventArgs.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.Events.LogonEventArgs.ProtocolVersion">
            <summary>
            Get protocol version of logon event.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.LogoutEventArgs">
            <summary>
            Contains data for the logout event.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Events.LogoutEventArgs.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.Events.LogoutEventArgs.Text">
            <summary>
            Get text description of logout event.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.LogoutEventArgs.Reason">
            <summary>
            Gets logout reason; supported for version >= ext.1.0.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Events.LogoutEventArgs.Code">
            <summary>
            Gets GetLastError() code, if logout reason is connection problem, otherwise 0.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.TickEventArgs">
            <summary>
            Contains data for the tick event.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Events.TickEventArgs.ToString">
            <summary>
            Returns formatted string for class instance.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.Events.TickEventArgs.Tick">
            <summary>
            Gets quotes.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Events.LogonHandler">
            <summary>
            Represents the method that will handle logon event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Logon information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.LogoutHandler">
            <summary>
            Represents the method that will handle logout event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Logout information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.TickHandler">
            <summary>
            Represents the method that will handle new tick event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Tick information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.SessionInfoHandler">
            <summary>
            Represents the method that will handle: successful login; session status is changed on server (opened to closed, closed to opened).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Contains session information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.CacheHandler">
            <summary>
            Represents the method that will handle: cache modification.
            </summary>
            <param name="sender">The source of the event; can be data feed or data trade instance.</param>
            <param name="e">Contains cache modification information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.AccountInfoHandler">
            <summary>
            Represents the method that will handle: account settings (Leverage, Currency, AccountingType) are changed.
            </summary>
            <param name="sender">The source of the event; can be data trade instance.</param>
            <param name="e">Contains account information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.ExecutionReportHandler">
            <summary>
            Represents the method that will handle: any execution report.
            </summary>
            <param name="sender">The source of the event; can be data trade instance.</param>
            <param name="e">Contains trade report information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.CurrencyInfoHandler">
            <summary>
            Represents the method that will handle: initialization of currency information.
            </summary>
            <param name="sender">The source of the event; can be data trade instance.</param>
            <param name="e">Contains symbols information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.SymbolInfoHandler">
            <summary>
            Represents the method that will handle: initialization of symbols information.
            </summary>
            <param name="sender">The source of the event; can be data trade instance.</param>
            <param name="e">Contains symbols information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.TradeTransactionReportHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SoftFX.Extended.Events.TicksHandler">
            <summary>
            Represents the method that will handle new ticks event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Tick information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.PositionReportHandler">
            <summary>
            Represents the method that will handle: any position report update.
            </summary>
            <param name="sender">The source of the event; can be data trade instance.</param>
            <param name="e">Contains trade position report information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.NotifyHandler">
            <summary>
            Represents the method that will handle: margin call, margin call revocation, stop out.
            </summary>
            <param name="sender">The source of event; can be DataTrade instance.</param>
            <param name="e">Contains notification information.</param>
        </member>
        <member name="T:SoftFX.Extended.Events.NotifyHandler`1">
            <summary>
            Represents the method that will handle: margin call, margin call revocation, stop out.
            </summary>
            <param name="sender">The source of event; can be DataTrade instance.</param>
            <param name="e">Contains notification information.</param>
        </member>
        <member name="T:SoftFX.Extended.Quote">
            <summary>
            Tick class contains bid/ask quotes for a symbol.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Quote.#ctor">
            <summary>
            The constructor is used by types serializer.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Quote.#ctor(System.String,System.DateTime,SoftFX.Extended.QuoteEntry[],SoftFX.Extended.QuoteEntry[])">
            <summary>
            Creates a new quote.
            The constructor doesn't copy quote entries, instead of it keeps them by reference.
            </summary>
            <param name="symbol">A symbol of the quote; can not be null.</param>
            <param name="creatingTime">A creating time of the quote.</param>
            <param name="bids">Bids should be sorted by price and can not be null.</param>
            <param name="asks">Asks should be sorted by price and can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If symbol, bids or asks is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Quote.#ctor(System.String,System.DateTime,System.Double,System.Double)">
            <summary>
            Creates a new quote.
            The constructor doesn't copy quote entries, instead of it keeps them by reference.
            </summary>
            <param name="symbol">A symbol of the quote; can not be null.</param>
            <param name="creatingTime">A creating time of the quote.</param>
            <param name="bid"></param>
            <param name="ask"></param>
            <exception cref="T:System.ArgumentNullException">If symbol is null.</exception>
        </member>
        <member name="M:SoftFX.Extended.Quote.Equals(SoftFX.Extended.Quote,SoftFX.Extended.Quote)">
            <summary>
            Compares to quotes for equality.
            </summary>
            <param name="first">the first quote to compare.</param>
            <param name="second">the second quote to compare.</param>
            <returns>true, if two quotes are the same or null, else false</returns>
        </member>
        <member name="M:SoftFX.Extended.Quote.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>can not be null</returns>
        </member>
        <member name="P:SoftFX.Extended.Quote.HasBid">
            <summary>
            Gets true, if the tick has bid quote.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Quote.HasAsk">
            <summary>
            Gets true, if the tick has ask quote.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Quote.Bid">
            <summary>
            Gets the best price for selling.
            </summary>
            <exception cref="T:System.InvalidOperationException">If off quotes for selling.</exception>
        </member>
        <member name="P:SoftFX.Extended.Quote.Ask">
            <summary>
            Gets the best price for buying.
            </summary>
            <exception cref="T:System.InvalidOperationException">If off quotes for buying.</exception>
        </member>
        <member name="P:SoftFX.Extended.Quote.Spread">
            <summary>
            Gets the quote spread, if it is available.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Quote.CreatingTime">
            <summary>
            Get the quote creating time.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Quote.Symbol">
            <summary>
            Gets symbol name.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Quote.Bids">
            <summary>
            Gets bid quotes; returned array can not be null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Quote.Asks">
            <summary>
            Gets ask quotes; returned array can not be null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Quote.Id">
            <summary>
            The identifier is used by quotes storage.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.Features.SymbolInfoFeatures">
            <summary>
            The class provides properties, which indicate supported properties and methods of a corresponding symbol info.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Features.SymbolInfoFeatures.#ctor(SoftFX.Extended.FixProtocolVersion,SoftFX.Extended.Features.SymbolInfoFeaturesProvider)">
            <summary>
            Creates a new instance of SymbolInfoFeatures
            </summary>
            <param name="protocolVersion">A protocol version; can not be null.</param>
            <param name="provider"></param>
            <exception cref="T:System.ArgumentNullException">If protocol version is null.</exception>
            <exception cref="T:System.ArgumentException">If an input protocol version is unknown.</exception>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsNameSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'Name' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsCurrencySupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'Currency' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsSettlementCurrencySupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'SettlementCurrency' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsPrecisionSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'Precision' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsRoundLotSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'RoundLot' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsMinTradeVolumeSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'MinTradeVolume' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsMaxTradeVolumeSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'MinTradeVolume' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsTradeVolumeStepSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'radeVolumeStep' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsProfitCalcModeSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'ProfitCalcMode' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsMarginCalcModeSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'MarginCalcMode' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsMarginHedgeSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'MarginHedge' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsMarginFactorSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'MarginFactor' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsMarginFactorFractionalSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'MarginFactorFractional' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsContractMultiplierSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'ContractMultiplier' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsColorSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'Color' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsCommissionTypeSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'CommissionType' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsCommissionChargeTypeSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'CommissionChargeType' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsLimitsCommissionSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'LimitsCommission' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsCommissionSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'Commission' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsSwapSizeShortSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'LimitsCommission' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsSwapSizeLongSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'LimitsCommission' property, otherwise false.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.Features.SymbolInfoFeatures.IsIsTradeEnabledSupported">
            <summary>
            Returns true, if a corresponding symbol info supports 'IsTradeEnabled' property, otherwise false.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.SessionStatus">
            <summary>
            Contains list of available feed/trade session statuses.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.SessionStatus.Open">
            <summary>
            Trade session is opened.
            </summary>
        </member>
        <member name="F:SoftFX.Extended.SessionStatus.Closed">
            <summary>
            Trade session is closed.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.SessionInfo">
            <summary>
            Represents information about feed/trade session.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.SessionInfo.ToString">
            <summary>
            Returns formatted string for the class instance.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.TradingSessionId">
            <summary>
            Unique identifiedr for the feed/trade session; can not be null.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.Status">
            <summary>
            Gets state of the session. Possible values: open, closed.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.ServerTimeZoneOffset">
            <summary>
            Gets server time zone.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.PlatformName">
            <summary>
            Get platform name.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.PlatformCompany">
            <summary>
            Get platform company name.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.IsOpened">
            <summary>
            Returns true, if the current session is "Open".
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.IsClosed">
            <summary>
            Returns true, if the current session is "Closed".
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.StartTime">
            <summary>
            Gets start time of the current feed/trade session.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.OpenTime">
            <summary>
            Gets the open time of the current feed/trade session in case of current session is opened.
            Gets the open time of the next open feed/trade session in case of current session is closed.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.CloseTime">
            <summary>
            Gets the close time of the current feed/trade session in case of current session is opened.
            Gets the close time of the next open feed/trade session in case of current session is closed.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.SessionInfo.EndTime">
            <summary>
            Gets the end time of the current feed/trade session.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.FixProtocolVersion">
            <summary>
            Represents protocol specification.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.#ctor">
            <summary>
            Creates empty protocol version instance. 
            </summary>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates protocol version instance from type, major and minor versions.
            </summary>
            <param name="type">Protocol type; can not be null.</param>
            <param name="majorVersion">Protocol major version; can not be negative.</param>
            <param name="minorVersion">Protocol minor version; can not be negative.</param>
            <exception cref="T:System.ArgumentNullException">If protocol type is null.</exception>
            <exception cref="T:System.ArgumentException">If protocol major/minor version is negative.</exception>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.#ctor(System.String)">
            <summary>
            Creates protocol version instance from string.
            </summary>
            <param name="text">Can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If text is null.</exception>
            <exception cref="T:System.ArgumentException">If text is not valid protocol version string.</exception>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.ToString">
            <summary>
            Returns a string, which contains protocol specification.
            </summary>
            <returns>Can not be null.</returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">Can not be null; should be ProtocolVersion instance.</param>
            <exception cref="T:System.InvalidCastException">If obj type is different than ProtocolVersion.</exception>
            <exception cref="T:System.ArgumentNullException">If obj is null.</exception>
            <returns>True if obj is an instance of ProtocolVersion and equals the value of this instance; otherwise, false. </returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.Equals(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="other">Can not be null; should be ProtocolVersion instance.</param>
            <exception cref="T:System.InvalidCastException">If obj type is different than ProtocolVersion.</exception>
            <exception cref="T:System.ArgumentNullException">If obj is null.</exception>
            <returns>True if other equals the value of this instance; otherwise, false. </returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.CompareTo(SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Compares the current instance with another instance of the protocol version type.
            </summary>
            <param name="other">A protocol version instance; can not be null; must have the same type.</param>
            <returns>
            Less than zero if this instance is less than value.
            Zero if this instance is equal to value.
            Greater than zero if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentNullException">If 'other' is null.</exception>
            <exception cref="T:System.ArgumentException">If 'other' protocol version has the different type.</exception>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.op_Equality(SoftFX.Extended.FixProtocolVersion,SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns a value indicating whether two protocol version instances are equal. 
            </summary>
            <param name="first">A protocol version instance; can not be null.</param>
            <param name="second">A protocol version instance; can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If first or second argument is null.</exception>
            <returns>True, if two protocol version instances are equal, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.op_Inequality(SoftFX.Extended.FixProtocolVersion,SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns a value indicating whether two protocol version instances are equal. 
            </summary>
            <param name="first">A protocol version instance; can not be null.</param>
            <param name="second">A protocol version instance; can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If first or second argument is null.</exception>
            <returns>True, if two protocol version instances are different, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.op_LessThan(SoftFX.Extended.FixProtocolVersion,SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns a value indicating whether the first protocol version instance is less than second.
            </summary>
            <param name="first">A protocol version instance; can not be null.</param>
            <param name="second">A protocol version instance; can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If first or second argument is null.</exception>
            <returns>True, if the first protocol version instance is less than second, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.op_LessThanOrEqual(SoftFX.Extended.FixProtocolVersion,SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns a value indicating whether the first protocol version instance is less or equal than second.
            </summary>
            <param name="first">A protocol version instance; can not be null.</param>
            <param name="second">A protocol version instance; can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If first or second argument is null.</exception>
            <returns>True, if the first protocol version instance is less or equal than second, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.op_GreaterThan(SoftFX.Extended.FixProtocolVersion,SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns a value indicating whether the first protocol version instance is more than second.
            </summary>
            <param name="first">A protocol version instance; can not be null.</param>
            <param name="second">A protocol version instance; can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If first or second argument is null.</exception>
            <returns>True, if the first protocol version instance is more than second, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.op_GreaterThanOrEqual(SoftFX.Extended.FixProtocolVersion,SoftFX.Extended.FixProtocolVersion)">
            <summary>
            Returns a value indicating whether the first protocol version instance is more or equal than second.
            </summary>
            <param name="first">A protocol version instance; can not be null.</param>
            <param name="second">A protocol version instance; can not be null.</param>
            <exception cref="T:System.ArgumentNullException">If first or second argument is null.</exception>
            <returns>True, if the first protocol version instance is more or equal than second, otherwise false.</returns>
        </member>
        <member name="M:SoftFX.Extended.FixProtocolVersion.ToString(System.String,System.Int32,System.Int32)">
            <summary>
            Converts protocol type, major version and minor version to string.
            </summary>
            <param name="type">Protocol type; can not be null.</param>
            <param name="majorVersion">Protocol major version; can not be negative.</param>
            <param name="minorVersion">Protocol minor version; can not be negative.</param>
            <exception cref="T:System.ArgumentNullException">If protocol type is null.</exception>
            <exception cref="T:System.ArgumentException">If protocol major/minor version is negative.</exception>
            <returns>Can not be null.</returns>
        </member>
        <member name="P:SoftFX.Extended.FixProtocolVersion.TheLatestVersion">
            <summary>
            Get up-to-date protocol version.
            </summary>
        </member>
        <member name="P:SoftFX.Extended.FixProtocolVersion.Type">
            <summary>
            Gets or sets protocol type.
            </summary>
            <value>A new protocol type; can not be null.</value>
            <exception cref="T:System.ArgumentNullException">If protocol type is null.</exception>
        </member>
        <member name="P:SoftFX.Extended.FixProtocolVersion.MajorVersion">
            <summary>
            Gets or sets protocol major version.
            </summary>
            <value>A new protocol major version; can not be negative.</value>
            <exception cref="T:System.ArgumentException">If protocol major version is negative.</exception>
        </member>
        <member name="P:SoftFX.Extended.FixProtocolVersion.MinorVersion">
            <summary>
            Gets or sets protocol minor version.
            </summary>
            <value>A new protocol minor version; can not be negative.</value>
            <exception cref="T:System.ArgumentException">If protocol minor version is negative.</exception>
        </member>
        <member name="T:SoftFX.Extended.Errors.UnsupportedFeatureException">
            <summary>
            Generated by API, if a feature is not supported by used protocol version.
            </summary>
        </member>
        <member name="M:SoftFX.Extended.Errors.UnsupportedFeatureException.#ctor(System.String)">
            <summary>
            Constructs a new exception instance.
            </summary>
            <param name="message">Exception message; can not be null.</param>
        </member>
        <member name="M:SoftFX.Extended.Errors.UnsupportedFeatureException.#ctor(System.String,System.String)">
            <summary>
            Constructs a new exception instance.
            </summary>
            <param name="message">Exception message; can not be null.</param>
            <param name="feature">Feature name.</param>
        </member>
        <member name="M:SoftFX.Extended.Errors.UnsupportedFeatureException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new exception instance.
            </summary>
            <param name="message">Exception message; can not be null.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:SoftFX.Extended.Errors.UnsupportedFeatureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SoftFX.Extended.Errors.UnsupportedFeatureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SoftFX.Extended.Errors.UnsupportedFeatureException.Feature">
            <summary>
            Gets unsupported feature name.
            </summary>
        </member>
        <member name="T:SoftFX.Extended.TradeType">
            <summary>
            for internal usage only
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeType.None">
            <summary>
            for internal usage only
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeType.Position">
            <summary>
            for internal usage only
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeType.Limit">
            <summary>
            for internal usage only
            </summary>
        </member>
        <member name="F:SoftFX.Extended.TradeType.Stop">
            <summary>
            for internal usage only
            </summary>
        </member>
    </members>
</doc>
