<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlphaFS</name>
    </assembly>
    <members>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo">
            <summary>The <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> structure contains stream header data.</summary>
            <seealso cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.</summary>
            <param name="streamId">The <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId"/> stream ID.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.</summary>
            <param name="streamId">The <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId"/> stream ID.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.</summary>
            <param name="streamId">The <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId"/> stream ID.</param>
            <param name="name">The name.</param>
            <param name="source">The source file where this instance points to.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId,System.String,Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.</summary>
            <param name="streamId">The <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId"/> stream ID.</param>
            <param name="name">The name.</param>
            <param name="handle">The source <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> handle where this instance points to.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Size">
            <summary>Gets the size of the data in the substream, in bytes.</summary>
            <value>The size of the data in the substream, in bytes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Name">
            <summary>Gets a string that specifies the name of the alternative data stream.</summary>
            <value>A string that specifies the name of the alternative data stream.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.StreamType">
            <summary>Gets the type of the data in the stream.</summary>
            <value>The type of the data in the stream.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Attributes">
            <summary>Gets the attributes of the data to facilitate cross-operating system transfer.</summary>
            <value>Attributes of the data to facilitate cross-operating system transfer.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Source">
            <summary>The source file where this instance points to.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemInfo">
            <summary>Provides the base class for both FileInfo and DirectoryInfo objects.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.FullPath">
            <summary>Represents the fully qualified path of the directory or file.</summary>
            <remarks>Classes derived from <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> can use the FullPath field to determine the full path of the object being manipulated.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.OriginalPath">
            <summary>The path originally specified by the user, whether relative or absolute.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.MExists">
            <summary>Indicator of file existence. It refreshes each time Refresh() has been called.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.MFileSystemEntryInfo">
            <summary>Represents extended file information.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Delete">
            <summary>Deletes a file or directory.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
            <remarks>
            FileSystemInfo.Refresh takes a snapshot of the file from the current file system. Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98. 
            Calls must be made to Refresh before attempting to get the attribute information, or the information will be outdated. 
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.ToString">
            <summary>Returns a string that represents the current object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.ThrowDoesNotExistsException">
            <summary>Throws the does not exists exception.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Initialize(System.String)">
            <summary>Initializes the specified file name.</summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Attributes">
            <summary>Gets or sets the attributes for the current file or directory.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.CreationTime">
            <summary>Gets or sets the creation time of the current file or directory.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.CreationTimeUtc">
            <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Extension">
            <summary>Gets the string representing the extension part of the file.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.FullName">
            <summary>Gets the full path of the directory or file.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastAccessTime">
            <summary>Gets or sets the time the current file or directory was last accessed.</summary>
            <remarks>When first called, <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> calls Refresh and returns the cached information on APIs to get attributes and so on. On subsequent calls, you must call Refresh to get the latest copy of the information. 
            If the file described in the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. 
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastAccessTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary>
            <remarks>When first called, <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> calls Refresh and returns the cached information on APIs to get attributes and so on. On subsequent calls, you must call Refresh to get the latest copy of the information. 
            If the file described in the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. 
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastWriteTime">
            <summary>Gets or sets the time when the current file or directory was last written to.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Name">
            <summary>
            For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.</summary>
            <remarks>
            For a directory, Name returns only the name of the parent directory, such as Dir, not c:\Dir. For a subdirectory, Name returns only the name of the subdirectory, such as Sub1, not c:\Dir\Sub1. 
            For a file, Name returns only the file name and file name extension, such as MyFile.txt, not c:\Dir\Myfile.txt. 
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.DirectoryName">
            <summary>Gets a full path string representing the file's parent directory.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.SystemInfo">
            <summary>Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> SystemInfo.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class on the specified dirPath.</summary>
            <param name="path">A string specifying the path on which to create the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.</param>
            <remarks>
            This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.
            The path parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Create">
            <summary>Creates a directory.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</summary>
            <param name="directorySecurity">The access control to apply to the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class.</summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param>
            <returns>The last directory specified in path as an <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class.</summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> security to apply.</param>
            <returns>The last directory specified in path as an <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete">
            <summary>Deletes this <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> if it is empty.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, specifying whether to delete subdirectories and files.</summary>
            <param name="recursive"><c>true</c> to delete this directory, its subdirectories, and all files; otherwise, <c>false</c>.</param>
            <remarks>
            If the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> has no files or subdirectories, this method deletes the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> even if recursive is false.
            Attempting to delete a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> that is not empty when recursive is false throws an <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean,System.Boolean)">
            <summary>
            Deletes this instance of a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, specifying whether to delete subdirectories and files.</summary>
            <param name="recursive"><c>true</c> to delete this directory, its subdirectories, and all files; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">if set to <c>true</c> ignores read only attribute of files and directories.</param>
            <remarks>
            If the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> has no files or subdirectories, this method deletes the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> even if recursive is false.
            Attempting to delete a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> that is not empty when recursive is false throws an <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean,System.Boolean,System.String,System.IO.SearchOption)">
            <summary>
            Deletes this instance of a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, specifying whether to delete subdirectories and files.</summary>
            <param name="recursive"><c>true</c> to delete this directory, its subdirectories, and all files; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">if set to <c>true</c> ignores read only attribute of files and directories.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <remarks>
            If the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> has no files or subdirectories, this method deletes the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> even if recursive is false.
            Attempting to delete a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> that is not empty when recursive is false throws an <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories">
            <summary>Returns an enumerable collection of directory information in the current directory.</summary>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories in the current directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary>
            <param name="searchPattern">The search string. The default pattern is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>, which returns all directories.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories that matches searchPattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">The search string. The default pattern is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>, which returns all directories.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">The search string. The default pattern is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>, which returns all directories.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles">
            <summary>Returns an enumerable collection of file information in the current directory.</summary>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> directories in the current directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file information that matches a search pattern.</summary>
            <param name="searchPattern">The search string. The default pattern is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>, which returns all files.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> files that matches searchPattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">The search string. The default pattern is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>, which returns all files.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> directories that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">The search string. The default pattern is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>, which returns all directories.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> directories that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information in the current directory.</summary>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information in the current directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">The search string. The default pattern is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>, which returns all directories.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">The search string. The default pattern is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>, which returns all directories.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the directory described by the current DirectoryInfo object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object.</summary>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the path parameter.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories">
            <summary>Returns the subdirectories of the current directory.</summary>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects. If there are no subdirectories, this method returns an empty array. This method is not recursive.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String)">
            <summary>Returns an array of directories in the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching the given search criteria.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects matching searchPattern. If there are no subdirectories, this method returns an empty array. This method is not recursive.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an array of directories in the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects matching searchPattern. If there are no subdirectories, this method returns an empty array. This method is not recursive.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an array of directories in the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects matching searchPattern. If there are no subdirectories, this method returns an empty array. This method is not recursive.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles">
            <summary>Returns a file list from the current directory.</summary>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String)">
            <summary>Returns a file list from the current directory matching the given search pattern.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects matching searchPattern. If there are no subdirectories, this method returns an empty array. This method is not recursive.</returns>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries representing all the files and subdirectories in a directory.
            </summary>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array. This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the FileSystemInfo.Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>Retrieves an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array. This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the FileSystemInfo.Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Retrieves an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array. This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the FileSystemInfo.Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Retrieves an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array. This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the FileSystemInfo.Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String)">
            <summary>Moves a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance and its contents to a new path.</summary>
            <param name="destinationPath">The name and path to which to move this directory.
            The destination cannot be another disk volume or a directory with the identical name.
            It can be an existing directory to which you want to add this directory as a subdirectory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
            <remarks>
            FileSystemInfo.Refresh() takes a snapshot of the file from the current file system.
            Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information.
            This can happen on platforms such as Windows 98.
            Calls must be made to Refresh before attempting to get the attribute information, or the information will be outdated.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the directory described by the current DirectoryInfo object.</summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.ToString">
            <summary>Returns the original path that was passed by the user.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Compress">
            <summary>Compresses a directory using NTFS compression.</summary>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only compress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Compress(System.String)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only compress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Compress(System.String,System.IO.SearchOption)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Compress(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decompress">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decompress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decompress(System.String)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decompress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decompress(System.String,System.IO.SearchOption)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decompress(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CompressionDisable">
            <summary>Disables compression of the specified directory and the files in it.</summary>
            <remarks>
            This method disables the folder-compression attribute. It will not decompress the current contents of the folder.
            However, newly created files and folders will be uncompressed.
            </remarks>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CompressionEnable">
            <summary>Enables compression of the specified directory and the files in it.</summary>
            <remarks>
            This method enables the folder-compression attribute. It will not compress the current contents of the folder.
            However, newly created files and folders will be compressed.
            </remarks>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decrypt">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decrypt(System.String)">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decrypt(System.String,System.IO.SearchOption)">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decrypt(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Encrypt">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only encrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Encrypt(System.String)">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only encrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Encrypt(System.String,System.IO.SearchOption)">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Encrypt(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EncryptionDisable">
            <summary>Disables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory.</summary>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EncryptionEnable">
            <summary>Enables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory.</summary>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateStreams">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateStreams(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateStreams(System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">
            Another object to compare to.
            </param>
            <returns>
            true if the specified Object is equal to the current Object; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current Object.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.op_Equality(Alphaleonis.Win32.Filesystem.DirectoryInfo,Alphaleonis.Win32.Filesystem.DirectoryInfo)">
            <summary>
            Implements the operator ==
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.op_Inequality(Alphaleonis.Win32.Filesystem.DirectoryInfo,Alphaleonis.Win32.Filesystem.DirectoryInfo)">
            <summary>
            Implements the operator !=
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary>
            <value><c>true</c> if the file exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Name">
            <summary>Gets the name of this DirectoryInfo instance.</summary>
            <remarks>
            For a directory, Name returns only the name of the parent directory, such as Dir, not c:\Dir. For a subdirectory, Name returns only the name of the subdirectory, such as Sub1, not c:\Dir\Sub1.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Parent">
            <summary>Gets the parent directory of a specified subdirectory.</summary>
            <returns>The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Root">
            <summary>Gets the root portion of the directory.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the root of the directory.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkType">
            <summary>
            Specifies the type of a symbolic link
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkType.Absolute">
            <summary>
            The symbolic link is absolute
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkType.Relative">
            <summary>
            The symbolic link is relative
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.PathInfo">
            <summary>
            A representation of a path, providing convenient access to the individual components 
            of the path.
            </summary>
            <remarks>Note that no methods in this class verifies whether the path actually exists or not.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> class specifying whether wildcards
            should be accepted or not.
            </summary>
            <param name="path">The path.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/></exception>
            <remarks>
                <para>Note that under no circumstances will this class accept wildcards in 
                      the directory part of the path, only in the file-name, i.e. the component
                      after the last backslash or separator. 
                </para>
                <para>
                    Extended length unicode paths (also referred to as long paths) (those starting with \\?\) will <b>not</b> be 
                    parsed for wildcards etc., regardless of the setting of this parameter.
                    In such a path any character is valid and backslashes alone are considered
                    to be separators.
                </para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> class specifying whether wildcards
            should be accepted or not.
            </summary>
            <param name="path">The path.</param>
            <param name="allowWildcardsInFileName">if set to <c>true</c> wildcards are allowed in the file 
            name part of the path. If set to <c>false</c>, wildcards are not allowed and an
            <see cref="T:System.ArgumentException"/> will be thrown if they are present.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/></exception>
            <remarks>
                <para>Note that under no circumstances will this class accept wildcards in 
                      the directory part of the path, only in the file-name, i.e. the component
                      after the last backslash or separator. 
                </para>
                <para>
                    Extended length unicode paths (also referred to as long paths) (those starting with \\?\) will <b>not</b> be 
                    parsed for wildcards etc., regardless of the setting of this parameter.
                    In such a path any character is valid and backslashes alone are considered
                    to be separators.
                </para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.#ctor(System.String,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="indices">The indices.</param>
            <param name="extensionIndex">Position of the beginning of the file extension in the path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.GetLongPath">
            <summary>
            	Retrieves the full long (or extended) unicode version of the path represented by this <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> instance.
            </summary>
            <remarks>
            <para>
            	This method takes care of different path conversions to be usable in Unicode 
            	variants of the Win32 funcitons (which are internally used throughout AlphaFS).
            </para>
            <para>
            	Regular paths are changed like the following:
            	<list type="table">
            		<item>
            			<term><c>C:\Somewhere\Something.txt</c></term>
            			<description><c>\\?\C:\Somewhere\Something.txt</c></description>
            		</item>
            		<item>
            			<term><c>\\Somewhere\Something.txt</c></term>
            			<description><c>\\?\UNC\Somewhere\Something.txt</c></description>
            		</item>
            	</list>
            </para> 
            <para>
            	Already processed paths are preserved untouched so to avoid mistakes of double prefixing.
            </para>
            <para>
            	If the path represented by this instance is not an absolute path, or is not rooted, the path of the
            	current directory (and drive) is combined with this path to form
            	an absolute path.
            </para>
            </remarks>
            <returns>The long or extended unicode version of the specified path.</returns>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.PathInfo.GetFullPath"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.GetFullPath">
            <summary>
            Gets the full absolute path of the path represented by this instance.
            This is done by "applying" the path to the current directory if the path
            does not contain a root, or the volume of the current directory if the
            path does not contain any drive information.
            </summary>
            <returns>The full absolute path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.CompareTo(Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Performs a lexiographical comparison of the string representations of this and 
            the other path, ignoring case.
            </summary>
            <param name="other">A <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.Equals(Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Performs a lexiographical comparison for equality of the string representations of this and 
            the other path, ignoring case.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.Equals(System.Object)">
            <summary>
            Performs a lexiographical comparison for equality of the string representations of this and 
            the other path, ignoring case.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.Combine(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Combines two paths.
            </summary>
            <param name="path1">The first path. </param>
            <param name="path2">The second path.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_Addition(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Combines two paths.
            </summary>
            <param name="path1">The first path. </param>
            <param name="path2">The second path.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_Equality(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_Inequality(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_LessThan(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.op_GreaterThan(Alphaleonis.Win32.Filesystem.PathInfo,Alphaleonis.Win32.Filesystem.PathInfo)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.Parent">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <returns>The parent directory, or <see langword="null"/> if path is the root directory, including the root of a server or share name.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedPath">
            <summary>
            Gets the full normalized path, with a trailing backslash if the path denotes a directory.
            </summary>
            <value>The full normalized path, with a trailing backslash if the path denotes a directory.</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.Path"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.Path">
            <summary>
            Gets the full normalized path.
            </summary>
            <value>The full path.</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedPath"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.FileName">
            <summary>
            Gets the file name part of the path.
            </summary>
            <value>The file name part of the path, or an empty string if the path does not contain a file name.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.Root">
            <summary>
            Gets the root of the path.
            </summary>
            <value>The root of the path, which may be a drive (eg. "C:\"), a remote computer as part of 
            an network share (eg. "\\OtherComputer\"), a unique volume name 
            (eg. "\\?\Volume{c00fa7c5-63eb-11dd-b6ed-806e6f6e6963}\") or a single directory
            separator ("\") if no drive or volume is present in the path. If does not contain 
            any root, an empty string is returned.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.IsRooted">
            <summary>
            Gets a value indicating whether the path is rooted.
            </summary>
            <value><c>true</c> if this instance is rooted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.HasFileName">
            <summary>
            Gets a value indicating whether this instance has file name.
            </summary>
            <value>
            	<c>true</c> if this instance has file name; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.Extension">
            <summary>
            Gets the extension of the file name of this path.
            </summary>
            <value>The extension of the file name of this path, or an empty string if the path does
            not contain a file name or the file name does not have an extension.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.HasExtension">
            <summary>
            Gets a value indicating whether the file name in this path has an extension.
            </summary>
            <value>
            	<c>true</c> if the file name in this path has an extension; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.FileNameWithoutExtension">
            <summary>
            Gets the file name without extension.
            </summary>
            <value>The file name without extension or an empty string if the 
            path does not contain a file name.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryName">
            <summary>
            Returns the directory information for the path with a trailing directory separator.
            </summary>
            <value>The name of the suffixed directory with a trailing directory separator.</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryName"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryNameWithoutRoot">
            <summary>
            Returns the directory information for the path without the root information, and with a trailing backslash.
            </summary>
            <value>The path without the root and file name part (if any) and with a trailing backslash.</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryNameWithoutRoot"/>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryName"/>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryName"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryName">
            <summary>
            Returns the directory information for the path.
            </summary>
            <value>The path without the file name part (if any).</value>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryName"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryNameWithoutRoot">
            <summary>
            Returns the directory information for the path with the root stripped off.
            </summary>
            <value>The path without the root and file name part (if any).</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.DirectoryComponents">
            <summary>
            Gets a list exposing the individual components of the directory part of this path.
            </summary>
            <value>The directory components of this path.</value>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.Parser.ResolveParentReference">
            <summary>
            Removes a reference to the parent directory (<see cref="F:Alphaleonis.Win32.Filesystem.Path.ParentDirectoryPrefix"/>) if possible.
            This must be called *before* the reference to the parent directory has been added.
            </summary>
            <returns><c>true</c> if the reference was removed, and <c>false</c> if it was kept.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.IndexOf(System.String)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Insert(System.Int32,System.String)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Add(System.String)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> at the specified index.
            </summary>
            <value>The component of the directory at the specified index</value>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is out of range.</exception>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.PathInfo.ComponentList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupFileStream">
            <summary>The <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> provides access to data associated with a specific file or directory, including security information and alternative data streams, for backup and restore operations.</summary>
            <remarks>This class uses the <see href="http://msdn.microsoft.com/en-us/library/aa362509(VS.85).aspx">BackupRead</see>, 
            <see href="http://msdn.microsoft.com/en-us/library/aa362510(VS.85).aspx">BackupSeek</see> and 
            <see href="http://msdn.microsoft.com/en-us/library/aa362511(VS.85).aspx">BackupWrite</see> functions from the Win32 API to provide access to the file or directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path and creation mode.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file. </param>
            <remarks>The file will be opened for exclusive access for both reading and writing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode and access rights.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file. </param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <remarks>The file will be opened for exclusive access.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file. </param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.FileAttributeConstants)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, and additional file attributes.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> constant that specifies additional file attributes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Security.AccessControl.FileSecurity)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, additional file attributes, access control and audit security.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> constant that specifies additional file attributes.</param>
            <param name="security">A <see cref="T:System.Security.AccessControl.FileSecurity"/> constant that determines the access control and audit security for the file. This parameter may be <see langword="null"/>.</param>
            <overloads>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class.
            </overloads>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path and creation mode.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <remarks>The file will be opened for exclusive access for both reading and writing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode and access rights.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <remarks>The file will be opened for exclusive access.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.FileAttributeConstants)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, and additional file attributes.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> constant that specifies additional file attributes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Security.AccessControl.FileSecurity)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, additional file attributes, access control and audit security.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> constant that specifies additional file attributes.</param>
            <param name="security">A <see cref="T:System.Security.AccessControl.FileSecurity"/> constant that determines the access control and audit security for the file. This parameter may be <see langword="null"/>.</param>
            <overloads>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class.
            </overloads>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.FileSystemRights)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class for the specified file handle, with the specified read/write permission.</summary>
            <param name="handle">A file handle for the file that this <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate. </param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that gets the <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanRead"/> and <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanWrite"/> properties 
            of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Finalize">
            <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values
            between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>This method will not backup the access-control list (ACL) data for the file or directory.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Read(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values
            between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <param name="processSecurity">Indicates whether the function will backup the access-control list (ACL) data for the file or directory. </param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <overloads>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </overloads>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>This method will not process the access-control list (ACL) data for the file or directory.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <param name="processSecurity">Specifies whether the function will restore the access-control list (ACL) data for the file or directory. 
            If this is <see langword="true"/>, you need to specify <see cref="F:System.Security.AccessControl.FileSystemRights.TakeOwnership"/> and <see cref="F:System.Security.AccessControl.FileSystemRights.ChangePermissions"/> access when 
            opening the file or directory handle. If the handle does not have those access rights, the operating system denies 
            access to the ACL data, and ACL data restoration will not occur.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Flush">
            <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>When overridden in a derived class, sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <remarks>
                <para>
                    <note>
                        <para>
                            This stream does not support seeking using this method, and calling this method will always throw 
                            <see cref="T:System.NotSupportedException"/>. See <see cref="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)"/> for an alternative way of seeking forward.
                        </para>
                    </note>
                </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.SetLength(System.Int64)">
            <summary>When overridden in a derived class, sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks>This method is not supported by the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class, and calling it will always
            generate a <see cref="T:System.NotSupportedException"/>.</remarks>
            <exception cref="T:System.NotSupportedException">Always thrown by this class.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)">
            <summary>Skips ahead the specified number of bytes from the current stream.</summary>
            <remarks>
            <para>
                This method represents the Win32 API implementation of <see href="http://msdn.microsoft.com/en-us/library/aa362509(VS.85).aspx">BackupSeek</see>.
            </para>
            <para>
            Applications use the <see cref="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)"/> method to skip portions of a data stream that cause errors. This function does not 
            seek across stream headers. For example, this function cannot be used to skip the stream name. If an application 
            attempts to seek past the end of a substream, the function fails, the return value indicates the actual number of bytes 
            the function seeks, and the file position is placed at the start of the next stream header.
            </para>
            </remarks>
            <param name="bytes">The number of bytes to skip.</param>
            <returns>The number of bytes actually skipped.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the 
            current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object. </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.SetAccessControl(System.Security.AccessControl.ObjectSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> object to the file described by the  current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object.</summary>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the current file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Lock(System.Int64,System.Int64)">
            <summary>Prevents other processes from changing the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> while permitting read access.</summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).</param>
            <param name="length">The range to be locked. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The file is closed.</exception>
            <exception cref="T:System.IO.IOException">The process cannot access the file because another process has locked a portion of the file. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Unlock(System.Int64,System.Int64)">
            <summary>Allows access by other processes to all or part of a file that was previously locked.</summary>
            <param name="position">The beginning of the range to unlock.</param>
            <param name="length">The range to be unlocked.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The file is closed.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.EnumerateStreams">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <returns>An enumerable <see langref="BackupStreamInfo"/> collection, of streams for the filespecified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.ReadStreamInfo">
            <summary>Reads a stream header from the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.</summary>
            <returns>The stream header read from the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>, or <see langword="null"/> if the end-of-file 
            was reached before the required number of bytes of a header could be read.</returns>
            <remarks>The stream must be positioned at where an actual header starts for the returned object to represent valid 
            information.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.</summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanRead">
            <summary>Gets a value indicating whether the current stream supports reading.</summary>
            <returns><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanSeek">
            <summary>Gets a value indicating whether the current stream supports seeking.</summary>        
            <returns>This method always returns <see langword="false"/>.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanWrite">
            <summary>Gets a value indicating whether the current stream supports writing.</summary>
            <returns><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.Length">
            <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
            <value>This method always throws an exception.</value>
            <exception cref="T:System.NotSupportedException">This exception is always thrown if this property is accessed on a <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.</exception>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.Position">
            <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
            <value>This method always throws an exception.</value>
            <exception cref="T:System.NotSupportedException">This exception is always thrown if this property is accessed on a <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.</exception>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeFileHandle">
            <summary>Gets a <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeFileHandle"/> object that represents the operating system file handle for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object encapsulates.</summary>
            <value>A <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeFileHandle"/> object that represents the operating system file handle for the file that 
            the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object encapsulates.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes">
            <summary>
            Defines the controllable aspects of the <see cref="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String,Alphaleonis.Win32.Filesystem.DosDeviceAttributes)"/> method.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath">
            <summary>
            Uses the targetPath string as is. Otherwise, it is converted from an MS-DOS path to a path.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RemoveDefinition">
            <summary>
            Removes the specified definition for the specified device. To determine which definition to remove,
            the function walks the list of mappings for the device, looking for a match of targetPath against
            a prefix of each mapping associated with this device. The first mapping that matches is the one removed,
            and then the function returns. If targetPath is null or a pointer to a null string, the function will
            remove the first mapping associated with the device and pop the most recent one pushed. If there is nothing
            left to pop, the device name will be removed. If this value is not specified, the string pointed to by the
            targetPath parameter will become the new mapping for this device.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.ExactMatchOnRemove">
            <summary>
            If this value is specified along with RemoveDefinition, the function will use an exact match to determine
            which mapping to remove. Use this value to ensure that you do not delete something that you did not define.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.NoBroadcastSystem">
            <summary>
            Do not broadcast the WM_SETTINGCHANGE message.
            By default, this message is broadcast to notify the shell  and applications of the change.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.VolumeInfo">
            <summary>
            Contains information about a file-system volume.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.VolumeInfo.#ctor(System.String,Alphaleonis.Win32.Filesystem.FileSystemAttributes,System.Int64,System.UInt32,System.String)">
            <summary>
            Contains information about a file-system volume.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Name">
            <summary>
            Gets the name of the volume.
            </summary>
            <value>The name of the volume.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.PreservesCase">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.CasePreservedNames"/>
            </summary>
            <remarks>2012-02-17: Yomodo</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsCaseSensitiveFileNames">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.CaseSensitiveSearch"/>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsUnicodeFileNames">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.UnicodeOnDisk"/>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.HasPersistentAccessControlLists">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.PersistentAcls"/>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsFileCompression">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Compression"/>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsDiskQuotas">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.VolumeQuotas"/>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.IsCompressed">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.VolumeIsCompressed"/>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsObjectIdentifiers">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsObjectIds"/>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsNamedStreams">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.NamedStreams"/>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.IsReadOnly">
            <summary>
            Deprecated, please use <see cref="P:Alphaleonis.Win32.Filesystem.VolumeInfo.ReadOnlyVolume"/>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.CasePreservedNames">
            <summary>
            The specified volume supports preserved case of file names when it places a name on disk.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.CaseSensitiveSearch">
            <summary>
            The specified volume supports case-sensitive file names.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.UnicodeOnDisk">
            <summary>
            The specified volume supports Unicode in file names as they appear on disk.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.PersistentAcls">
            <summary>
            The specified volume preserves and enforces access control lists (ACL).
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Compression">
            <summary>
            The specified volume supports file-based compression.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.VolumeQuotas">
            <summary>
            The specified volume supports disk quotas.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsSparseFiles">
            <summary>
            The specified volume supports sparse files.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsReparsePoints">
            <summary>
            The specified volume supports re-parse points.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsRemoteStorage">
            <summary>
            The specified volume supports remote storage.
            (This property does not appear on MSDN)
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.VolumeIsCompressed">
            <summary>
            The specified volume is a compressed volume, for example, a DoubleSpace volume.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsObjectIds">
            <summary>
            The specified volume supports object identifiers.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsEncryption">
            <summary>
            The specified volume supports the Encrypted File System (EFS).
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.NamedStreams">
            <summary>
            The specified volume supports named streams.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.ReadOnlyVolume">
            <summary>
            The specified volume is read-only.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SequentialWriteOnce">
            <summary>
            The specified volume supports a single sequential write.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsTransactions">
            <summary>
            The specified volume supports transactions.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsHardLinks">
            <summary>
            The specified volume supports hard links.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsExtendedAttributes">
            <summary>
            The specified volume supports extended attributes.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsOpenByFileId">
            <summary>
            The file system supports open by FileID.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsUsnJournal">
            <summary>
            The specified volume supports update sequence number (USN) journals.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SerialNumber">
            <summary>
            Gets the volume serial number that the operating system assigns when a hard disk is formatted.
            </summary>
            <value>The volume serial number that the operating system assigns when a hard disk is formatted.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.MaximumComponentLength">
            <summary>
            Gets the maximum length of a file name component that the file system supports.
            </summary>
            <value>The maximum length of a file name component that the file system supports.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.FileSystemName">
            <summary>
            Gets the name of the file system, for example, the FAT file system or the NTFS file system.
            </summary>
            <value>The name of the file system.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Volume">
            <summary>
            Static class providing utility methods for working with Microsoft Windows devices and volumes. Most
            of the methods in this class are convenience methods for native Win32 API-calls to make them
            simpler to use from managed languages.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.UInt32,System.String,System.String)">
            <summary>
            Defines, redefines, or deletes MS-DOS device names.
            </summary>
            <param name="deviceName">
            A pointer to an MS-DOS device name string specifying the device the function is defining, redefining, or deleting.
            </param>
            <param name="targetPath">
            A pointer to a path string that will implement this device. The string is an MS-DOS path string unless
            the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.
            </param>
            <param name="deviceAttributes">
            (Optional, default: <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.None"/>)
            The controllable aspects of the DefineDosDevice function <see cref="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes"/>
            flags which will be combined with the default.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>
            If the function succeeds, the return value is zero.
            If the function fails, the return value is nonzero.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
            <remarks>2012-02-14: Yomodo; Marked for future decaprication, use <see cref="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String,Alphaleonis.Win32.Filesystem.DosDeviceAttributes)"/> instead.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String)">
            <summary>
            Defines, redefines, or deletes MS-DOS device names.
            </summary>
            <param name="deviceName">
            A pointer to an MS-DOS device name string specifying the device the function is defining, redefining, or deleting.
            </param>
            <param name="targetPath">
            A pointer to a path string that will implement this device. The string is an MS-DOS path string unless
            the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>
            If the function succeeds, the return value is zero.
            If the function fails, the return value is nonzero.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String,Alphaleonis.Win32.Filesystem.DosDeviceAttributes)">
            <summary>
            Defines, redefines, or deletes MS-DOS device names.
            </summary>
            <param name="deviceName">
            A pointer to an MS-DOS device name string specifying the device the function is defining, redefining, or deleting.
            </param>
            <param name="targetPath">
            A pointer to a path string that will implement this device. The string is an MS-DOS path string unless
            the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.
            </param>
            <param name="deviceAttributes">
            (Optional, default: <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.None"/>)
            The controllable aspects of the DefineDosDevice function <see cref="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes"/>
            flags which will be combined with the default.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>
            If the function succeeds, the return value is zero.
            If the function fails, the return value is nonzero.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String)">
            <summary>
            Deletes an MS-DOS device name.
            </summary>
            <param name="deviceName">
            An MS-DOS device name string specifying the device to delete.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>
            If the function succeeds, the return value is zero.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String,System.String)">
            <summary>
            Deletes an MS-DOS device name.
            </summary>
            <param name="deviceName">
            An MS-DOS device name string specifying the device to delete.
            </param>
            <param name="targetPath">
            (Optional, default: null)
            A pointer to a path string that will implement this device.
            The string is an MS-DOS path string unless the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified,
            in which case this string is a path string.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>
            If the function succeeds, the return value is zero.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String,System.String,System.Boolean)">
            <summary>
            Deletes an MS-DOS device name.
            </summary>
            <param name="deviceName">
            An MS-DOS device name string specifying the device to delete.
            </param>
            <param name="targetPath">
            (Optional, default: null)
            A pointer to a path string that will implement this device.
            The string is an MS-DOS path string unless the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified,
            in which case this string is a path string.
            </param>
            <param name="exactMatch">
            (Optional, default: false)
            Only delete MS-DOS device on an exact name match.
            If exactMatch is true, targetPath must be the same path used to create the mapping.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>
            If the function succeeds, the return value is zero.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.DosDeviceAttributes)">
            <summary>
            Deletes an MS-DOS device name.
            </summary>
            <param name="deviceName">
            An MS-DOS device name string specifying the device to delete.
            </param>
            <param name="targetPath">
            (Optional, default: null)
            A pointer to a path string that will implement this device.
            The string is an MS-DOS path string unless the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified,
            in which case this string is a path string.
            </param>
            <param name="exactMatch">
            (Optional, default: false)
            Only delete MS-DOS device on an exact name match.
            If exactMatch is true, targetPath must be the same path used to create the mapping.
            </param>
            <param name="deviceAttributes">
            (Optional, default: <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RemoveDefinition"/>)
            The controllable aspects of the DefineDosDevice function <see cref="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes"/>
            flags which will be combined with the default.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>
            If the function succeeds, the return value is zero.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryDosDevice(System.String,System.String[])">
            <summary>
            Retrieves information about MS-DOS device names. The function can obtain the current mapping for a
            particular MS-DOS device name. The function can also obtain a list of all existing MS-DOS device names.
            </summary>
            <param name="deviceName">
            An MS-DOS device name string specifying the target of the query.
            This parameter can be null. In that case, the QueryDosDevice function will store a list of all
            existing MS-DOS device names into the buffer.
            </param>
            <param name="options">
            (Optional, default: false) If options[0] = true, a sorted list will be returned.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception"/>
            <returns>
            An IEnumerable list of Strings of one or more existing MS-DOS device names.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>
            Windows Server 2003 and Windows XP: QueryDosDevice first searches the Local MS-DOS Device namespace for the specified device name.
            If the device name is not found, the function will then search the Global MS-DOS Device namespace.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryAllDosDevices">
            <summary>
            Retrieves a list of all existing MS-DOS device names.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception"/>
            <returns>
            An IEnumerable list of Strings of one or more existing MS-DOS device names.
            </returns>
            <remarks>
            This is equivalent to calling <c>QueryDosDevice(null)</c>
            Windows Server 2003 and Windows XP: QueryDosDevice first searches the Local MS-DOS Device namespace for the specified device name.
            If the device name is not found, the function will then search the Global MS-DOS Device namespace.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryAllDosDevices(System.String)">
            <summary>
            Retrieves a list of all existing MS-DOS device names.
            </summary>
            <param name="deviceName">
            (Optional, default: null) An MS-DOS device name string specifying the target of the query.
            This parameter can be "sort". In that case a sorted list of all existing MS-DOS device names is returned.
            This parameter can be null. In that case, the <see cref="M:Alphaleonis.Win32.Filesystem.Volume.QueryDosDevice(System.String,System.String[])"/> function will store a list of all
            existing MS-DOS device names into the buffer.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception"/>
            <returns>
            An IEnumerable list of Strings of one or more existing MS-DOS device names.
            </returns>
            <remarks>
            This is equivalent to calling <c>QueryDosDevice(null)</c>
            Windows Server 2003 and Windows XP: QueryDosDevice first searches the Local MS-DOS Device namespace for the specified device name.
            If the device name is not found, the function will then search the Global MS-DOS Device namespace.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDriveFormat(System.String)">
            <summary>
            Gets the name of the file system, such as NTFS or FAT32.
            </summary>
            <param name="rootPathName">
            The root directory for the drive.
            </param>
            <returns>
            The name of the file system on the specified drive.
            </returns>
            <exception cref="T:System.IO.DriveNotFoundException">
            The drive does not exist or is not mapped.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred (for example, a disk error or a drive was not ready).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <remarks>
            Use DriveFormat to determine what formatting a drive uses.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDriveType">
            <summary>
            Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.
            </summary>
            <returns>
            A <see cref="T:System.IO.DriveType"/> object.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDriveType(System.String)">
            <summary>
            Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.
            </summary>
            <param name="rootPathName">
            (Optional) The root directory for the drive, default: null
            If this parameter is null, the function uses the root of the current directory.
            </param>
            <returns>
            A <see cref="T:System.IO.DriveType"/> object.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetCurrentDriveType">
            <summary>
            Determines, based on the root of the current directory, whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.
            </summary>
            <returns>
            A <see cref="T:System.IO.DriveType"/> object.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDiskFreeSpace(System.String)">
             <summary>
             Retrieves information about the amount of space that is available on a disk volume,
             which is the total amount of space, the total amount of free space, and the total amount of
             free space available to the user that is associated with the calling thread.
             </summary>
             <param name="rootPathName">
             A directory on the disk. If rootPathName is null, the function uses the root of the current disk.
             The calling application must have FILE_LIST_DIRECTORY access rights for this directory.
             Symbolic Link behavior: If the path points to a symbolic link, the operation is performed on the target.
            
             The calling application must have FILE_LIST_DIRECTORY access rights for this directory.
             </param>
             <returns>
             A <see ref="DiskSpaceInfo"/> class object containing the requested information or null if any of the depended methods fails.
             To get extended error information, call Marshal.GetLastWin32Error()
             </returns>
             <remarks>Minimum supported client: Windows XP</remarks>
             <remarks>Minimum supported server: Windows Server 2003</remarks>
             <remarks>If <see param="rootPathName"/> is a network share name, a trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDiskFreeSpaceExtended(System.String)">
            <summary>
            This function combines the Win32 API's GetDiskFreeSpaceEx and GetDiskFreeSpace functions.
            </summary>
            <param name="rootPathName">
            A directory on the disk. If rootPathName is null, the function uses the root of the current disk.
            The calling application must have FILE_LIST_DIRECTORY access rights for this directory.
            Symbolic Link behavior: If the path points to a symbolic link, the operation is performed on the target.
            </param>
            <returns>
            A <see ref="DiskSpaceInfoExtended"/> class object containing the requested information or null if any of the depended methods fails.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>If <see param="rootPathName"/> is a UNC name, a trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetLogicalDrives(System.Boolean)">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetLogicalDrives(System.Boolean,System.Boolean)">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetLogicalDrives(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <param name="removeDirectorySeparator">Remove the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> from the logical drive name.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.IsReady(System.String)">
            <summary>
            Gets a value indicating whether a drive is ready.
            Note: this function currently does not support Network share paths, instead a Patch.GetCurrentDirectory() will be
            performed to check if the Network share path is available. If yes: IsReady == true.
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ComponentModel.Win32Exception"/>
            <returns>true if the drive is ready; false otherwise.</returns>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteCurrentVolumeLabel">
            <summary>
            Deletes the label of the file system volume that is the root of the current directory
            </summary>
            <returns>
            If the function succeeds, the return value is zero.
            If the function fails, the return value is nonzero.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteVolumeLabel(System.String)">
            <summary>
            Deletes the label of a file system volume.
            </summary>
            <param name="rootPathName">
            The root directory of a file system volume. This is the volume the function will label.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rootPathName"/> is a <see langword="null"/> reference.</exception>
            <returns>
            If the function succeeds, the return value is zero.
            If the function fails, the return value is nonzero.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeLabel(System.String)">
            <summary>
            Retrieve the label of a file system volume.
            </summary>
            <param name="rootPathName">
            A pointer to a string that contains the volume's Drive letter (for example, X:\)
            or the path of a mounted folder that is associated with the volume (for example, Y:\MountX\).
            If this parameter is null, the root of the current directory is used.
            </param>
            <returns>
            The the label of the file system volume.
            This function can return an empty string since a volume label is generally not mandatory.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetCurrentVolumeLabel(System.String)">
            <summary>
            Sets the label of the file system volume that is the root of the current directory.
            </summary>
            <param name="volumeName">A name for the volume.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="volumeName"/> is a <see langword="null"/> reference.</exception>
            If the function succeeds, the return value is zero.
            If the function fails, the return value is nonzero.
            To get extended error information, call new Win32Exception(returned int)
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetVolumeLabel(System.String,System.String)">
            <summary>
            Sets the label of a file system volume.
            </summary>
            <param name="rootPathName">
            A pointer to a string that contains the volume's Drive letter (for example, X:\)
            or the path of a mounted folder that is associated with the volume (for example, Y:\MountX\).
            If this parameter is null, the root of the current directory is used.
            </param>
            <param name="volumeName">A name for the volume. A pointer to a string that contains
            the new label for the volume. If this parameter is null, the function deletes any
            existing label from the specified volume and does not assign a new label.
            </param>
            <returns>
            true if the function succeeds, false otherwise.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInformation(System.Object)">
            <summary>
            Retrieves information about the file system and volume associated with the specified root directory or filestream.
            </summary>
            <param name="pathHandle">
            A pointer to a <see cref="T:System.String"/> that contains the root directory or a pointer to a <see cref="T:System.IO.FileStream"/> handle.
            </param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.VolumeInfo"/> instance describing the volume associatied with the specified root directory,
            or null when: ERROR_PATH_NOT_FOUND, ERROR_ACCESS_DENIED, ERROR_NOT_READY or ERROR_GEN_FAILURE exceptions occure.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>For file  : Minimum supported client: Windows XP</remarks>
            <remarks>For file  : Minimum supported server: Windows Server 2003</remarks>
            <remarks>For stream: Minimum supported client: Windows Vista</remarks>
            <remarks>For stream: Minimum supported server: Windows Server 2008</remarks>
            <remarks>For file: a trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDeviceForVolumeName(System.String)">
            <summary>
            Retrieves the Win32 Device name from the Volume name.
            </summary>
            <param name="volumeName">Name of the Volume</param>
            <returns>The Win32 Device name from the Volume name</returns>
            <returns>If the function fails, the return value is null.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDisplayNameForVolume(System.String)">
            <summary>
            Gets the shortest display name for the specified <paramref name="volumeName"/>.
            </summary>
            <param name="volumeName">The volume name.</param>
            <returns>
            The shortest display name for the specified volume found.
            If not available null is returned.
            If the function fails, the return value is zero.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>
            This method basically returns the shortest string returned by <see cref="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumePathNamesForVolume(System.String)"/>
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetUniqueVolumeNameForPath(System.String,System.Boolean[])">
            <summary>Get the unique volume name for the given path.</summary>
            <param name="volumePathName">A pointer to the input path string. Both absolute and relative file and directory names,
            for example <see cref="F:Alphaleonis.Win32.Filesystem.Path.ParentDirectoryPrefix"/>, are acceptable in this path.
            If you specify a relative directory or file name without a volume qualifier,
            GetVolumePathName returns the Drive letter of the current volume.
            </param>
            <param name="options">
            options[0] = true: Remove the trailing backslash.
            </param>
            <returns>
            The unique name of the Volume Mount Point, a volume GUID path: \\?\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\
            If not available null is returned.
            If the function fails, the return value is zero.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumes">
            <summary>
            Retrieves the name of a volume on a computer.
            FindFirstVolume is used to begin scanning the volumes of a computer.
            </summary>
            <returns>An IEnumerable string containing the volume names on the computer.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumePathNamesForVolume(System.String)">
            <summary>
            Retrieves a list of Drive letters and mounted folder paths for the specified volume.
            </summary>
            <param name="volumeName">
            A volume GUID path: \\?\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\
            </param>
            <returns>An array containing the path names for the specified volume.</returns>
            <returns>If nothing is available null is returned.</returns>
            <returns>If the function fails, the return value is zero.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="volumeName"/> is a <see langword="null"/> reference</exception>
            <exception cref="T:System.IO.FileNotFoundException">The volume name specified was invalid, did not exist or was not ready.</exception>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.IsVolume(System.String)">
            <summary>
            Determines whether the specified volume name is a defined volume on the current computer.
            </summary>
            <param name="volumeMountPoint">
            A string representing the path to a volume.
            eg.  "C:\",  "D:",  "P:\Mountpoint\Backup",  "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\"
            </param>
            <returns>If the function succeeds, true, otherwise false</returns>
            <returns>If the function fails, the return value is zero.
            To get extended error information, call Marshal.GetLastWin32Error()
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteVolumeMountPoint(System.String)">
            <summary>Deletes a Drive letter or mounted folder.</summary>
            <param name="volumeMountPoint">The Drive letter or mounted folder to be deleted. For example, X:\ or Y:\MountX\.</param>
            <remarks>Deleting a mounted folder does not cause the underlying directory to be deleted.</remarks>
            <remarks>It's not an error to attempt to unmount a volume from a volume mount point when there is no volume actually mounted at that volume mount point.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeMountPoints(System.String)">
            <summary>Retrieves the names of all mounted folders (volume mount points) on the specified volume.</summary>
            <param name="volumeName">A volume GUID path for the volume to scan for mounted folders.</param>
            <returns>
            The names of all volume mount points on the specified volume.
            If the function fails, call Marshal.GetLastWin32Error() to get extended error information.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetUniqueVolumeNameForVolumeMountPoint(System.String)">
            <summary>Retrieves the unique volume name for the specified volume mount point or root directory.</summary>
            <param name="volumeMountPoint">The path of a volume mount point or a Drive letter indicating a root directory (eg. "C:" or "D:\").</param>
            <returns>The unique volume name of the form: "\\?\Volume{GUID}\" where GUID is the GUID that identifies the volume.</returns>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetVolumeMountPoint(System.String,System.String)">
            <summary>Associates a volume with a Drive letter or a directory on another volume.</summary>
            <param name="volumeMountPoint">
            The user-mode path to be associated with the volume. This may be a Drive letter (for example, "X:\")
            or a directory on another volume (for example, "Y:\MountX\").
            </param>
            <param name="volumeName">
            A volume GUID path for the volume. This string must be of the form "\\?\Volume{GUID}\" where GUID is a
            GUID that identifies the volume. The "\\?\" turns off path parsing and is ignored as part of the path.
            </param>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.AlphaFSInternalError">
            <summary>
              Looks up a localized string similar to AlphaFS Internal Error: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.AttemptingToGenerateExceptionFromSuccessfulOperation">
             <summary>
               Looks up a localized string similar to Incorrectly implemented function attempting to generate exception from successful operation.
            .
             </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.BufferIsNotLargeEnoughForTheRequestedOperation">
            <summary>
              Looks up a localized string similar to Buffer is not large enough for the requested operation..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.CountMustNotBeNegative">
            <summary>
              Looks up a localized string similar to Count must not be negative: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.DirectoryNotEmpty">
            <summary>
              Looks up a localized string similar to Directory not empty: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to Directory not found: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ErrorCodeWas0">
            <summary>
              Looks up a localized string similar to Error code was: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.HandleClosed">
            <summary>
              Looks up a localized string similar to Handle is closed..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.HandleInvalid">
            <summary>
              Looks up a localized string similar to Invalid handle..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.HardLinksOnNonNTFSPartitionsIsNotSupported">
            <summary>
              Looks up a localized string similar to Creating hard-links on non-NTFS partitions is not supported.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.IllegalPath">
            <summary>
              Looks up a localized string similar to Illegal path: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidDirectoryName">
            <summary>
              Looks up a localized string similar to Invalid directory name: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidSecurityDescriptorReturnedFromSystem">
            <summary>
              Looks up a localized string similar to Invalid security descriptor returned from system..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidTransaction">
            <summary>
              Looks up a localized string similar to Invalid transaction object..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidTransactionRequest">
            <summary>
              Looks up a localized string similar to Invalid transaction request..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.NotAReparsePoint">
            <summary>
              Looks up a localized string similar to The file or directory is not a reparse point..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.OffsetMustNotBeNegative">
            <summary>
              Looks up a localized string similar to Offset must not be negative: {0}.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.PathAlreadyExists">
            <summary>
              Looks up a localized string similar to Path already exists..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ThisStreamDoesNotSupportSeeking">
            <summary>
              Looks up a localized string similar to This stream does not support seeking..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionalConflict">
            <summary>
              Looks up a localized string similar to Transactional conflict..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionAlreadyAborted">
            <summary>
              Looks up a localized string similar to Transaction already aborted..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionAlreadyCommitted">
            <summary>
              Looks up a localized string similar to Transaction already committed..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionNotActive">
            <summary>
              Looks up a localized string similar to Transaction not active..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionNotRequested">
            <summary>
              Looks up a localized string similar to Transaction not requested..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.UNCPathShouldMatchTheFormatServerShare">
            <summary>
              Looks up a localized string similar to Network share path should match the format: \\Server\Share.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException">
            <summary>
            The requested operation could not be completed because the device was not ready.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle">
            <summary>
            Provides a concrete implementation of SafeHandle supporting transactions.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.KernelTransaction">
            <summary>
            A KTM transaction object for use with the transacted operations in <see cref="N:Alphaleonis.Win32.Filesystem"/>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.Transactions.Transaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class, internally using the
            specified <see cref="T:System.Transactions.Transaction"/>. This method allows the usage of methods accepting a 
            <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> with an instance of <see cref="T:System.Transactions.Transaction"/>.
            </summary>
            <param name="transaction">The transaction to use for any transactional operations.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class with a default security descriptor,
            infinite timeout and no description.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class with a default security descriptor.
            </summary>
            <param name="timeout"><para>The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state.</para></param>
            <param name="description">A user-readable description of the transaction. May be <c>null.</c></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.Security.AccessControl.ObjectSecurity,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class.
            </summary>
            <param name="securityDescriptor">The <see cref="T:System.Security.AccessControl.ObjectSecurity"/> security descriptor.</param>
            <param name="timeout"><para>The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state.</para>
            <para>Specify <c>0</c> to provide an infinite timeout.</para></param>
            <param name="description">A user-readable description of the transaction. May be <c>null.</c></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Commit">
            <summary>
            Requests that the specified transaction be committed.
            </summary>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">The transaction was already committed.</exception>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException">The transaction was already aborted.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Rollback">
            <summary>
            Requests that the specified transaction be rolled back. This function is synchronous.
            </summary>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">The transaction was already committed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.KernelTransaction.SafeHandle">
            <summary>
            Gets the safe handle.
            </summary>
            <value>The safe handle.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of FileStream objects.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FileInfo class, which acts as a wrapper for a file path. 
            </summary>
            <param name="filePath">The path to the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a <see langword="null"/> reference.</exception>
            <remarks>
            You can specify either the fully qualified or the relative file name, but the security check gets the fully qualified name.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
            <remarks>
            FileSystemInfo.Refresh takes a snapshot of the file from the current file system. 
            Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information.
            This can happen on platforms such as Windows 98.
            Calls must be made to Refresh before attempting to get the attribute information, or the information will be outdated.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Delete">
            <summary>
            Deletes a file.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.ToString">
            <summary>
            Returns the path as a string.
            </summary>
            <returns>A string representing the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.AppendText">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.
            </summary>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file. 
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <param name="overwrite"><c>true</c> to allow an existing file to be overwritten; otherwise, <c>false</c>.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>A new file, or an overwrite of an existing file if overwrite is true. If the file exists and overwrite is false, an IOException is thrown.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns><see cref="T:System.IO.FileStream"/>A new file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CreateText">
            <summary>
            Creates a <see crefe="System.IO.StreamWriter"/> that writes a new text file. 
            </summary>
            <returns>A new <see cref="T:System.IO.StreamWriter"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.GetAccessControl">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object.
            </summary>
            <returns><see cref="T:System.Security.AccessControl.FileSecurity"/>A FileSecurity object that encapsulates the access control rules for the current file. </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object.
            </summary>
            <param name="includeSections">The include sections.</param>
            <returns><see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="destFileName">The path to move the file to, which can specify a different file name.</param>
            <remarks>This method works across disk volumes. For example, the file c:\MyFile.txt can be moved to d:\public and renamed NewFile.txt.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <returns><see cref="T:System.IO.FileStream"/>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access. 
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access"><see cref="T:System.IO.FileAccess"/>A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
            <returns><see cref="T:System.IO.FileStream"/>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access"><see cref="T:System.IO.FileAccess"/>A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A FileShare constant specifying the type of access other FileStream objects have to this file.</param>
            <returns><see cref="T:System.IO.FileStream"/>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenRead">
            <summary>
            Creates a read-only FileStream.
            </summary>
            <returns>A new read-only FileStream object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns>A new StreamReader with UTF8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenWrite">
            <summary>
            Creates a write-only FileStream.
            </summary>
            <returns>A new write-only unshared FileStream object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String)">
            <summary>
            Replaces the contents of a specified file with the file described by the current FileInfo object, deleting the original file, and creating a backup of the replaced file.
            </summary>
            <param name="destinationFileName"><see cref="T:System.String"/>The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName"><see cref="T:System.String"/>The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>A FileInfo object that encapsulates information about the file described by the destFileName parameter.</returns>
            <remarks>The Replace method replaces the contents of a specified file with the contents of the file described by the current FileInfo object. It also creates a backup of the file that was replaced. Finally, it returns a new FileInfo object that describes the overwritten file.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String,System.Boolean)">
            <summary>
            Replaces the specified destination file name.
            </summary>
            <param name="destinationFileName"><see cref="T:System.String"/>The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName"><see cref="T:System.String"/>The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>A FileInfo object that encapsulates information about the file described by the destFileName parameter.</returns>
            <remarks>The Replace method replaces the contents of a specified file with the contents of the file described by the current FileInfo object. It also creates a backup of the file that was replaced. Finally, it returns a new FileInfo object that describes the overwritten file.
            The last parameter <paramref name="ignoreMetadataErrors"/> is not supported yet.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object.</summary>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an access control list (ACL) entry to apply to the current file.</param>
            <remarks>The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL list. 
            Use the SetAccessControl method whenever you need to add or remove ACL entries from a file.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Compress">
            <summary>
            Compresses a file using NTFS compression.
            </summary>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Decompress">
            <summary>
            Decompresses an NTFS compressed file.
            </summary>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Decrypt">
            <summary>
            Decrypts a file that was encrypted by the current account using the <see cref="M:Alphaleonis.Win32.Filesystem.FileInfo.Encrypt"/> method.
            </summary>
            <remarks>The Decrypt method allows you to decrypt a file that was encrypted using the Encrypt method.
            The Decrypt method can decrypt only files that were encrypted using the current user account.
            Both the Encrypt method and the Decrypt method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method.
            The current file system must be formatted as NTFS and the current operating system must be Microsoft Windows NT or later.
            </remarks>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Encrypt">
            <summary>
            Encrypts a file so that only the account used to encrypt the file can decrypt it.
            </summary>
            <remarks>
            The Encrypt method allows you to encrypt a file so that only the account used to call this method can decrypt it. Use the Decrypt method to decrypt a file encrypted by the Encrypt method. 
            Both the Encrypt method and the Decrypt method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method. 
            The current file system must be formatted as NTFS and the current operating system must be Microsoft Windows NT or later.
            </remarks>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.EnumerateStreams">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the file or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <param name="transaction">The transaction.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the file or <see langref="null"/> on error.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Directory">
            <summary>
            Gets an instance of the parent directory.
            </summary>
            <value>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object representing the parent directory of this file.</value>
            <remarks>To get the parent directory as a string, use the DirectoryName property.</remarks>
            
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Exists">
            <summary>
            Gets a value indicating whether the file or directory exists.
            </summary>
            <value><c>true</c> if the file exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.IsReadOnly">
            <summary>
            Gets or sets a value that determines if the current file is read only.
            </summary>
            <value>
            	<c>true</c> if the current file is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Name">
            <summary>
            Gets the name of the file with extension.
            </summary>
            <value>File name with extension.</value>
            <remarks>
            For a file, Name returns only the file name and file name extension, such as MyFile.txt, not c:\Dir\Myfile.txt.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Length">
            <summary>
            Gets the file size.
            </summary>
            <value>The file size.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Win32FindData">
             <summary>
             WIN32_FIND_DATA structure
             Contains information about the file that is found by the FindFirstFile, FindFirstFileEx, or FindNextFile function.
             </summary>
             <remarks>
             If a file has a long file name, the complete name appears in the cFileName member, and the 8.3 format truncated version of the name appears
             in the cAlternateFileName member. Otherwise, cAlternateFileName is empty. If the FindFirstFileEx function was called with a value of FindExInfoBasic
             in the fInfoLevelId parameter, the cAlternateFileName member will always contain a NULL string value. This remains true for all subsequent calls to the
             FindNextFile function. As an alternative method of retrieving the 8.3 format version of a file name, you can use the GetShortPathName function.
             For more information about file names, see File Names, Paths, and Namespaces.
             </remarks>
             <remarks>
             Not all file systems can record creation and last access times, and not all file systems record them in the same manner.
             For example, on the FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds,
             and access time has a resolution of 1 day. The NTFS file system delays updates to the last access time for a file by up to 1 hour
             after the last access. For more information, see File Times.
             </remarks>
            <remarks>
             Note: For some marshalling reason WIN32_FIND_DATA whould be declared as class not a struct.
             2012-03-03: Changing the function's signature "[In, Out]" to "out", enables the usage of struct.
             </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.FileAttributes">
            <summary>
            The file attributes of a file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.CreationTime">
            <summary>
            A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure that specifies when a file or directory was created.
            If the underlying file system does not support creation time, this member is zero.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.LastAccessTime">
            <summary>
            A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure.
            For a file, the structure specifies when the file was last read from, written to, or for executable files, run.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero.
            On the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.LastWriteTime">
            <summary>
            A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure.
            For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used.
            The date and time are not updated when file attributes or security descriptors are changed.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.FileSizeHigh">
            <summary>
            The high-order DWORD value of the file size, in bytes.
            This value is zero unless the file size is greater than MAXDWORD.
            The size of the file is equal to (nFileSizeHigh * (MAXDWORD+1)) + nFileSizeLow.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.FileSizeLow">
            <summary>
            The low-order DWORD value of the file size, in bytes.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.Reserved0">
            <summary>
            If the dwFileAttributes member includes the FILE_ATTRIBUTE_REPARSE_POINT attribute, this member specifies the reparse point tag.
            Otherwise, this value is undefined and should not be used.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.Reserved1">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FindData.AlternateFileName">
            <summary>
            An alternative name for the file.
            This name is in the classic 8.3 file name format.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Win32FileAttributeData">
            <summary>
            WIN32_FILE_ATTRIBUTE_DATA structure contains attribute information for a file or directory.
            The GetFileAttributesEx function uses this structure.
            </summary>
            <remarks>
            Not all file systems can record creation and last access time, and not all file systems record them in the same manner.
            For example, on the FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds,
            and access time has a resolution of 1 day. On the NTFS file system, access time has a resolution of 1 hour. 
            For more information, see File Times.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FileAttributeData.FileAttributes">
            <summary>
            The file system attribute information for a file or directory. The following attributes are defined:
              FILE_ATTRIBUTE_ARCHIVE        The file or directory is an archive file. Applications use this attribute to mark files for backup or removal.
              FILE_ATTRIBUTE_COMPRESSED     The file or directory is compressed. For a file, this means that all of the data in the file is compressed. For a directory, this means that compression is the default for newly created files and subdirectories. 
              FILE_ATTRIBUTE_DIRECTORY      The handle identifies a directory. 
              FILE_ATTRIBUTE_ENCRYPTED      The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories.
              FILE_ATTRIBUTE_HIDDEN         The file or directory is hidden. It is not included in an ordinary directory listing.
              FILE_ATTRIBUTE_NORMAL         The file or directory has no other attributes set. This attribute is valid only if used alone. 
              FILE_ATTRIBUTE_OFFLINE        The data of the file is not immediately available. This attribute indicates that the file data has been physically moved to offline storage. This attribute is used by Remote Storage, the hierarchical storage management software in Windows 2000. Applications should not arbitrarily change this attribute. 
              FILE_ATTRIBUTE_READONLY       The file or directory is read-only. Applications can read the file but cannot write to it or delete it. In the case of a directory, applications cannot delete it. 
              FILE_ATTRIBUTE_REPARSE_POINT  The file has an associated reparse point. 
              FILE_ATTRIBUTE_SPARSE_FILE    The file is a sparse file. 
              FILE_ATTRIBUTE_SYSTEM         The file or directory is part of the operating system or is used exclusively by the operating system. 
              FILE_ATTRIBUTE_TEMPORARY      The file is being used for temporary storage. File systems attempt to keep all of the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FileAttributeData.CreationTime">
            <summary>
            A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure that specifies when a file or directory was created.
            If the underlying file system does not support creation time, this member is zero.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FileAttributeData.LastAccessTime">
            <summary>
            A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure.
            For a file, the structure specifies when the file was last read from, written to, or for executable files, run.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero.
            On the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FileAttributeData.LastWriteTime">
            <summary>
            A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure.
            For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used.
            The date and time are not updated when file attributes or security descriptors are changed.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FileAttributeData.FileSizeHigh">
            <summary>
            The high-order DWORD of the file size.
            This member does not have a meaning for directories.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Win32FileAttributeData.FileSizeLow">
            <summary>
            The low-order DWORD of the file size.
            This member does not have a meaning for directories.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.GetFileExInfoStandard">
            <summary>
            This enumeration defines values that are used with the GetFileAttributesEx function to specify the type of attribute information to obtain.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFileExInfoStandard.GetFileExInfoStandard">
            <summary>
            The GetFileAttributesEx function obtains a standard set of attribute information. 
            The data is returned in a <see cref="T:Alphaleonis.Win32.Filesystem.Win32FileAttributeData"/> structure.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFileExInfoStandard.GetFileExMaxInfoLevel">
            <summary>
            One greater than the maximum value. Valid values for this enumeration will be less than this value.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle">
            <summary>
            IntPtr wrapper which can be used as result of
            Marshal.AllocHGlobal operation.
            Calls Marshal.FreeHGlobal when disposed or finalized.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.#ctor">
            <summary>
            Creates new instance with zero IntPtr
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.#ctor(System.Int32)">
            <summary>
            Creates new instance which allocates unmanaged memory of given size
            Can throw OutOfMemoryException 
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed 8-bit unsigned integer array to the unmanaged memory pointer referenced by this instance-
            </summary>
            <param name="source">The one-dimensional array to copy from. </param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.ReleaseHandle">
            <summary>
            Called when object is disposed or finalized.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamAttributes">
            <summary>Attributes of data to facilitate cross-operating system transfer.</summary>
            <seealso cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>    
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.None">
            <summary>This backup stream has no special attributes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.ModifiedWhenRead">
            <summary>Attribute set if the stream contains data that is modified when read. Allows the backup application to know that verification of data will fail.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.ContainsSecurity">
            <summary>Stream contains security data (general attributes). Allows the stream to be ignored on cross-operations restore. This attribute only applies to backup stream of type <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.SecurityData"/>.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.ContainsProperties">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.Sparse">
            <summary>The backup stream is part of a sparse file stream. This attribute applies only to backup stream of type <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.Data"/>, <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.AlternateData"/>, and <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.SparseBlock"/>.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException">
            <summary>
            The file or directory was not a reparse point.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException">
            <summary>
            The exception that is thrown when an attempt to create a directory or file that already exists was made.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Directory">
            <summary>
            Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.
            </summary>
            <remarks>
            <para>As opposed to <see cref="T:System.IO.Directory"/> this class supports the use of extended length unicode paths, such as 
            <c>\\?\Volume{c00fa7c5-63eb-11dd-b6ed-806e6f6e6963}\Program Files\Internet Explorer</c>. In addition, support for transacted file operation 
            using the kernel transaction manager is provided. (See also <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/>).</para>
            <para>Note that no methods in this class perform any validation of the supplied paths. They are passed as is to the corresponding
            native kernel functions, meaning that invalid paths may result in exceptions of a type other than the expected for a certain operation.
            </para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String)">
            <summary>
            Creates all the directories in a specified path.
            If the underlying file system supports security on files and directories,
            the function applies a default security descriptor to the new directory.
            </summary>
            <param name="path">The directory path to create.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates all the directories in the specified path, applying the specified Windows security.
            </summary>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Creates all the directories in a specified path as a transacted operation. 
            If the underlying file system supports security on files and directories,
            the function applies a default security descriptor to the new directory. 
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path to create.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Security.AccessControl.ObjectSecurity)">
            <summary>Creates all the directories in a specified path as a transacted operation, with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function applies a default security descriptor to the new directory. 
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Creates a new directory as a transacted operation, with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function applies a default security descriptor to the new directory. 
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="templatePath">
            <para>The path of the directory to use as a template when creating the new directory. This parameter can be <see langword="null"/>. </para>
            <para>The directory must reside on the local computer; otherwise, the an exception of type <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> is thrown.</para>
            </param>
            <param name="path">The directory path to create.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.ObjectSecurity)">
            <summary>Creates a new directory as a transacted operation, with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function applies a default security descriptor to the new directory. 
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="templatePath">
            <para>The path of the directory to use as a template when creating the new directory. This parameter can be <see langword="null"/>. </para>
            <para>The directory must reside on the local computer; otherwise, the an exception of type <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> is thrown.</para>
            </param>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String)">
            <summary>Creates a new directory with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function 
            applies a default security descriptor to the new directory. The new directory retains 
            the other attributes of the specified template directory.
            </summary>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="path">The directory path to create.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,System.Security.AccessControl.ObjectSecurity)">
            <summary>Creates a new directory with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function 
            applies the specified security descriptor to the new directory. The new directory retains 
            the other attributes of the specified template directory.
            </summary>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.ObjectSecurity,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes)">
            <summary>Creates a new directory with the attributes of a specified template directory (if one is specified). 
            If the underlying file system supports security on files and directories, the function 
            applies the specified security descriptor to the new directory. The new directory retains 
            the other attributes of the specified template directory.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory. 
            May be <see langword="null"/> to indicate that no template should be used.</param>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory, may be <see langword="null"/>.</param>
            <param name="securityAttributes">
            The security descriptor to apply to the newly created directory.
            May be <see langword="null"/> in which case a default security descriptor will be applied.</param>
            <returns>Returns <c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String)">
            <summary>Deletes an empty directory from a specified path.</summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Deletes an empty directory from a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean,System.Boolean,System.String,System.IO.SearchOption)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean,System.String,System.IO.SearchOption)">
            <summary>Unified method DeleteInternal() to delete a Non-/Transacted file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove all subdirectories and files recursively; otherwise, <c>false</c> only the top level empty directory.</param>
            <param name="ignoreReadOnly">if set to <c>true</c> overrides read only attribute of files and directories.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory names in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of directory names in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file names in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of file names in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String)">
            <summary>Returns an enumerable collection of file-system entries in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection of file-system entries in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>Returns an enumerable collection of file-system entries that match a search pattern in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>
            An enumerable <see langref="string"/> collection of file-system entries in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>
            An enumerable <see langref="string"/> collection of file-system entries in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of file-system entries in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an enumerable collection of file-system entries that match a search pattern in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Exists(System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path refers to an existing directory; otherwise, <c>false</c>.</returns>
            <remarks>Possible performance improvement may be achieved by utilizing <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps.FindExSearchLimitToDirectories"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Exists(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk as part of a transaction.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path refers to an existing directory; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the specified directory.</summary>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular directory.</summary>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the directory's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory described by the <paramref name="path"/> parameter. </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of a directory.</summary>
            <param name="path">The path of the directory.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the creation date and time of a directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path of the directory.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary>
            <param name="path">The path of the directory.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path of the directory.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCurrentDirectory">
            <summary>Gets the current working directory of the application.</summary>
            <returns>A string that contains the path of the current working directory, and does not end with a backslash (\).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String)">
            <summary>Gets the names of subdirectories (including their paths) in the specified directory.</summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String)">
            <summary>Gets the names of subdirectories (including their paths) that match the specified search pattern in the current directory.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the names of subdirectories (including their paths) in the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Gets the names of subdirectories (including their paths) that match the specified search pattern in the current directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRoot(System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A string that contains the volume information, root information, or both for the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String)">
            <summary>Returns the names of files (including their paths) in the specified directory.</summary>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the names of files (including their paths) in the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String)">
            <summary>Returns the names of all files and subdirectories in the specified directory.</summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>An <see cref="T:System.String"/>[] array of the names of files and subdirectories in the specified directory.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String)">
            <summary>Returns an array of file system entries that match the specified search criteria.</summary>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the names of all files and subdirectories in the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>An <see cref="T:System.String"/>[] array of the names of files and subdirectories in the specified directory.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an array of file system entries that match the specified search criteria.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary>
            <param name="path">The file or directory for which to obtain modification date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain modification date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary>
            <param name="path">The file or directory for which to obtain modification date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain modification date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <returns>The logical drives on this computer as a <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParent(System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> or null if path is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="sourceDirName">The path of the file or directory to move.</param>
            <param name="destinationDirName">The path to the new location for sourceDirName. If sourceDirName is a file, then destinationDirName must also be a file name.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceDirName">The path of the file or directory to move.</param>
            <param name="destinationDirName">The path to the new location for sourceDirName. If sourceDirName is a file, then destinationDirName must also be a file name.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <remarks>Note that unlike <see cref="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/> this method does <b>not</b> automatically
            determine what parts of the specified <see cref="T:System.Security.AccessControl.DirectorySecurity"/> instance has been modified. Instead, the
            parameter <paramref name="includeSections"/> is used to specify what entries from <paramref name="directorySecurity"/> to apply to <paramref name="path"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the creation date and time for the specified file or directory.</summary>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">An object that contains the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the creation date and time for the specified file or directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">An object that contains the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">An object that contains the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">An object that contains the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCurrentDirectory(System.String)">
            <summary>Sets the application's current working directory to the specified directory.</summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file or directory was last accessed.</summary>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="creationTime">An object that contains the value to set for the access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time the specified file or directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="creationTime">An object that contains the value to set for the access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="creationTime">An object that contains the value to set for the access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="creationTime">An object that contains the value to set for the access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time a directory was last written to.</summary>
            <param name="path">The path of the directory.</param>
            <param name="creationTime">The date and time the directory was last written to. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time a directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path of the directory.</param>
            <param name="creationTime">The date and time the directory was last written to. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary>
            <param name="path">The path of the directory.</param>
            <param name="creationTime">The date and time the directory was last written to. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path of the directory.</param>
            <param name="creationTime">The date and time the directory was last written to. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="path">A path that describes a directory to compress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only compress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String,System.String)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only compress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String,System.String,System.IO.SearchOption)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only compress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only compress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="path">A path that describes a directory to decompress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decompress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String,System.String)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decompress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String,System.String,System.IO.SearchOption)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decompress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decompress the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressionDisable(System.String)">
            <summary>Disables compression of the specified directory and the files in it.</summary>
            <param name="path">A path to a folder to decompress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This method disables the folder-compression attribute. It will not decompress the current contents of the folder.
            However, newly created files and folders will be uncompressed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressionDisable(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Disables compression of the specified directory and the files in it.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a folder to decompress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This method disables the folder-compression attribute. It will not decompress the current contents of the folder.
            However, newly created files and folders will be uncompressed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressionEnable(System.String)">
            <summary>Enables compression of the specified directory and the files in it.</summary>
            <param name="path">A path to a folder to compress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This method enables the folder-compression attribute. It will not compress the current contents of the folder.
            However, newly created files and folders will be compressed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressionEnable(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Enables compression of the specified directory and the files in it.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a folder to compress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This method enables the folder-compression attribute. It will not compress the current contents of the folder.
            However, newly created files and folders will be compressed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressDecompressInternal(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Unified method CompressDecompressInternal() to compress/decompress Non-/Transacted directories/files.</summary>
            <param name="compress">When <c>true</c> compress, when <c>false</c> decompress.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Counts files in a given directory.</summary>
            <param name="directory">The directory path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="continueOnAccessErrors">if set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points, otherwise a <see cref="T:System.UnauthorizedAccessException"/> will be thrown.</param>
            <returns>The counted number of files.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Counts files in a given directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="directory">The directory path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="continueOnAccessErrors">if set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points, otherwise a <see cref="T:System.UnauthorizedAccessException"/> will be thrown.</param>
            <returns>The counted number of files.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information in the current directory.</summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information in the current directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(System.String,System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesInternal(System.Nullable{System.Boolean},System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Unified method EnumerateFileSystemEntriesInternal() to enumerate Non-/Transacted directories/files.</summary>
            <param name="getFolders">When <c>true</c>, folders will be returned, when <c>false</c>, files will be returned. When <c>null</c> both folders and files will be returned.</param>
            <param name="returnAsString">When <c>true</c>, returns the results as an enumerable <see langref="string"/> object, when <c>false</c> the
            returned enumerable is of a <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object.
            </param>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>
            If <paramref name="returnAsString"/> is <c>true</c>, an enumerable <see langref="string"/> collection,
            of the full names (including paths) for the directories in the directory specified by path and that match the specified search pattern and option.
            If <paramref name="returnAsString"/> is <c>false</c>, an enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories that matches searchPattern and searchOption.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="path">A path that describes a directory.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreamsInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Unified method EnumerateStreamsInternal() to return an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">
            A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>)
            or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>). The default value is <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>
            </param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the directory specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(System.String)">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="path">A path that describes a directory to decrypt.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(System.String,System.String)">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="path">A path that describes a directory to decrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(System.String,System.String,System.IO.SearchOption)">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="path">A path that describes a directory to decrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="path">A path that describes a directory to decrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decrypt.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only decrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(System.String)">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="path">A path that describes a directory to encrypt.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only encrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(System.String,System.String)">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only encrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(System.String,System.String,System.IO.SearchOption)">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to encrypt.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only encrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This will only encrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EncryptionEnable(System.String)">
            <summary>Enables encryption of the specified directory and the files in it. 
            It does not affect encryption of subdirectories below the indicated directory. 
            </summary>
            <param name="path">The name of the directory for which to enable encryption.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=1"</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EncryptionDisable(System.String)">
            <summary>Disables encryption of the specified directory and the files in it. 
            It does not affect encryption of subdirectories below the indicated directory. 
            </summary>
            <param name="path">The name of the directory for which to disable encryption.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=0"</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EncryptDecryptInternal(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Unified method EncryptDecryptInternal() to encrypt/decrypt Non-/Transacted directories/files.</summary>
            <param name="encrypt">When <c>true</c> encrypts when <c>false</c> decrypt.</param>
            <param name="transaction"></param>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(System.String)">
            <summary>
            Retrieves information about files in the directory specified by <paramref name="directoryPath"/>.
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="directoryPath">A path to a directory from which to retrieve information.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Retrieves information about files in the directory specified by <paramref name="path"/> using the specified <paramref name="transaction"/>
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="transaction">The transaction to use for this operation.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileShare)">
            <summary>
            Retrieves information about files in the directory specified by <paramref name="path"/> using the specified <paramref name="transaction"/> and
            share mode.
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="transaction">The transaction to use for this operation.</param>
            <param name="shareMode">The sharing mode with which to open a handle to the directory.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(System.String,System.IO.FileShare)">
            <summary>
            Retrieves information about files in the directory specified by <paramref name="path"/> using the specified
            share mode.
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="shareMode">The sharing mode with which to open a handle to the directory.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Retrieves information about files in the directory handle specified.
            </summary>
            <remarks>
            <para>
            No specific access rights is required to query this information. 
            </para>
            <para>
            File reference numbers, also called file IDs, are guaranteed to be unique only within a static file system. 
            They are not guaranteed to be unique over time, because file systems are free to reuse them. Nor are they guaranteed to remain constant. 
            For example, the FAT file system generates the file reference number for a file from the byte offset of the file's directory entry record 
            (DIRENT) on the disk. Defragmentation can change this byte offset. Thus a FAT file reference number can change over time.
            </para>
            <para>
            <b>Requires Windows Vista or Windows Server 2008 or later.</b>
            </para>
            </remarks>
            <param name="fileHandle">An open handle to the directory from which to retrieve information.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>    
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(System.String)">
            <summary>Returns an enumerable of file system entries that match the specified search criteria.</summary>
            <param name="directory">
            The directory or path, and the file name, which can include wildcard characters, 
            for example, an <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> or a <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>
            </param>
            <returns>Returns an enumerable <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of file system entries that match the specified search criteria.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(System.String,System.String)">
            <summary>Returns an enumerable of file system entries that match the specified search criteria.</summary>
            <param name="directory">
            The directory or path, and the file name, which can include wildcard characters, 
            for example, an <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> or a <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>
            </param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> enum containing the file system entries for the specified <paramref name="directory"/></returns>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable of file system entries that match the specified search criteria.</summary>
            <param name="directory">
            The directory or path, and the file name, which can include wildcard characters, 
            for example, an <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> or a <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>
            </param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> enum containing the file system entries for the specified <paramref name="directory"/></returns>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable of file system entries that match the specified search criteria.</summary>
            <param name="directory">
            The directory or path, and the file name, which can include wildcard characters, 
            for example, an <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> or a <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>
            </param>
            <param name="searchPattern">
            The search string to match against the names of files in path. The <paramref name="searchPattern"/> parameter cannot end in
            two periods <see cref="F:Alphaleonis.Win32.Filesystem.Path.ParentDirectoryPrefix"/> or contain two periods (<see cref="F:Alphaleonis.Win32.Filesystem.Path.ParentDirectoryPrefix"/>) followed by <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/>
            or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>, nor can it contain any of the characters in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.
            </param>
            <param name="directoriesOnly">if set to <c>true</c> enumerate only directories.</param>
            <param name="searchOption">The search option. <see cref="T:System.IO.SearchOption"/></param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> enum containing the file system entries for the specified <paramref name="directory"/></returns>
            <remarks>This is a convenience method for using the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable of file system entries that match the specified search criteria.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of file system entries that match the specified search criteria.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an enumerable of file system entries that match the specified search criteria.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <returns>An enumerable <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of file system entries that match the specified search criteria.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable of file system entries that match the specified search criteria.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of file system entries that match the specified search criteria.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable of file system entries that match the specified search criteria.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="directoriesOnly">if set to <c>true</c> enumerate only directories.</param>
            <returns>An enumerable <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of file system entries that match the specified search criteria.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Returns an enumerable of file system entries that match the specified search criteria.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="directoriesOnly">if set to <c>true</c> enumerate only directories.</param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of file system entries that match the specified search criteria.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFullFileSystemEntriesInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean,Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Unified method GetFullFileSystemEntriesInternal() to enumerate Non-/Transacted file system entries.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in path.</param>
            <param name="searchOption">
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <param name="directoriesOnly">if set to <c>true</c> enumerate only directories.</param>
            <param name="handler">Optional enumeration exception handler. You can subscribe to exceptions and make decisions about them on the fly.</param>
            <param name="suppressedExceptions">The list of exceptions to skip. Useful when dealing with protected directories.</param>
            <returns>An enumerable <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of file system entries that match the specified search criteria.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives(System.Boolean)">
            <summary>
            Retrieves the names of the logical drives on this computer in the form "driveLetter:\"
            </summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives(System.Boolean,System.Boolean)">
            <summary>
            Retrieves the names of the logical drives on this computer in the form "driveLetter:\"
            </summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the names of the logical drives on this computer in the form "driveLetter:\"
            </summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <param name="removeDirectorySeparator">Remove the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> from the logical drive name.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object.
            Plus additional ones: Total, File, Size, Error
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="directory">The target directory.</param>
            <param name="searchOption">The search option. Either top level or subfolders too.</param>
            <param name="continueOnAccessErrors">if set to <c>true</c> continue on <see cref="T:System.UnauthorizedAccessException"/> errors.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object.
            Plus additional ones: Total, File, Size, Error
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="transaction">The transaction. For a non transacted operation pass <c>NULL</c>.</param>
            <param name="directory">The target directory.</param>
            <param name="searchOption">The search option. Either top level or subfolders too.</param>
            <param name="continueOnAccessErrors">if set to <c>true</c> continue on <see cref="T:System.UnauthorizedAccessException"/> errors.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionException">
            <summary>
            The exception that is thrown when an attempt to create a directory or file that already exists was made.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">
            <summary>
            It is too late to perform the requested operation, since the Transaction has already been committed.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Security.PrivilegeEnabler">
            <summary>
            Used to enable one or more privileges. The privileges specified will be enabled during the 
            lifetime of the instance. Users create an instance of this object in a <c>using</c> statement
            to ensure that it is properly disposed when the elevated privileges are no longer needed.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.PrivilegeEnabler.#ctor(Alphaleonis.Win32.Security.Privilege,Alphaleonis.Win32.Security.Privilege[])">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/> class. This will enable the
            privileges specified (unless already enabled), and ensure that they are disabled again when
            the object is disposed. (Any privileges already enabled will not be disabled).
            </summary>
            <param name="privilege">The privilege to enable.</param>
            <param name="privileges">Additional privileges to enable.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.PrivilegeEnabler.Dispose">
            <summary>
            Makes sure any privileges enabled by this instance are disabled.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Security.PrivilegeEnabler.EnabledPrivileges">
            <summary>
            Gets the enabled privileges. Note that this might not contain all privileges specified
            to the constructor. Only the privileges actually enabled by this instance is returned.
            </summary>
            <value>The enabled privileges.</value>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.AdjustTokenPrivileges(System.IntPtr,System.Boolean,Alphaleonis.Win32.Security.NativeMethods.TokenPrivileges@,System.UInt32,Alphaleonis.Win32.Security.NativeMethods.TokenPrivileges@,System.UInt32@)">
            <summary>The AdjustTokenPrivileges function enables or disables privileges in the specified access token. Enabling or disabling privileges in an access token requires TOKEN_ADJUST_PRIVILEGES access.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            To determine whether the function adjusted all of the specified privileges, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.LookupPrivilegeDisplayName(System.String,System.String,System.Text.StringBuilder@,System.UInt32@,System.UInt32@)">
            <summary>The LookupPrivilegeDisplayName function retrieves the display name that represents a specified privilege.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.LookupPrivilegeValue(System.String,System.String,Alphaleonis.Win32.Security.NativeMethods.Luid@)">
            <summary>The LookupPrivilegeValue function retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetFileSecurity(System.String,Alphaleonis.Win32.Security.NativeMethods.SecurityInformation,System.Runtime.InteropServices.SafeHandle,System.UInt32,System.UInt32@)">
            <summary>The GetFileSecurity function obtains specified information about the security of a file or directory.
            The information obtained is constrained by the caller's access rights and privileges.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityInfo(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Security.NativeMethods.ResourceType,Alphaleonis.Win32.Security.NativeMethods.SecurityInformation,System.IntPtr@,System.IntPtr@,System.IntPtr@,System.IntPtr@,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@)">
            <summary>The GetSecurityInfo function retrieves a copy of the security descriptor for an object specified by a handle.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.SetSecurityInfo(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Security.NativeMethods.ResourceType,Alphaleonis.Win32.Security.NativeMethods.SecurityInformation,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>The SetSecurityInfo function sets specified security information in the security descriptor of a specified object. 
            The caller identifies the object by a handle.</summary>
            <returns>
            If the function succeeds, the function returns ERROR_SUCCESS.
            If the function fails, it returns a nonzero error code defined in WinError.h.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.SetNamedSecurityInfo(System.String,Alphaleonis.Win32.Security.NativeMethods.ResourceType,Alphaleonis.Win32.Security.NativeMethods.SecurityInformation,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>The SetNamedSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by name.</summary>
            <returns>
            If the function succeeds, the function returns ERROR_SUCCESS.
            If the function fails, it returns a nonzero error code defined in WinError.h.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorDacl(System.Runtime.InteropServices.SafeHandle,System.Boolean@,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorDacl function retrieves a pointer to the discretionary access control list (DACL) in a specified security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorSacl(System.Runtime.InteropServices.SafeHandle,System.Boolean@,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorSacl function retrieves a pointer to the system access control list (SACL) in a specified security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorGroup(System.Runtime.InteropServices.SafeHandle,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorGroup function retrieves the primary group information from a security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorControl(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Security.NativeMethods.SecurityDescriptorControl@,System.UInt32@)">
            <summary>The GetSecurityDescriptorControl function retrieves a security descriptor control and revision information.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorOwner(System.Runtime.InteropServices.SafeHandle,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorOwner function retrieves the owner information from a security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorLength(System.Runtime.InteropServices.SafeHandle)">
            <summary>The GetSecurityDescriptorLength function returns the length, in bytes, of a structurally valid security descriptor. The length includes the length of all associated structures.</summary>
            <returns>
            If the function succeeds, the function returns the length, in bytes, of the SECURITY_DESCRIPTOR structure.
            If the SECURITY_DESCRIPTOR structure is not valid, the return value is undefined.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.LocalFree(System.IntPtr)">
            <summary>Frees the specified local memory object and invalidates its handle.</summary>
            <returns>
            If the function succeeds, the return value is NULL.
            If the function fails, the return value is equal to a handle to the local memory object. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Note  The local functions have greater overhead and provide fewer features than other memory management functions.
            New applications should use the heap functions unless documentation states that a local function should be used.
            For more information, see Global and Local Functions.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetAccessControlInternal(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Unified method GetAccessControlInternal() to get/set an <see cref="T:System.Security.AccessControl.ObjectSecurity"/> for a particular directory or file.</summary>
            <param name="isFolder"><c>true</c> indicates a folder object, <c>false</c> indicates a file object.</param>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the directory's or file's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>An <see cref="T:System.Security.AccessControl.ObjectSecurity"/> object that encapsulates the access control rules for the directory or file described by the <paramref name="path"/> parameter. </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.SetAccessControlInternal(System.String,System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.ObjectSecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Unified method SetAccessControlInternal() applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> FileSecurity object to the specified file.</summary>
            <param name="path">A file to add or remove access control list (ACL) entries from. This parameter may be <see langword="null"/>.</param>
            <param name="handle">A handle to add or remove access control list (ACL) entries from. This parameter may be <see langword="null"/>.</param>
            <param name="objectSecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> or <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation">
            <summary>The SecurityInformation (SECURITY_INFORMATION) data type identifies the object-related security information being set or queried.
            This security information includes:
              The owner of an object;
              The primary group of an object;
              The discretionary access control list (DACL) of an object;
              The system access control list (SACL) of an object;
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.None">
            <summary>No SecurityInformation used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.Owner">
            <summary>Include the owner.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.Group">
            <summary>Include the primary group.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.Dacl">
            <summary>Include the discretionary access control list (DACL).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.Sacl">
            <summary>Include the system access control list (SACL).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.Label">
            <summary>Include the mandatory integrity label access control entry (ACE).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.Attribute">
            <summary>Include the attribute information of the SACL.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.Scope">
            <summary>Include the central access policy (CAP) identifier of the SACL.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.UnprotectedSacl">
            <summary>The SACL inherits ACEs from the parent object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.UnprotectedDacl">
            <summary>The DACL inherits ACEs from the parent object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.ProtectedSacl">
            <summary>The SACL cannot inherit ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.SecurityInformation.ProtectedDacl">
            <summary>The DACL cannot inherit access control entries (ACEs).</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.NativeMethods.ResourceType">
            <summary>The ResourceType (SE_OBJECT_TYPE) enumeration contains values that correspond to the types of Windows objects that support security.
            The functions, such as GetSecurityInfo and SetSecurityInfo, that set and retrieve the security information of an object, use these values to indicate the type of object.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.UnknownObjectType">
            <summary>Unknown object type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.FileObject">
            <summary>Indicates a file or directory. The name string that identifies a file or directory object can be in one of the following formats:
              A relative path, such as FileName.dat or ..\FileName
              An absolute path, such as FileName.dat, C:\DirectoryName\FileName.dat, or G:\RemoteDirectoryName\FileName.dat.
              A UNC name, such as \\ComputerName\ShareName\FileName.dat.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.Service">
            <summary>Indicates a Windows service. A service object can be a local service, such as ServiceName, or a remote service, such as \\ComputerName\ServiceName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.Printer">
            <summary>Indicates a printer. A printer object can be a local printer, such as PrinterName, or a remote printer, such as \\ComputerName\PrinterName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.RegistryKey">
            <summary>Indicates a registry key. A registry key object can be in the local registry, such as CLASSES_ROOT\SomePath or in a remote registry, such as \\ComputerName\CLASSES_ROOT\SomePath.
            The names of registry keys must use the following literal strings to identify the predefined registry keys: "CLASSES_ROOT", "CURRENT_USER", "MACHINE", and "USERS".
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.LmShare">
            <summary>Indicates a network share. A share object can be local, such as ShareName, or remote, such as \\ComputerName\ShareName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.KernelObject">
            <summary>Indicates a local kernel object. The GetSecurityInfo and SetSecurityInfo functions support all types of kernel objects.
            The GetNamedSecurityInfo and SetNamedSecurityInfo functions work only with the following kernel objects: semaphore, event, mutex, waitable timer, and file mapping.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.WindowObject">
            <summary>Indicates a window station or desktop object on the local computer. You cannot use GetNamedSecurityInfo and SetNamedSecurityInfo with these objects because the names of window stations or desktops are not unique.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.DsObject">
            <summary>Indicates a directory service object or a property set or property of a directory service object.
            The name string for a directory service object must be in X.500 form, for example: CN=SomeObject,OU=ou2,OU=ou1,DC=DomainName,DC=CompanyName,DC=com,O=internet</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.DsObjectAll">
            <summary>Indicates a directory service object and all of its property sets and properties.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.ProviderDefinedObject">
            <summary>Indicates a provider-defined object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.WmiGuidObject">
            <summary>Indicates a WMI object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.NativeMethods.ResourceType.RegistryWow6432Key">
            <summary>Indicates an object for a registry entry under WOW64.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator">
            <summary>Enumerator used to enumerate file system entries (i.e. files and directories). </summary>
            <remarks>The enumerator can only be used to enumerate through the items once, and cannot be reset.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> class.
            </summary>
            <param name="searchString">A search string, the path which has wildcard characters,
             for example, an asterisk (*) or a question mark (?).</param>
            <remarks>Note that no validation is done whether or not the path specified in searchString actually exists when
            the enumerator is constructed. This instead occurs during the first call to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> class.
            </summary>
            <param name="searchString">The directory or searchString, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <param name="directoriesOnly">if set to <c>true</c> enumerates only directories.</param>
            <remarks>Note that no validation is done whether or not the searchString actually exists when
            the enumerator is constructed. This instead occurs during the first call
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for enumeration as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="searchString">The directory or searchString, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <remarks><para>Note that no validation is done whether or not the searchString actually exists when
            the enumerator is constructed. This instead occurs during the first call
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext"/>.</para>
            <para>If <paramref name="transaction"/> is <see langword="null"/>, this constructor is equivalent
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(System.String)"/>, leading to non-transacted call.</para></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/> for
            enumeration as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="searchString">The directory or searchString, and the file name, which can include
            wildcard characters, for example, an asterisk (*) or a question mark (?).</param>
            <param name="directoriesOnly">if set to <c>true</c> enumerate only directories.</param>
            <remarks><para>Note that no validation is done whether or not the searchString actually exists when
            the enumerator is constructed. This instead occurs during the first call
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext"/>.</para>
            	<para>If <paramref name="transaction"/> is <see langword="null"/>, this constructor is equivalent
            to <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.#ctor(System.String)"/>, leading to non-transacted call.</para></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.Filter">
            <summary>Filters the current and parent folders WIN32 notation
            (<see cref="F:Alphaleonis.Win32.Filesystem.Path.CurrentDirectoryPrefix"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.ParentDirectoryPrefix"/>).
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.MoveNext">
            <summary>Advances the enumerator to the next file system entry matching the specified pattern.</summary>
            <returns>
            	<see langword="true"/> if the enumerator was successfully advanced to the next element; 
            	<see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.Reset">
            <summary>
            This method is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">always.</exception>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.Current">
            <summary>
            Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> representing the file system entry
            at the current position of the enumerator.
            </summary>
            <value>the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> representing the file system entry
            at the current position of the enumerator.</value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator.OnlyFolders">
            <summary>
            Gets or sets a value indicating whether to enumerate only folders.
            </summary>
            <value><c>true</c> if only folders should be enumerated; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo">
            <summary>
            Contains information about files in the specified directory.    
            </summary>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(System.String,System.IO.FileShare)"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileIndex">
            <summary>
            The byte offset of the file within the parent directory. 
            This member is undefined for file systems, such as NTFS, in which the position of a file within the parent directory is not fixed 
            and can be changed at any time to maintain sort order.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.CreationTime">
            <summary>
            The time that the file was created.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastAccessTime">
            <summary>
            The time that the file was last accessed.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastWriteTime">
            <summary>
            The time that the file was last written to.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ChangeTime">
            <summary>
            The time that the file was last changed.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.EndOfFile">
            <summary>
            The absolute new end-of-file position as a byte offset from the start of the file to the end of the file. 
            Because this value is zero-based, it actually refers to the first free byte in the file. In other words, <b>EndOfFile</b> is the offset to 
            the byte that immediately follows the last valid byte in the file.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.AllocationSize">
            <summary>
            The number of bytes that are allocated for the file. This value is usually a multiple of the sector or cluster size of the underlying physical device.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileAttributes">
            <summary>
            The file attributes.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ExtendedAttributesSize">
            <summary>
            The size of the extended attributes for the file.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ShortName">
            <summary>
            The short 8.3 file naming convention (for example, FILENAME.TXT) name of the file.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileId">
            <summary>
            The file ID.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.Privilege">
            <summary>
            Represents a privilege for an access token. The privileges available on the local machine are available as 
            static instances from this class. To create a <see cref="T:Alphaleonis.Win32.Security.Privilege"/> representing a privilege on another system,
            use the constructor specifying a system name together with one of these static instances.
            </summary>
            <seealso cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.AssignPrimaryToken">
            <summary>
            Required to assign the primary token of a process. User Right: Replace a process-level token.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Audit">
            <summary>
            Required to generate audit-log entries. Give this privilege to secure servers. User Right: Generate security audits.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Backup">
            <summary>
            Required to perform backup operations. This privilege causes the system to grant all read access control to any file, regardless of the access control list (ACL) specified for the file. Any access request other than read is still evaluated with the ACL. User Right: Back up files and directories.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ChangeNotify">
            <summary>
            Required to receive notifications of changes to files or directories. This privilege also causes the system to skip all traversal access checks. It is enabled by default for all users. User Right: Bypass traverse checking.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateGlobal">
            <summary>
            Required to create named file mapping objects in the global namespace during Terminal Services sessions. This privilege is enabled by default for administrators, services, and the local system account. User Right: Create global objects.
            </summary>
            <remarks>Windows XP/2000:  This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreatePagefile">
            <summary>
            Required to create a paging file. User Right: Create a pagefile.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreatePermanent">
            <summary>
            Required to create a permanent object. User Right: Create permanent shared objects.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateSymbolicLink">
            <summary>
            Required to create a symbolic link. User Right: Create symbolic links.
            </summary>           
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateToken">
            <summary>
            Required to create a primary token. User Right: Create a token object.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Debug">
            <summary>
            Required to debug and adjust the memory of a process owned by another account. User Right: Debug programs.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.EnableDelegation">
            <summary>
            Required to mark user and computer accounts as trusted for delegation. User Right: Enable computer and user accounts to be trusted for delegation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Impersonate">
            <summary>
            Required to impersonate. User Right: Impersonate a client after authentication.
            </summary>
            <remarks>Windows XP/2000:  This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseBasePriority">
            <summary>
            Required to increase the base priority of a process. User Right: Increase scheduling priority.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseQuota">
            <summary>
            Required to increase the quota assigned to a process. User Right: Adjust memory quotas for a process.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseWorkingSet">
            <summary>
            Required to allocate more memory for applications that run in the context of users. User Right: Increase a process working set.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.LoadDriver">
            <summary>
            Required to load or unload a device driver. User Right: Load and unload device drivers.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.LockMemory">
            <summary>
            Required to lock physical pages in memory. User Right: Lock pages in memory.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.MachineAccount">
            <summary>
            Required to create a computer account. User Right: Add workstations to domain.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ManageVolume">
            <summary>
            Required to enable volume management privileges. User Right: Manage the files on a volume.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ProfileSingleProcess">
            <summary>
            Required to gather profiling information for a single process. User Right: Profile single process.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Relabel">
            <summary>
            Required to modify the mandatory integrity level of an object. User Right: Modify an object label.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.RemoteShutdown">
            <summary>
            Required to shut down a system using a network request. User Right: Force shutdown from a remote system.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Restore">
            <summary>
            Required to perform restore operations. This privilege causes the system to grant all write access control to any file, regardless of the ACL specified for the file. Any access request other than write is still evaluated with the ACL. Additionally, this privilege enables you to set any valid user or group SID as the owner of a file. User Right: Restore files and directories.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Security">
            <summary>
            Required to perform a number of security-related functions, such as controlling and viewing audit messages. This privilege identifies its holder as a security operator. User Right: Manage auditing and security log.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Shutdown">
            <summary>
            Required to shut down a local system. User Right: Shut down the system.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SyncAgent">
            <summary>
            Required for a domain controller to use the LDAP directory synchronization services. This privilege enables the holder to read all objects and properties in the directory, regardless of the protection on the objects and properties. By default, it is assigned to the Administrator and LocalSystem accounts on domain controllers. User Right: Synchronize directory service data.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemEnvironment">
            <summary>
            Required to modify the nonvolatile RAM of systems that use this type of memory to store configuration information. User Right: Modify firmware environment values.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemProfile">
            <summary>
            Required to gather profiling information for the entire system. User Right: Profile system performance.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemTime">
            <summary>
            Required to modify the system time. User Right: Change the system time.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TakeOwnership">
            <summary>
            Required to take ownership of an object without being granted discretionary access. This privilege allows the owner value to be set only to those values that the holder may legitimately assign as the owner of an object. User Right: Take ownership of files or other objects.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Tcb">
            <summary>
            This privilege identifies its holder as part of the trusted computer base. Some trusted protected subsystems are granted this privilege. User Right: Act as part of the operating system.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TimeZone">
            <summary>
            Required to adjust the time zone associated with the computer's internal clock. User Right: Change the time zone.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TrustedCredManAccess">
            <summary>
            Required to access Credential Manager as a trusted caller. User Right: Access Credential Manager as a trusted caller.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Undock">
            <summary>
            Required to undock a laptop. User Right: Remove computer from docking station.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.UnsolicitedInput">
            <summary>
            Required to read unsolicited input from a terminal device. User Right: Not applicable.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.#ctor(System.String,Alphaleonis.Win32.Security.Privilege)">
            <summary>
            Create a new <see cref="T:Alphaleonis.Win32.Security.Privilege"/> representing the specified privilege on the specified system.
            </summary>
            <param name="systemName">Name of the system.</param>
            <param name="privilege">The privilege to copy the privilege name from.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.LookupDisplayName">
            <summary>
            Retrieves the display name that represents this privilege.
            </summary>
            <returns>The display name that represents this privilege.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.LookupLuid">
            <summary>
            Retrieves the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates).
            </summary>
            <returns>the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.Equals(Alphaleonis.Win32.Security.Privilege)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.ToString">
            <summary>
            Returns the system name for this privilege.
            </summary>
            <remarks>This is equivalent to <see cref="P:Alphaleonis.Win32.Security.Privilege.Name"/>.</remarks>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.Privilege"/> class, representing a privilege
            with the specified name on the local system.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Security.Privilege.Name">
            <summary>
            Gets the system name identifying this privilege.
            </summary>
            <value>The system name identifying this privilege.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.RemoteNameInfo">
            <summary>
            The RemoteNameInfo structure contains path and name information for a network resource.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.RemoteNameInfo.UniversalName">
            <summary>
            Network share name string that identifies a network resource.
            A UNC path identifies a network resource in an unambiguous, computer-independent manner.
            You can pass the path to processes on other computers, allowing those processes to obtain access to the network resource.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.RemoteNameInfo.ConnectionName">
            <summary>
            Name of a network connection.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.RemoteNameInfo.RemainingPath">
            <summary>
            If you append the string to the local device string, you can pass the resulting string to functions that require a drive-based path.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision">
            <summary>
            The collection of values that <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler"/> should return in case of traversal failure.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision.Skip">
            <summary>
            Skip the file or directory causing this error.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision.Retry">
            <summary>
            Retry the operation that caused this error.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision.Abort">
            <summary>
            Abort the entire operation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision.Suppress">
            <summary>
            Skip the file or directory causing this error and suppress any exceptions of 
            this type for the remaining entries.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle">
            <summary>
            Represents a wrapper class for a handle used by the FindFirstFile/FindNextFile methods of the Win32 API
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">if set to <c>true</c> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.IllegalPathException">
            <summary>
            The exception that is thrown when a pathname or filename is illegal.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus">
            <summary>
            Represents the encryption status of the specified file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Encryptable">
            <summary>The file can be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Encrypted">
            <summary>The file is encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.SystemFile">
            <summary>The file is a system file. System files cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.RootDirectory">
            <summary>The file is a root directory. Root directories cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.SystemDirectory">
            <summary>The file is a system directory. System directories cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Unknown">
            <summary>The encryption status is unknown. The file may be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.NoFilesystemSupport">
            <summary>The file system does not support file encryption.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.UserDisallowed">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.ReadOnly">
            <summary>The file is a read-only file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine">
            <summary>
            Callback used by MoveFile and CopyFile to report progress about the
            operation.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyProgressResult">
            <summary>
            The <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> function should return one of the following values.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressResult.Continue">
            <summary>
            Continue the copy operation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressResult.Cancel">
            <summary>
            Cancel the copy operation and delete the destination file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressResult.Stop">
            <summary>
            Stop the copy operation. It can be restarted at a later time.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressResult.Quiet">
            <summary>
            Continue the copy operation, but stop invoking <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> to report progress.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileMapProtections">
            <summary>
            Used by Win32 API CreateFileMapping()
            </summary>
            <remarks>
            FileMapping enum.
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa366537%28v=vs.85%29.aspx
            Memory Protection Constants.
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa366786%28v=vs.85%29.aspx
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageNoAccess">
            <summary>
            PAGE_NOACCESS
            Disables all access to the committed region of pages. An attempt to read from, write to, or execute the committed region results in an access violation.
            </summary>
            <remarks>
            This flag is not supported by the CreateFileMapping function.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageReadOnly">
            <summary>
            PAGE_READONLY
            Allows views to be mapped for read-only or copy-on-write access. An attempt to write to a specific region results in an access violation.
            The file handle that the hFile parameter specifies must be created with the GENERIC_READ access right.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageReadWrite">
            <summary>
            PAGE_READWRITE
            Allows views to be mapped for read-only, copy-on-write, or read/write access.
            The file handle that the hFile parameter specifies must be created with the GENERIC_READ and GENERIC_WRITE access rights.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageWriteCopy">
            <summary>
            PAGE_WRITECOPY
            Allows views to be mapped for read-only or copy-on-write access. This value is equivalent to PAGE_READONLY.
            The file handle that the hFile parameter specifies must be created with the GENERIC_READ access right.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageExecute">
            <summary>
            PAGE_EXECUTE
            Enables execute access to the committed region of pages. An attempt to read from or write to the committed region results in an access violation.
            </summary>
            <remarks>
            This flag is not supported by the CreateFileMapping function.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageExecuteRead">
            <summary>
            PAGE_EXECUTE_READ
            Allows views to be mapped for read-only, copy-on-write, or execute access.
            The file handle specified by the hFile parameter must be created with the GENERIC_READ and GENERIC_EXECUTE access rights.
            </summary>
            <remarks>
            Windows Server 2003 and Windows XP:  This value is not available until Windows XP with SP2 and Windows Server 2003 with SP1.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageExecuteReadWrite">
            <summary>
            PAGE_EXECUTE_READWRITE
            Allows views to be mapped for read-only, copy-on-write, read/write, or execute access.
            The file handle that the hFile parameter specifies must be created with the GENERIC_READ, GENERIC_WRITE, and GENERIC_EXECUTE access rights. 
            </summary>
            <remarks>
            Windows Server 2003 and Windows XP:  This value is not available until Windows XP with SP2 and Windows Server 2003 with SP1.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageExecuteWriteCopy">
            <summary>
            PAGE_EXECUTE_WRITECOPY
            Enables execute, read-only, or copy-on-write access to a mapped view of a file mapping object.
            An attempt to write to a committed copy-on-write page results in a private copy of the page being made for the process.
            The private page is marked as PAGE_EXECUTE_READWRITE, and the change is written to the new page.
            This flag is not supported by the VirtualAlloc or VirtualAllocEx functions. 
            </summary>
            <remarks>
            This flag is not supported by the VirtualAlloc or VirtualAllocEx functions. 
            </remarks>
            <remarks>
            Windows Vista, Windows Server 2003, and Windows XP:  This attribute is not supported by the CreateFileMapping function until
            Windows Vista with SP1 and Windows Server 2008.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageGuard">
            <summary>
            PAGE_GUARD
            Pages in the region become guard pages. Any attempt to access a guard page causes the system to raise a
            STATUS_GUARD_PAGE_VIOLATION exception and turn off the guard page status. Guard pages thus act as a one-time access alarm.
            For more information, see Creating Guard Pages.
            When an access attempt leads the system to turn off guard page status, the underlying page protection takes over.
            If a guard page exception occurs during a system service, the service typically returns a failure status indicator.
            This value cannot be used with PAGE_NOACCESS.
            </summary>
            <remarks>
            This flag is not supported by the CreateFileMapping function.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageNoCache">
            <summary>
            PAGE_NOCACHE
            Sets all pages to be non-cachable. Applications should not use this attribute except when explicitly required for a device.
            Using the interlocked functions with memory that is mapped with SEC_NOCACHE can result in an EXCEPTION_ILLEGAL_INSTRUCTION exception.
            The PAGE_NOCACHE flag cannot be used with the PAGE_GUARD, PAGE_NOACCESS, or PAGE_WRITECOMBINE flags.
            The PAGE_NOCACHE flag can be used only when allocating private memory with the VirtualAlloc, VirtualAllocEx, or VirtualAllocExNuma functions.
            To enable non-cached memory access for shared memory, specify the SEC_NOCACHE flag when calling the CreateFileMapping function.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.PageWriteCombine">
            <summary>
            PAGE_WRITECOMBINE
            Sets all pages to be write-combined.
            Applications should not use this attribute except when explicitly required for a device.
            Using the interlocked functions with memory that is mapped as write-combined can result in an EXCEPTION_ILLEGAL_INSTRUCTION exception.
            The PAGE_WRITECOMBINE flag cannot be specified with the PAGE_NOACCESS, PAGE_GUARD, and PAGE_NOCACHE flags.
            The PAGE_WRITECOMBINE flag can be used only when allocating private memory with the VirtualAlloc, VirtualAllocEx, or VirtualAllocExNuma functions.
            To enable write-combined memory access for shared memory, specify the SEC_WRITECOMBINE flag when calling the CreateFileMapping function.
            </summary>
            <remarks>
            Windows Server 2003 and Windows XP:  This value is not available until Windows XP with SP2 and Windows Server 2003 with SP1.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.SectionFile">
            <summary>
            SEC_FILE
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.SectionCommit">
            <summary>
            SEC_COMMIT
            If the file mapping object is backed by the operating system paging file (the hfile parameter is INVALID_HANDLE_VALUE),
            specifies that when a view of the file is mapped into a process address space, the entire range of pages is committed rather than reserved.
            The system must have enough committable pages to hold the entire mapping. Otherwise, CreateFileMapping fails.
            This attribute has no effect for file mapping objects that are backed by executable image files or data files (the hfile parameter is a handle to a file).
            SEC_COMMIT cannot be combined with SEC_RESERVE.
            If no attribute is specified, SEC_COMMIT is assumed.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.SectionImage">
            <summary>
            SEC_IMAGE
            Specifies that the file that the hFile parameter specifies is an executable image file.
            The SEC_IMAGE attribute must be combined with a page protection value such as PAGE_READONLY.
            However, this page protection value has no effect on views of the executable image file.
            Page protection for views of an executable image file is determined by the executable file itself.
            No other attributes are valid with SEC_IMAGE.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.SectionProtectedImage">
            <summary>
            SEC_PROTECTED_IMAGE
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.SectionLargePages">
            <summary>
            SEC_LARGE_PAGES
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.SectionNoCache">
            <summary>
            SEC_NOCACHE
            Sets all pages to be non-cachable.
            Applications should not use this attribute except when explicitly required for a device.
            Using the interlocked functions with memory that is mapped with SEC_NOCACHE can result
            in an EXCEPTION_ILLEGAL_INSTRUCTION exception.
            SEC_NOCACHE requires either the SEC_RESERVE or SEC_COMMIT attribute to be set.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.SectionReserve">
            <summary>
            SEC_RESERVE
            If the file mapping object is backed by the operating system paging file (the hfile parameter is INVALID_HANDLE_VALUE),
            specifies that when a view of the file is mapped into a process address space, the entire range of pages is reserved
            for later use by the process rather than committed. Reserved pages can be committed in subsequent calls to the
            VirtualAlloc function. After the pages are committed, they cannot be freed or decommitted with the VirtualFree function.
            This attribute has no effect for file mapping objects that are backed by executable image files or data files (the hfile parameter is a handle to a file).
            SEC_RESERVE cannot be combined with SEC_COMMIT.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapProtections.SectionWriteCombine">
            <summary>
            SEC_WRITECOMBINE
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileMapAccess">
            <summary>
            Used by Win32 API MapViewOfFile()
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapAccess.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapAccess.Copy">
            <summary>
            FILE_MAP_COPY
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapAccess.Write">
            <summary>
            FILE_MAP_WRITE
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapAccess.Read">
            <summary>
            FILE_MAP_READ
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapAccess.AllAccess">
            <summary>
            FILE_MAP_ALL_ACCESS
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileMapAccess.Execute">
            <summary>
            FILE_MAP_EXECUTE
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FinalPathFormats">
            <summary>
            Used by Win32 API GetFinalPathNameByHandle()
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa364962%28v=vs.85%29.aspx
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.FileNameNormalized">
            <summary>
            Return the normalized drive name. This is the default.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameDos">
            <summary>
            Return the path with the drive letter. This is the default.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameGuid">
            <summary>
            Return the path with a volume GUID path instead of the drive name.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameNT">
            <summary>
            Return the path with the volume device path.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameNone">
            <summary>
            Return the path with no drive information.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.FileNameOpened">
            <summary>
            Return the opened file name (not normalized).
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileInformationClass">
            <summary>
            FILE_INFO_BY_HANDLE_CLASS enumeration.
            Identifies the type of file information that GetFileInformationByHandleEx should retrieve or SetFileInformationByHandle should set.
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa364228%28v=vs.85%29.aspx
            <remarks>
            Some file information classes are valid only for use with GetFileInformationByHandleEx. Others are valid only for use with
            SetFileInformationByHandle. Where neither function is mentioned, the information class is valid with both functions.
            </remarks>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileBasicInfo">
            <summary>
            FILE_BASIC_INFO structure
            Contains the basic information for a file. Used for file handles.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileStandardInfo">
            <summary>
            FILE_STANDARD_INFO structure
            Receives extended information for the file. Used for file handles. Use only when calling GetFileInformationByHandleEx.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileNameInfo">
            <summary>
            FILE_NAME_INFO structure
            Receives the file name. Used for any handles. Use only when calling GetFileInformationByHandleEx.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileRenameInfo">
            <summary>
            FILE_RENAME_INFO structure
            Contains the name to which the file should be renamed. Use only when calling SetFileInformationByHandle.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileDispositionInfo">
            <summary>
            FILE_DISPOSITION_INFO structure
            Indicates whether a file should be deleted. Used for any handles. Use only when calling SetFileInformationByHandle.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileAllocationInfo">
            <summary>
            FILE_ALLOCATION_INFO structure
            Contains the total number of bytes that should be allocated for a file. This structure is used when calling the SetFileInformationByHandle function.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileEndOfFileInfo">
            <summary>
            FILE_END_OF_FILE_INFO structure
            Contains the specified value to which the end of the file should be set. Used for file handles. Use only when calling SetFileInformationByHandle.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileStreamInfo">
            <summary>
            FILE_STREAM_INFO structure
            Receives file stream information for the specified file. Used for any handles. Use only when calling GetFileInformationByHandleEx.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileCompressionInfo">
            <summary>
            FILE_COMPRESSION_INFO structure
            Receives file compression information. Used for any handles. Use only when calling GetFileInformationByHandleEx.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileAttributeTagInfo">
            <summary>
            FILE_ATTRIBUTE_TAG_INFO structure
            Receives the requested file attribute information. Used for any handles. Use only when calling GetFileInformationByHandleEx.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileIdBothDirectoryInfo">
            <summary>
            FILE_ID_BOTH_DIR_INFO structure
            Contains information about files in the specified directory. Used for directory handles. Use only when calling GetFileInformationByHandleEx.
            The number of files that are returned for each call to GetFileInformationByHandleEx depends on the size of the buffer that is passed to the function.
            Any subsequent calls to GetFileInformationByHandleEx on the same handle will resume the enumeration operation after the last file is returned.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileIdBothDirectoryRestartInfo">
            <summary>
            FILE_ID_BOTH_DIR_INFO structure
            Contains information about files in the specified directory. Used for directory handles. Use only when calling GetFileInformationByHandleEx.
            The number of files that are returned for each call to GetFileInformationByHandleEx depends on the size of the buffer that is passed to the function.
            Any subsequent calls to GetFileInformationByHandleEx on the same handle will resume the enumeration operation after the last file is returned.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileIoPriorityHintInfo">
            <summary>
            FILE_IO_PRIORITY_HINT_INFO structure
            Specifies the priority hint for a file I/O operation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileRemoteProtocolInfo">
            <summary>
            FILE_REMOTE_PROTOCOL_INFO structure
            Contains file remote protocol information.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileFullDirectoryInfo">
            <summary>
            FILE_FULL_DIR_INFO structure
            [This documentation is preliminary and is subject to change.]
            Contains directory information for a file. This structure is returned from the GetFileInformationByHandleEx
            function when FileFullDirectoryInfo or FileFullDirectoryRestartInfo is passed in the FileInformationClass parameter. 
            </summary>
            <remarks>
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported before Windows Developer Preview and Windows Server Developer Preview
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileFullDirectoryRestartInfo">
            <summary>
            FILE_FULL_DIR_INFO structure
            [This documentation is preliminary and is subject to change.]
            Contains directory information for a file. This structure is returned from the GetFileInformationByHandleEx
            function when FileFullDirectoryInfo or FileFullDirectoryRestartInfo is passed in the FileInformationClass parameter. 
            </summary>
            <remarks>
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported before Windows Developer Preview and Windows Server Developer Preview
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileStorageInfo">
            <summary>
            FILE_STORAGE_INFO structure
            [This documentation is preliminary and is subject to change.]
            Contains directory information for a file. This structure is returned from the GetFileInformationByHandleEx
            function when FileStorageInfo is passed in the FileInformationClass parameter.
            </summary>
            <remarks>
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported before Windows Developer Preview and Windows Server Developer Preview
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.FileAlignmentInfo">
            <summary>
            FILE_ALIGNMENT_INFO structure
            [This documentation is preliminary and is subject to change.]
            Contains alignment information for a file. This structure is returned from the GetFileInformationByHandleEx
            function when FileAlignmentInfo is passed in the FileInformationClass parameter.
            </summary>
            <remarks>
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported before Windows Developer Preview and Windows Server Developer Preview
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileInformationClass.MaximumFileInfoByHandlesClass">
            <summary>
            This value is used for validation. Supported values are less than this value.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DriveInfo">
            <summary>
            Provides access to information on a local or remote drive.
            </summary>
            <remarks>
            This class models a drive and provides methods and properties to query for drive information.
            Use DriveInfo to determine what drives are available, and what type of drives they are.
            You can also query to determine the capacity and available free space on the drive.
            </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended">
            <summary>
             This class combines the Win32 API's GetDiskFreeSpaceEx and GetDiskFreeSpace values.
            </summary>
            <remarks>2012-02-17: Yomodo; Added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.#ctor(System.String)">
            <summary>
            Initializes a DiskSpaceInfoExtended class.
            </summary>
            <param name="rootPath"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
            <remarks>A trailing backslash is required and will be added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.op_Equality(Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended,Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended)">
            <summary>
            Implements the operator ==
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.op_Inequality(Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended,Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended)">
            <summary>
            Implements the operator !=
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.Equals(Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.RootPathName">
            <summary>
            Gets the name of a drive, such as C:\ or E:\
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.FreeBytesAvailable">
            <summary>
            The total number of free bytes on a disk that are available to the user who is associated with the calling thread.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.TotalNumberOfBytes">
            <summary>
            The total number of bytes on a disk that are available to the user who is associated with the calling thread.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.TotalNumberOfFreeBytes">
            <summary>
            The total number of free bytes on a disk.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.SectorsPerCluster">
            <summary>
            The number of sectors per cluster.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.BytesPerSector">
            <summary>
            The number of bytes per sector.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.NumberOfFreeClusters">
            <summary>
            The total number of free clusters on the disk that are available to the user who is associated with the calling thread.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfoExtended.TotalNumberOfClusters">
            <summary>
            The total number of clusters on the disk that are available to the user who is associated with the calling thread.
            If per-user disk quotas are in use, this value may be less than the total number of clusters on the disk.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.#ctor(System.String)">
            <summary>Exposes routines for exploring a local or remote drive.</summary>
            <param name="driveName">A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a valid network share in the format: \\server\share</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDrives">
            <summary>
            Retrieves the drive names of all logical drives and network shares, on a computer.
            </summary>
            <returns>
            An <see langref="array"/> of type <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> that represents the logical drives and network shares, on a computer.
            </returns>
            <remarks>
            This method retrieves all logical drive names and network shares on a computer. You can use this information to iterate through the array
            and obtain information on the drives using other <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> methods and properties. Use the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady"/> property to test
            whether a drive is ready because using this method on a drive that is not ready will throw a <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDrives(System.Boolean)">
            <summary>Retrieves the drive names of all logical drives and network shares, on a computer.</summary>
            <returns>An enumerable <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> object that represents the logical drives and network shares, on a computer.</returns>
            <remarks>
            This method retrieves all logical drive names and network shares on a computer. You can use this information to iterate through the array
            and obtain information on the drives using other <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> methods and properties. Use the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady"/> property to test
            whether a drive is ready because using this method on a drive that is not ready will throw a <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDrives(System.Boolean,System.Boolean)">
            <summary>Retrieves the drive names of all logical drives and network shares, on a computer.</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <returns>An enumerable <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> object that represents the logical drives and network shares, on a computer.</returns>
            <remarks>
            This method retrieves all logical drive names and network shares on a computer. You can use this information to iterate through the array
            and obtain information on the drives using other <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> methods and properties. Use the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady"/> property to test
            whether a drive is ready because using this method on a drive that is not ready will throw a <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDrives(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Retrieves the drive names of all logical drives and network shares, on a computer.</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <param name="removeDirectorySeparator">Remove the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> from the logical drive name.</param>
            <returns>An enumerable <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> object that represents the logical drives and network shares, on a computer.</returns>
            <remarks>
            This method retrieves all logical drive names and network shares on a computer. You can use this information to iterate through the array
            and obtain information on the drives using other <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> methods and properties. Use the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady"/> property to test
            whether a drive is ready because using this method on a drive that is not ready will throw a <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">
            Another object to compare to.
            </param>
            <returns>
            true if the specified Object is equal to the current Object; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current Object.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.ToString">
            <summary>
            Returns a drive name as a string.
            </summary>
            <returns>
            The name of the drive.
            </returns>
            <remarks>
            This method returns the Name property.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.op_Equality(Alphaleonis.Win32.Filesystem.DriveInfo,Alphaleonis.Win32.Filesystem.DriveInfo)">
            <summary>
            Implements the operator ==
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.op_Inequality(Alphaleonis.Win32.Filesystem.DriveInfo,Alphaleonis.Win32.Filesystem.DriveInfo)">
            <summary>
            Implements the operator !=
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.AvailableFreeSpace">
            <summary>Indicates the amount of available free space on a drive.</summary>
            <returns>The amount of free space available on the drive, in bytes.</returns>
            <remarks>
            This property indicates the amount of free space available on the drive. Note that this number may
            be different from  the TotalFreeSpace number because this property takes into account disk quotas.
            The .NET return value is of type <see langref="long"/>, AlphaFS uses type <see lang="ulong"/> instead.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DriveFormat">
            <summary>Gets the name of the file system, such as NTFS or FAT32.</summary>
            <remarks>This property lazy loads.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DriveType">
            <summary>Gets the drive type.</summary>
            <returns>One of the DriveType values.</returns>
            <remarks>
            The DriveType property indicates whether a drive is any of: CDRom, Fixed, Unknown, Network, NoRootDirectory,
            Ram, Removable, or Unknown. Values are listed in the DriveType enumeration.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady">
            <summary>Gets a value indicating whether a drive is ready.</summary>
            <returns>true if the drive is ready; false if the drive is not ready.</returns>
            <remarks>
            IsReady indicates whether a drive is ready. For example, it indicates whether a CD is in a CD drive or whether
            a removable storage device is ready for read/write operations. If you do not test whether a drive is ready, and
            it is not ready, querying the drive using DriveInfo will raise an IOException.
            
            Do not rely on IsReady to avoid catching exceptions from other members such as TotalSize, TotalFreeSpace, and DriveFormat.
            Between the time that your code checks IsReady and then accesses one of the other properties
            (even if the access occurs immediately after the check), a drive may have been disconnected or a disk may have been removed.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.Name">
            <summary>Gets the name of a drive.</summary>
            <returns>The name of the drive.</returns>
            <remarks>This property is the name assigned to the drive, such as C:\ or E:\.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.RootDirectory">
            <summary>Gets the root directory of a drive.</summary>
            <returns>A DirectoryInfo object that contains the root directory of the drive.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.TotalFreeSpace">
            <summary>Gets the total amount of free space available on a drive.</summary>
            <returns>The total free space available on a drive, in bytes.</returns>
            <exception cref="T:System.IO.DriveNotFoundException">(.NET 4) The drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <remarks>
            This property indicates the total amount of free space available on the drive, not just what is available to the current user.
            The .NET return value is of type <see langref="long"/>, AlphaFS uses type <see lang="ulong"/> instead.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.TotalSize">
            <summary>Gets the total size of storage space on a drive.</summary>
            <returns>The total size of the drive, in bytes.</returns>
            <exception cref="T:System.IO.DriveNotFoundException">(.NET 4) The drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <remarks>
            This property indicates the total size of the drive in bytes, not just what is available to the current user.
            The .NET return value is of type <see langref="long"/>, AlphaFS uses type <see lang="ulong"/> instead.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.VolumeLabel">
            <summary>Gets or sets the volume label of a drive.</summary>
            <returns>The volume label.</returns>
            <exception cref="T:System.IO.DriveNotFoundException">(.NET 4) The drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            The label length is determined by the operating system. For example, NTFS allows a volume label
            to be up to 32 characters long. Note that null is a valid VolumeLabel.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.AvailableFreeSpacePercent">
            <summary>Indicates the amount of available free space on a drive, formatted as percentage.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.AvailableFreeSpaceUnitSize">
            <summary>Indicates the amount of available free space on a drive, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.BytesPerSectorUnitSize">
            <summary>The number of bytes per sector, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.ClusterSize">
            <summary>Returns the Clusters size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.ClusterSizeUnitSize">
            <summary>Returns the Clusters size, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsDosDeviceSubstitute">
            <summary>If true, this drive is a SUBST.EXE / DefineDosDevice drive mapping.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsUnc">
            <summary>If true, this drive is a unc path.</summary>
            <remarks>
            Only retrieve this information if we're dealing with a real network share mapping.
            Depending on the discussion feedback, this might change at some point in time.
            http://alphafs.codeplex.com/discussions/316583
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsVolume">
            <summary>Determines whether the specified volume name is a defined volume on the current computer.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DosDeviceName">
            <summary>The MS-DOS device name.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.RemoteNameInfo">
            <summary>Gets the unc path to a drive.</summary>
            <returns>A RemoteNameInfo object that contains the unc path info of the drive.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.TotalSizeUnitSize">
            <summary>The total number of bytes on a disk that are available to the user who is associated with the calling thread, , formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.UsedSpacePercent">
            <summary>Indicates the amount of used space on a drive, formatted as percentage.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.UsedSpaceUnitSize">
            <summary>Indicates the amount of used space on a drive, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.UseMebiSuffix">
            <summary>true  = suffix with "MiB", false = suffix with "MB" (default)</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.UsePercentSuffix">
            <summary>true = suffix with "%"</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.VolumeInfo">
            <summary>Contains information about a file-system volume.</summary>
            <returns>A VolumeInfo object that contains file-system volume information of the drive.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.VolumeMountPoint">
            <summary>Gets the Volume Mount Point of a drive.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationExceptionHandler">
            <summary>
            Callback delegate used by some of the Directory methods to obtain a <see cref="T:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision"/> of what to do in case of enumeration traversal failure.
            </summary>
            <param name="path">The path of failed directory of file</param>
            <param name="exception">The exception that occurred during operation</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.EnumerationExceptionDecision"/></returns>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_NOT_ACTIVE">
            <summary>
            The requested operation was made in the context of a transaction that is no longer active.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_REQUEST_NOT_VALID">
            <summary>
            The requested operation is not valid on the Transaction object in its current state.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTIONAL_CONFLICT">
            <summary>
            The function attempted to use a name that is reserved for use by another transaction.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE">
            <summary>
            The remote server or share does not support transacted file operations.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceIo.CompressionEnable(System.String,System.Boolean)">
            <summary>Sets the compression state of a file or directory on a volume whose file system supports per-file and per-directory compression.</summary>
            <param name="path">A path that describes a folder or file to compress or decompress.</param>
            <param name="compress"><c>true</c> = compress, <c>false</c> = decompress</param>
            <returns>If the function succeeds, <c>true</c>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceIo.CompressionEnable(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Sets the compression state of a file or directory on a volume whose file system supports per-file and per-directory compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a folder or file to compress or decompress.</param>
            <param name="compress"><c>true</c> = compress, <c>false</c> = decompress</param>
            <returns>If the function succeeds, <c>true</c>, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ChangeNativeErrorMode">
            <summary>
            Controls whether the system will handle the specified types of serious errors or whether the process will handle them.
            </summary>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
            <remarks>
            Not yet implemented:
            Windows 7, callers should favor SetThreadErrorMode over SetErrorMode since it is less disruptive to the normal behavior of the system.
            </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ErrorModes">
            <summary>
            Enum for struct ChangeNativeErrorMode.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileType">
            <summary>
            Retrieves the file type of the specified file.
            Used by GetFileType() function.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.None">
            <summary>
            Either the type of the specified file is unknown, or the function failed.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.DiskFile">
            <summary>
            The specified file is a disk file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.CharacterFile">
            <summary>
            The specified file is a character file, typically an LPT device or a console.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.Pipe">
            <summary>
            The specified file is a socket, a named pipe, or an anonymous pipe.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileType.Remote">
            <summary>
            The specified file is a remote file.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException">
            <summary>
            The function attempted to use a name that is reserved for use by another transaction.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.MoveOptions">
            <summary>The move options for a file move operation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.ReplaceExisting">
            <summary>If the destination file name already exists, the function replaces its contents with the contents of the source file.</summary>
            <remark>This value cannot be used if either source or destination names a directory.</remark>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed">
            <summary>If the file is to be moved to a different volume, the function simulates the move by using the CopyFile and DeleteFile functions.</summary>
            <remarks>This value cannot be used with <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot">
            <summary>The system does not move the file until the operating system is restarted. The system moves the file immediately after AUTOCHK is executed,
            but before creating any paging files. Consequently, this parameter enables the function to delete paging files from previous startups.
            This value can only be used if the process is in the context of a user who belongs to the administrators group or the LocalSystem account.
            </summary>
            <remarks>This value cannot be used with <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.WriteThrough">
            <summary>The function does not return until the file has actually been moved on the disk.
            Setting this value guarantees that a move performed as a copy and delete operation is flushed 
            to disk before the function returns. The flush occurs at the end of the copy operation.
            </summary>
            <remarks>This value has no effect if <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/> is set.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.CreateHardlink">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.FailIfNotTrackable">
            <summary>The function fails if the source file is a link source, but the file cannot be tracked after the move. This situation can occur if the destination is a volume formatted with the FAT file system.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException">
            <summary>
            The remote server or share does not support transacted file operations.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget">
            <summary>
            Indicates whether the link target is a file or directory.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.File">
            <summary>
            The link target is a file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.Directory">
            <summary>
            The link target is a directory.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.File">
            <summary>
            Provides static methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.
            As opposed to the corresponding <see cref="T:System.IO.File"/> class, this class supports the use of extended length unicode paths, such as
            <c>\\?\Volume{xxxxxxxx-xxxx-...}\autoexec.bat</c>. In addition, support for transacted file operation is provided.
            (See also <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/>).
            </summary>
            <remarks>Note that no methods in this class perform any validation of the supplied paths. They are passed as is to the corresponding
            native kernel functions, meaning that invalid paths may result in exceptions of a type other than the expected for a certain operation.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.File.DefaultBufferSize">
            <summary>
            Default type buffer size used for reading and writing files.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.File.DefaultEncoding">
            <summary>
            Default type of Encoding used for reading and writing files.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(System.String,System.String,System.Text.Encoding[])">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file.
            If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to. </param>
            <param name="contents">The string to append to the file. </param>
            <param name="encoding">The character encoding to use, default is UTF-8</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding[])">
            <summary>
            (Transacted) Opens a file, appends the specified string to the file, and then closes the file.
            If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use, default is UTF-8</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(System.String,System.Text.Encoding[])">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.</summary>
            <param name="path">The path to the file to append to.</param>
            <param name="encoding">The character encoding to use, default is UTF-8</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding[])">
            <summary>(Transacted) Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <param name="encoding">The character encoding to use, default is UTF-8</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String)">
            <summary>Copies an existing file to a new file.</summary>
            <param name="sourcePath">The file to copy.</param>
            <param name="destinationPath">The name of the destination file. This cannot be a directory or an existing file.</param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,System.Boolean)">
            <summary>Copies an existing file to a new file.</summary>
            <param name="sourcePath">The file to copy.</param>
            <param name="destinationPath">The name of the destination file. This cannot be a directory or an existing file.</param>
            <param name="overwrite">(Optional, default: false) <c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean)">
            <summary>Copies an existing file to a new file.</summary>
            <param name="sourcePath">The name of an existing file.</param>
            <param name="destinationPath">The name of the new file.</param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object,System.Boolean)">
            <summary>Copies an existing file to a new file, notifying the application of its progress through a callback function.</summary>
            <param name="sourcePath">The name of an existing file. </param>
            <param name="destinationPath">The name of the new file. </param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <param name="progressRoutine">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>(Transacted) Copies an existing file to a new file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The file to copy.</param>
            <param name="destinationPath">The name of the destination file. This cannot be a directory or an existing file.</param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean)">
            <summary>(Transacted) Copies an existing file to a new file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The file to copy.</param>
            <param name="destinationPath">The name of the destination file. This cannot be a directory or an existing file.</param>
            <param name="overwrite"><c>true</c> if the destination file can be overwritten; otherwise, <c>false</c>.</param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean)">
            <summary>(Transacted) Copies an existing file to a new file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The name of an existing file.</param>
            <param name="destinationPath">The name of the new file.</param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object,System.Boolean)">
            <summary>(Transacted) Copies an existing file to a new file, notifying the application of its progress through a callback function.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The name of an existing file. </param>
            <param name="destinationPath">The name of the new file. </param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <param name="progressRoutine">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object,System.Boolean)">
            <summary>Unified method CopyInternal() to copy a Non-/Transacted file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The name of an existing file. </param>
            <param name="destinationPath">The name of the new file. </param>
            <param name="copyMode">Flags that specify how the file is to be copied.</param>
            <param name="progressRoutine">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String)">
            <overloads>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </overloads>
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourcePath">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <remarks>This method works across disk volumes, and it does not throw an exception if the source and destination are
            the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you
            get an IOException. You cannot use the Move method to overwrite an existing file.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>
            Moves a file or directory, including its children.
            </summary>
            <param name="sourcePath"><para>The name of the existing file or directory on the local computer.</para>
            <para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destinationPath">
            <para>The new name of the file or directory on the local computer.</para>
            <para>When moving a file, <paramref name="destinationPath"/> can be on a different file system or volume.
            If <paramref name="destinationPath"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            <para>When moving a directory, <paramref name="sourcePath"/> and <paramref name="destinationPath"/> must be on the same drive. </para>
            </param>
            <param name="options">The move options.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>
            Moves a file or directory, including its children. You can provide a callback function that receives
            progress notifications.
            </summary>
            <param name="sourcePath"><para>The name of the existing file or directory on the local computer.</para>
            <para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destinationPath">
            <para>The new name of the file or directory on the local computer.</para>
            <para>When moving a file, <paramref name="destinationPath"/> can be on a different file system or volume.
            If <paramref name="destinationPath"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            <para>When moving a directory, <paramref name="sourcePath"/> and <paramref name="destinationPath"/> must be on the same drive. </para>
            </param>
            <param name="options">The move options.</param>
            <param name="progressRoutine">A <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function that is called each time another
            portion of the file has been moved. The callback function can be useful if you provide a user interface that displays
            the progress of the operation. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">An argument to be passed to the <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function. This parameter can be <see langword="null"/>.</param>
            <returns><c>true</c> if the file was completely moved, <c>false</c> if the operation was aborted.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Moves a specified file to a new location as part of a transaction, providing the option to specify a new file name.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <remarks>This method works across disk volumes, and it does not throw an exception if the source and destination are
            the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you
            get an IOException. You cannot use the Move method to overwrite an existing file.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>
            Moves a file or directory  as part of a transaction, including its children.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath"><para>The name of the existing file or directory on the local computer.</para>
            	<para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destinationPath"><para>The new name of the file or directory on the local computer.</para>
            	<para>When moving a file, <paramref name="destinationPath"/> can be on a different file system or volume.
            If <paramref name="destinationPath"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            	<para>When moving a directory, <paramref name="sourcePath"/> and <paramref name="destinationPath"/> must be on the same drive. </para></param>
            <param name="options">The move options.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>
            Moves a file or directory as part of a transaction, including its children. You can provide a callback function that receives
            progress notifications.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath"><para>The name of the existing file or directory on the local computer.</para>
            	<para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destinationPath"><para>The new name of the file or directory on the local computer.</para>
            	<para>When moving a file, <paramref name="destinationPath"/> can be on a different file system or volume.
            If <paramref name="destinationPath"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            	<para>When moving a directory, <paramref name="sourcePath"/> and <paramref name="destinationPath"/> must be on the same drive. </para></param>
            <param name="options">The move options.</param>
            <param name="progressRoutine">A <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function that is called each time another
            portion of the file has been moved. The callback function can be useful if you provide a user interface that displays
            the progress of the operation. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">An argument to be passed to the <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function. This parameter can be <see langword="null"/>.</param>
            <returns>
            	<c>true</c> if the file was completely moved, <c>false</c> if the operation was aborted.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.MoveInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Unified method MoveInternal() to move a Non-/Transacted file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath"><para>The name of the existing file or directory on the local computer.</para>
            	<para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destinationPath"><para>The new name of the file or directory on the local computer.</para>
            	<para>When moving a file, <paramref name="destinationPath"/> can be on a different file system or volume.
            If <paramref name="destinationPath"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            	<para>When moving a directory, <paramref name="sourcePath"/> and <paramref name="destinationPath"/> must be on the same drive. </para></param>
            <param name="options">The move options.</param>
            <param name="progressRoutine">A <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function that is called each time another
            portion of the file has been moved. The callback function can be useful if you provide a user interface that displays
            the progress of the operation. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">An argument to be passed to the <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function. This parameter can be <see langword="null"/>.</param>
            <returns>
            	<c>true</c> if the file was completely moved, <c>false</c> if the operation was aborted.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32)">
            <summary>
            Creates or overwrites a file in the specified path, specifying a buffer size.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,Alphaleonis.Win32.Filesystem.FileAttributeConstants)">
            <summary>
            Creates or overwrites a file in the specified path, specifying a buffer size and a <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> value.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">One of the <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> values that describes how to create or overwrite the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Security.AccessControl.FileSecurity)">
            <summary>
            Creates or overwrites a file in the specified path, specifying a buffer size and a <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> value and a <see cref="T:System.Security.AccessControl.FileSecurity"/> value.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">One of the <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> values that describes how to create or overwrite the file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Security.AccessControl.FileSecurity,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Creates or overwrites a file in the specified path, specifying a buffer size and advanced options:
            <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/>, <see cref="T:System.Security.AccessControl.FileSecurity"/>, <see cref="T:System.IO.FileMode"/>, <see cref="T:System.IO.FileAccess"/>, <see cref="T:System.IO.FileShare"/>.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">The <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> additional advanced options to create a file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <param name="mode">The <see cref="T:System.IO.FileMode"/> option gives you more precise control over how you want to create a file.</param>
            <param name="access">The <see cref="T:System.IO.FileAccess"/> allow you additionaly specify to default redwrite capability - just write, bypassing any cache.</param>
            <param name="share">The <see cref="T:System.IO.FileShare"/> option controls how you would like to share created file with other requesters.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            (Transacted) Creates or overwrites a file in the specified path.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32)">
            <summary>
            (Transacted) Creates or overwrites a file in the specified path, specifying a buffer size.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,Alphaleonis.Win32.Filesystem.FileAttributeConstants)">
            <summary>
            (Transacted) Creates or overwrites a file in the specified path, specifying a buffer size and a <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> value.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">One of the <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> values that describes how to create or overwrite the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Security.AccessControl.FileSecurity,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            (Transacted) Creates or overwrites a file in the specified path, specifying a buffer size and advanced options:
            <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/>, <see cref="T:System.Security.AccessControl.FileSecurity"/>, <see cref="T:System.IO.FileMode"/>, <see cref="T:System.IO.FileAccess"/>, <see cref="T:System.IO.FileShare"/>.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">The <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> additional advanced options to create a file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <param name="mode">The <see cref="T:System.IO.FileMode"/> option gives you more precise control over how you want to create a file.</param>
            <param name="access">The <see cref="T:System.IO.FileAccess"/> allow you additionaly specify to default redwrite capability - just write, bypassing any cache.</param>
            <param name="share">The <see cref="T:System.IO.FileShare"/> option controls how you would like to share created file with other requesters.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateFileInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Security.AccessControl.FileSecurity,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>
            Unified method CreateFileInternal() to create a Non-/Transacted file.
            Creates or overwrites a file in the specified path, specifying several options.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <param name="share"> </param>
            <param name="attributes">One of the <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> values that describes how to create or overwrite the file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <param name="mode"> </param>
            <param name="rights"> </param>
            <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(System.String)">
            <summary>Creates or opens a file for writing UTF-8 encoded text.</summary>
            <param name="path">The file to be opened for writing. </param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>(Transacted) Creates or opens a file for writing UTF-8 encoded text.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(System.String)">
            <summary>Deletes the specified file.</summary>
            <param name="path">The name of the file to be deleted.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>An exception is not thrown if the specified file does not exist.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified file.</summary>
            <param name="path">The name of the file to be deleted.</param>
            <param name="forceOverrideReadOnly">If set to <c>true</c> overrides the read only attribute of the file.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>An exception is not thrown if the specified file does not exist.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>(Transacted) Deletes the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>An exception is not thrown if the specified file does not exist.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>(Transacted) Deletes the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted.</param>
            <param name="forceOverrideReadOnly">If set to <c>true</c> overrides the read only attribute of the file.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>An exception is not thrown if the specified file does not exist.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.DeleteInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>
            Unified method DeleteInternal() to delete a Non-/Transacted file.
            Creates or overwrites a file in the specified path, specifying several options.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted.</param>
            <param name="forceOverrideReadOnly">If set to <c>true</c> overrides the read only attribute of the file.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>An exception is not thrown if the specified file does not exist.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Compress(System.String)">
            <summary>Compresses a file using NTFS compression.</summary>
            <param name="path">A path that describes a file to compress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decompress(System.String)">
            <summary>Decompresses an NTFS compressed file.</summary>
            <param name="path">A path that describes a file to decompress.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSize(System.String)">
            <summary>
            Retrieves the actual number of bytes of disk storage used to store a specified file.
            </summary>
            <remarks>
            If the file is located on a volume that
            supports compression and the file is compressed, the value obtained is the compressed size of the specified file.
            If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse
            size of the specified file.
            </remarks>
            <param name="path"><para>The name of the file.</para>
            	<para>Do not specify the name of a file on a nonseeking device, such as a pipe or a communications device, as its file size has no meaning.</para></param>
            <returns>
            the actual number of bytes of disk storage used to store the specified file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSize(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Retrieves the actual number of bytes of disk storage used to store a specified file as part of a transaction. If the file is located on a volume that
            supports compression and the file is compressed, the value obtained is the compressed size of the specified file.
            If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse
            size of the specified file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path"><para>The name of the file.</para>
            	<para>Do not specify the name of a file on a nonseeking device, such as a pipe or a communications device, as its file size has no meaning.</para></param>
            <returns>
            the actual number of bytes of disk storage used to store the specified file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decrypt(System.String)">
            <summary>Decrypts a file that was encrypted by the current account using the Encrypt method.</summary>
            <param name="path">A path that describes a file to decrypt.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Encrypt(System.String)">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
            <param name="path">A path that describes a file to encrypt.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetEncryptionStatus(System.String)">
            <summary>Retrieves the encryption status of the specified file.</summary>
            <param name="path">The name of the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus"/> of the specified <paramref name="path"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Exists(System.String)">
            <summary>Determines whether the specified file exists.</summary>
            <param name="path">The file to check. Note that this files may contain wildcards, such as '*'.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>Note that this files may contain wildcards, such as '*'</remarks>
            <remarks>Return value is <see langword="true"/> if the caller has the required permissions and path contains the name of an existing file; otherwise, <see langword="false"/>.</remarks>
            <remarks>This method also returns <see langword="false"/> if path is NULL reference (Nothing in Visual Basic), an invalid path, or a zero-length string.</remarks>
            <remarks>If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <see langword="false"/> regardless of the existence of path.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Exists(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>(Transacted) Determines whether the specified file exists.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to check. Note that this files may contain wildcards, such as '*'.</param>
            <returns>If the function succeeds, true, otherwise false.</returns>
            <remarks>Note that this files may contain wildcards, such as '*'</remarks>
            <remarks>Return value is <see langword="true"/> if the caller has the required permissions and path contains the name of an existing file; otherwise, <see langword="false"/>.</remarks>
            <remarks>This method also returns <see langword="false"/> if path is NULL reference (Nothing in Visual Basic), an invalid path, or a zero-length string.</remarks>
            <remarks>If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <see langword="false"/> regardless of the existence of path.</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.FindExecutable(System.String)">
            <summary>
            Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.
            </summary>
            <returns>A path <see cref="T:System.String"/> to the found executable, or null when not found or in case of errror.</returns>
            <remarks>Use FindExecutable() for documents.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.FindExecutable(System.String,System.String)">
            <summary>
            Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.
            This is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu.
            </summary>
            <param name="file">The file to search for, this file should be a document.</param>
            <param name="path">A path to the default directory, This value can be null.</param>
            <returns>A path <see cref="T:System.String"/> to the found executable, or null when not found or in case of errror.</returns>
            <remarks>Use FindExecutable() for documents.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> FileSecurity object to the specified file.</summary>
            <remarks>Note that unlike <see cref="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/> this method does <b>not</b> automatically
            determine what parts of the specified <see cref="T:System.Security.AccessControl.FileSecurity"/> instance has been modified. Instead, the
            apply to <paramref name="path"/>.</remarks>
            <param name="path">A file to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A  <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <remarks>Note that unlike <see cref="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/> this method does <b>not</b> automatically
            determine what parts of the specified <see cref="T:System.Security.AccessControl.DirectorySecurity"/> instance has been modified. Instead, the
            parameter <paramref name="includeSections"/> is used to specify what entries from <paramref name="fileSecurity"/> to apply to <paramref name="path"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary>
            <param name="path">The path to the file. </param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>(Transacted) Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the attributes for a file or directory.</summary>
            <param name="path">The name of the file whose attributes are to be set. </param>
            <param name="fileAttributes">The file attributes to set for the file. Note that all other values override <see cref="F:System.IO.FileAttributes.Normal"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileAttributes)">
            <summary>Sets the attributes for a file or directory as a transacted operation.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file whose attributes are to be set.</param>
            <param name="fileAttributes">The file attributes to set for the file. Note that all other values override <see cref="F:System.IO.FileAttributes.Normal"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributesInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileAttributes)">
            <summary>Unified method SetAttributesInternal() to set the attributes for a Non-/Transacted file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file whose attributes are to be set.</param>
            <param name="fileAttributes">The file attributes to set for the file. Note that all other values override <see cref="F:System.IO.FileAttributes.Normal"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTime(System.String)">
            <overloads>
            Returns the creation date and time of the specified file or directory.
            </overloads>
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtc(System.String)">
            <overloads>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.
            </overloads>
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTime(System.String)">
            <overloads>
            Returns the date and time the specified file or directory was last accessed.
            </overloads>
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtc(System.String)">
            <overloads>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.
            </overloads>
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTime(System.String)">
             <overloads>
            Returns the date and time the specified file or directory was last written to.
             </overloads>
             <summary>
            Returns the date and time the specified file or directory was last written to.
             </summary>
             <param name="path">The path.</param>
             <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtc(System.String)">
            <overloads>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </overloads>
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory as part of a transaction.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <param name="transaction">The transaction.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed as part of a transaction.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information. </param>
            <param name="transaction">The transaction.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed as part of a transaction.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
             <summary>
            Returns the date and time the specified file or directory was last written to as part of a transaction.
             </summary>
             <param name="path">The path.</param>
             <param name="transaction">The transaction.</param>
             <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to as part of a transaction.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information. </param>
            <param name="transaction">The transaction.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfo(System.String)">
            <summary>Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>(Transacted) Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfoInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method GetFileSystemEntryInfoInternal() to get a FileSystemEntryInfo from a Non-/Transacted folder/file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileInformationByHandle(System.IO.FileStream)">
            <overloads>
            Retrieves file information for the specified file.
            </overloads>
            <summary>
            Retrieves file information for the specified file.
            </summary>
            <param name="stream">A <see cref="T:System.IO.FileStream"/> connected to the open file from which to retrieve the information.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.ByHandleFileInfo"/> object containing the requested information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Please use the <see cref="M:Alphaleonis.Win32.Filesystem.File.GetFileInformationByHandle(System.IO.FileStream)"/> version.
            Retrieves file information for the specified file.
            </summary>
            <param name="handle">
            A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> connected to the open file from which to retrieve the information.
            </param>
            <returns>
            A <see cref="T:Alphaleonis.Win32.Filesystem.ByHandleFileInfo"/> object containing the requested information.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileType(System.IO.FileStream)">
            <summary>
            Retrieves the file type of the specified stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.FileStream"/> connected to the open file from which to retrieve the information.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileType"/> enum object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileType(System.String)">
            <summary>
            Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.
            </summary>
            <param name="path">The path to the file system object which should not exceed <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MAX_PATH"/>. Both absolute and relative paths are valid.</param>
            <returns>A string that describes the type of file, or null in case of failure or when type is unknown.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String)">
            <overloads>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path.
            </overloads>
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.
            If the file exists, and <see cref="T:System.IO.IOException"/> is thrown.
            </summary>
            <param name="path">The file to open.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode)">
            <overloads>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path.
            </overloads>
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access and the specified sharing option.
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.FileAttributeConstants)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist,
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="attributes">Advanced options for this file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.FileAttributeConstants)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist,
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="attributes">Advanced options for this file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenBackupRead(System.String)">
            <summary>
            Opens the specified file for reading purposes bypassing security attributes.
            This method is simpler to use then BackupFileStream to read only file's data stream.
            </summary>
            <param name="path">The file path to open.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the read-only mode and sharing options.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens a FileStream on the specified path with read/write access as part of a transaction.
            If the file exists, and <see cref="T:System.IO.IOException"/> is thrown.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode)">
            <summary>
            Opens a FileStream on the specified path with read/write access as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path as part of a transaction, with the specified mode and access.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>
            An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies whether a file is created if one does not exist,
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.FileAttributeConstants)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies whether a file is created if one does not exist,
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="attributes">Advanced <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> options for this file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.FileAttributeConstants[])">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or
            read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="rights">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> value that specifies whether a file is created if one does not exist,
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="attributes">Advanced <see cref="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants"/> options for this file.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenRead(System.String)">
            <overloads>
            Opens an existing file for reading.
            </overloads>
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenRead(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens an existing file for reading as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>
            A read-only <see cref="T:System.IO.FileStream"/> on the specified path.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(System.String)">
            <overloads>
            Opens an existing UTF-8 encoded text file for reading.
            </overloads>
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A StreamReader on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A StreamReader on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWrite(System.String)">
            <overloads>
            Opens an existing file for writing.
            </overloads>
            <summary>
            Opens an existing file for writing.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with Write access.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWrite(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens an existing file for writing as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>
            An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with Write access.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.TransferTimestamps(System.String,System.String)">
            <summary>
            Transfers the time stamps for files and directories.
            </summary>
            <param name="source">The source path.</param>
            <param name="destination">The destination path.</param>
            <remarks>
            This method uses BackupSemantics flag to get Timestamp changed for folders.
            This method does not change last access time for the source file.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytes(System.String)">
            <overloads>
            Opens a binary file, reads the contents of the file into a Byte array, and then closes the file.
            </overloads>
            <summary>
            Opens a binary file, reads the contents of the file into a Byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A Byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a Byte array, and then closes the file as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>
            A Byte array containing the contents of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String)">
            <overloads>
            Opens a text file, reads all lines of the file, and then closes the file.
            </overloads>
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens a text file as part of a transaction, reads all lines of the file, and then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>
            A string array containing all lines of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>
            Opens a file as part of a transaction, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>
            A string array containing all lines of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String)">
            <overloads>
            Opens a text file, reads all lines of the file, and then closes the file.
            </overloads>
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Opens a text file as part of a transaction, reads all lines of the file, and then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>
            A string containing all lines of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>
            Opens a text file as part of a transaction, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>
            A string containing all lines of the file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.
            </summary>
            <param name="sourcePath">The name of a file that replaces the file specified by <paramref name="destinationPath"/>.</param>
            <param name="destinationPath">The name of the file being replaced.</param>
            <param name="destinationBackupPath">The name of the backup file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.
            </summary>
            <param name="sourcePath">The name of a file that replaces the file specified by <paramref name="destinationPath"/>.</param>
            <param name="destinationPath">The name of the file being replaced.</param>
            <param name="destinationBackupPath">The name of the backup file.</param>
            <param name="ignoreMetadataErrors">set to <c>true</c> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetFileTimeInternal(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Internal method for setting file times on a file.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
            <remarks>This method uses <see cref="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.BackupSemantics"/> flag to write Timestamps to folders as well.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTime(System.String,System.DateTime)">
            <overloads>
            Sets the date and time the file was created.
            </overloads>
            <summary>
            Sets the date and time the file was created.
            </summary>
            <param name="path">The file for which to set the creation date and time information. </param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtc(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </overloads>
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The file for which to set the creation date and time information. </param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTime(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in local time, that the file was last accessed.
            </overloads>
            <summary>
            Sets the date and time, in local time, that the file was last accessed.
            </summary>
            <param name="path">The file for which to set the last access date and time information. </param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.
            </overloads>
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.
            </summary>
            <param name="path">The file for which to set the last access date and time information. </param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTime(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in local time, that the file was last modified.
            </overloads>
            <summary>
            Sets the date and time, in local time, that the file was last modified.
            </summary>
            <param name="path">The file for which to set the last modification date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last modification date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <overloads>
            Sets the date and time, in coordinated universal time (UTC), that the file was last modified.
            </overloads>
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last modified.
            </summary>
            <param name="path">The file for which to set the last modification date and time information. </param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last modification date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <overloads>
            Sets all the time stamps at once.
            </overloads>
            <summary>
            Sets the time stamps at once.
            </summary>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <overloads>
            Sets all the time stamps at once in UTC.
            </overloads>
            <summary>
            Sets all the time stamps at once in UTC.
            </summary>
            <remarks>
            This method is redundant, because NTFS driver converts any dates in UTC format anyways.
            </remarks>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetFileTimeInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Internal method for setting file times on a file as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time the file was created as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in local time, that the file was last accessed.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the last access date and time information.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in coordinated universal time (UTC), that the file was last accessed.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the last access date and time information.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in local time, that the file was last modified.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the last modification date and time information.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
            Sets the date and time as part of a transaction, in coordinated universal time (UTC), that the file was last modified.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the last modification date and time information.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestamps(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time stamps at once.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sets the time stamps at once in UTC. But it's redundant, because NTFS driver converts any dates in UTC format anyways.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <param name="creationTime">The creation time.</param>
            <param name="lastAccessTime">The last access time.</param>
            <param name="lastWriteTime">The last write time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytes(System.String,System.Byte[])">
            <overloads>
            Creates a new file, writes the specified Byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </overloads>
            <summary>
            Creates a new file, writes the specified Byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Byte[])">
            <summary>
            Creates a new file as part of a transaction, writes the specified Byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[])">
            <overloads>
            Creates a new file, write the specified string array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </overloads>
            <summary>
            Creates a new file, write the specified string array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">he string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[])">
            <summary>
            Creates a new file as part of a transaction, write the specified string array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file as part of a transaction, writes the specified string array to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">he string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String)">
            <overloads>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </overloads>
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the encoding to apply to the string.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Creates a new file as part of a transaction, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file as part of a transaction, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the encoding to apply to the string.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlink(System.String,System.String)">
            <overloads>
            Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.
            </overloads>
            <summary>
            Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <exception cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException">The destination file already exists.</exception>
            <exception cref="T:System.NotSupportedException">An attempt to create a hard-link on a non-supported filesystem</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFile"/> could not be found</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlink(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
            Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="transaction">The transaction.</param>
            <exception cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException">The destination file already exists.</exception>
            <exception cref="T:System.NotSupportedException">An attempt to create a hard-link on a non-supported filesystem</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFile"/> could not be found</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLink(System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <overloads>
            Creates a symbolic link.
            </overloads>
            <summary>
            Creates a symbolic link.
            </summary>
            <param name="sourceFile">The name of the target for the symbolic link to be created.</param>
            <param name="destinationFile">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="destinationFile"/>, is a file or directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLink(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <summary>
            Creates a symbolic link as part of a transaction.
            </summary>
            <param name="sourceFile">The name of the target for the symbolic link to be created.</param>
            <param name="destinationFile">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="destinationFile"/>, is a file or directory.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfo(System.String)">
            <summary>
            Gets information about the target of a mount point or symbolic link on an NTFS file system.
            </summary>
            <param name="sourceFile">The path to the reparse point.</param>
            <returns>An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing
            information about the symbolic link or mount point pointed to by <paramref name="sourceFile"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Gets information about the target of a mount point or symbolic link on an NTFS file system as part of a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFile">The path to the reparse point.</param>
            <returns>
            An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing
            information about the symbolic link or mount point pointed to by <paramref name="sourceFile"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHardlinks(System.String)">
            <overloads>
            <summary>Enumerates all hard links to the specified file.</summary>
            </overloads>
            <summary>
            Creates an enumeration of all the hard links to the specified <paramref name="fileName"/>.
            </summary>
            <remarks><b>Required Windows Vista or later.</b></remarks>
            <param name="fileName">The name of the file.</param>
            <returns>An enumeration of all the hard links to the specified <paramref name="fileName"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHardlinks(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
            Creates an enumeration of all the hard links to the specified <paramref name="fileName"/> as part
            of the specified <paramref name="transaction"/>.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="fileName">The name of the file.</param>
            <returns>
            An enumeration of all the hard links to the specified <paramref name="fileName"/>
            </returns>
            <remarks><b>Required Windows Vista or later.</b></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateStreams(System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <param name="path">A path that describes a file.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the file specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateStreams(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> connected to the open file from which to retrieve the information.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection, of streams for the file specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the file specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateStreamsInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method EnumerateStreamsInternal() to return an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file.</param>
            <returns>An enumerable <see langref="BackupBackupStreamInfo"/> collection of streams for the file specified by path, or <see langref="null"/> on error.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfo">
            <summary>
            Represents information about free and used space on a disk.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Initializes the structure
            </summary>
            <param name="freeBytes">The free bytes available</param>
            <param name="totalBytes">The total number of bytes</param>
            <param name="totalFreeBytes">The total number of free bytes</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.op_Equality(Alphaleonis.Win32.Filesystem.DiskSpaceInfo,Alphaleonis.Win32.Filesystem.DiskSpaceInfo)">
            <summary>
            Implements the operator ==
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.op_Inequality(Alphaleonis.Win32.Filesystem.DiskSpaceInfo,Alphaleonis.Win32.Filesystem.DiskSpaceInfo)">
            <summary>
            Implements the operator !=
            </summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.FreeBytesAvailable">
            <summary>
            Gets or sets the free bytes available.
            </summary>
            <value>The free bytes available.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfBytes">
            <summary>
            Gets or sets the total number of bytes.
            </summary>
            <value>The total number of bytes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfFreeBytes">
            <summary>
            Gets or sets the total number of free bytes.
            </summary>
            <value>The total number of free bytes.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException">
            <summary>
            The transaction handle associated with this operation is not valid.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo">
            <summary>
            Represents information about a symbolic link.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo">
            <summary>
            Information about the target of a symbolic link or mount point.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.LinkTargetInfo.SubstituteName">
            <summary>
            The substitute name
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.LinkTargetInfo.PrintName">
            <summary>
            The print name
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo.LinkType">
            <summary>
            Gets the type of the link.
            </summary>
            <value>The type of the link.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle">
            <summary>IntPtr wrapper which can be used as result of Marshal.AllocHGlobal operation. Calls Marshal.FreeHGlobal when disposed or finalized.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.#ctor">
            <summary>Creates new instance with zero IntPtr</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>Copies data from a one-dimensional, managed 8-bit unsigned integer array to the unmanaged memory pointer referenced by this instance.</summary>
            <param name="source">The one-dimensional array to copy from. </param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.ReleaseHandle">
            <summary>Called when object is disposed or finalized.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ReparsePointTags">
            <summary>
            Enumeration specifying the different reparse point tags.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.None">
            <summary>
            The entry is not a reparse point
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.Hsm2">
            <summary>
            IO_REPARSE_TAG_HSM2
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.Sis">
            <summary>
            IO_REPARSE_TAG_SIS
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.Wim">
            <summary>
            IO_REPARSE_TAG_WIM
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.Csv">
            <summary>
            IO_REPARSE_TAG_CSV
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.Dfs">
            <summary>
            IO_REPARSE_TAG_DFS
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.Dfsr">
            <summary>
            IO_REPARSE_TAG_DFSR
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.Dedup">
            <summary>
            IO_REPARSE_TAG_DEDUP
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.Nfs">
            <summary>
            IO_REPARSE_TAG_NFS
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.MountPoint">
            <summary>
            IO_REPARSE_TAG_MOUNT_POINT
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.SymLink">
            <summary>
            IO_REPARSE_TAG_SYMLINK
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTags.Hsm">
            <summary>
            IO_REPARSE_TAG_HSM
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileAttributeConstants">
            <summary>Specifies how the operating system should open a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.None">
            <summary>None of the file attribute constants specified.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.ReadOnly">
            <summary>The file is read only. Applications can read the file, but cannot write to or delete it.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Hidden">
            <summary>The file is hidden. Do not include it in an ordinary directory listing.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.System">
            <summary>The file is part of or used exclusively by an operating system.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Directory">
            <summary>The handle that identifies a directory.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Archive">
            <summary>The file should be archived. Applications use this attribute to mark files for backup or removal.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Normal">
            <summary>The file does not have other attributes set. This attribute is valid only if used alone.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Temporary">
            <summary>The file is being used for temporary storage.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.SparseFile">
            <summary>A file that is a sparse file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.ReparsePoint">
            <summary>A file or directory that has an associated reparse point, or a file that is a symbolic link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Compressed">
            <summary>A file or directory that is compressed. For a file, all of the data in the file is compressed. For a directory, compression is the default for newly created files and subdirectories.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Offline">
            <summary>The data of a file is not immediately available. This attribute indicates that file data is physically moved to offline storage. This attribute is used by Remote Storage, the hierarchical storage management software. Applications should not arbitrarily change this attribute.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.NotContentIndexed">
            <summary>The file or directory is not to be indexed by the content indexing service.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Encrypted">
            <summary>The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.Encrypted"/>16384</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.IntegrityStream">
            <summary>The directory or user data stream is configured with integrity (only supported on ReFS volumes). It is not included in an ordinary directory listing. The integrity setting persists with the file if it's renamed. If a file is copied the destination file will have integrity set if either the source file or destination directory have integrity set.</summary>
            <remarks>This flag is not supported until Windows Server 2012.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.NoScrubData">
            <summary>The user data stream not to be read by the background data integrity scanner (AKA scrubber). When set on a directory it only provides inheritance. This flag is only supported on Storage Spaces and ReFS volumes. It is not included in an ordinary directory listing.</summary>
            <remarks>This flag is not supported until Windows Server 2012.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.OpenNoRecall">
            <summary>The file data is requested, but it should continue to be located in remote storage. It should not be transported back to local storage. This flag is for use by remote storage systems.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.OpenReparsePoint">
            <summary>Normal reparse point processing will not occur; an attempt to open the reparse point will be made. When a file is opened, a file handle is returned, whether or not the filter that controls the reparse point is operational. See MSDN documentation for more information.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.PosixSemantics">
            <summary>Access will occur according to POSIX rules. This includes allowing multiple files with names, differing only in case, for file systems that support that naming. Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.BackupSemantics">
            <summary>The file is being opened or created for a backup or restore operation. The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges. You must set this flag to obtain a handle to a directory. A directory handle can be passed to some functions instead of a file handle.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.DeleteOnClose">
            <summary>The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles. If there are existing open handles to a file, the call fails unless they were all opened with the <see cref="F:System.IO.FileShare.Delete"/> share mode. Subsequent open requests for the file fail, unless the <see cref="F:System.IO.FileShare.Delete"/> share mode is specified.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.DeleteOnClose"/>67108864</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.SequentialScan">
            <summary>Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.SequentialScan"/>134217728</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.RandomAccess">
            <summary>Access is intended to be random. The system can use this as a hint to optimize file caching.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.RandomAccess"/>268435456</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.NoBuffering">
            <summary>There are strict requirements for successfully working with files opened with the <see cref="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.NoBuffering"/> flag, for details see the section on "File Buffering" in the online MSDN documentation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Overlapped">
            <summary>The file or device is being opened or created for asynchronous I/O.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.Asynchronous"/>1073741824</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.Asynchronous">
            <summary>The file or device is being opened or created for asynchronous I/O.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.Asynchronous"/>1073741824</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileAttributeConstants.WriteThrough">
            <summary>Write operations will not go through any intermediate cache, they will go directly to disk.</summary>
            <remarks>Equals .NET <see cref="F:System.IO.FileOptions.WriteThrough"/>-2147483648</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyProgressCallbackReason">
            <summary>
            The reason that <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> was called.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressCallbackReason.ChunkFinished">
            <summary>
            Another part of the data file was copied.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressCallbackReason.StreamSwitch">
            <summary>
            Another stream was created and is about to be copied. This is the callback reason given when the callback routine is first invoked.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException">
            <summary>
            It is too late to perform the requested operation, since the Transaction has already been aborted.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Security.InternalPrivilegeEnabler">
            <summary>
            This object is used to enable a specific privilege for the currently running process during its lifetime. 
            It should be disposed as soon as the elevated privilege is no longer needed.
            For more information see the documentation on AdjustTokenPrivileges on MSDN.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.#ctor(Alphaleonis.Win32.Security.Privilege)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/> class and enabling the specified privilege
            for the currently running process.
            </summary>
            <param name="privilegeName">The name of the privilege.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            In this case the privilege previously enabled will be disabled.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.AdjustPrivilege(System.Boolean)">
            <summary>
            Adjusts the privilege.
            </summary>
            <param name="enable">if set to <c>true</c> the privilege will be enabled, otherwise disabled.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ByHandleFileInfo">
            <summary>
            Represents information retrieved by <see cref="M:Alphaleonis.Win32.Filesystem.File.GetFileInformationByHandle(System.IO.FileStream)"/>.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.Attributes">
            <summary>
            Gets the file attributes.
            </summary>
            <value>The file attributes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.CreationTime">
            <summary>
            Gets a <see cref="T:System.DateTime"/> structure that specified when a file or directory was created.
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure that specified when a file or directory was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.LastAccessTime">
            <summary>
            Gets a <see cref="T:System.DateTime"/> structure. 
            For a file, the structure specifies the last time that a file is read from or written to. 
            For a directory, the structure specifies when the directory is created. 
            For both files and directories, the specified date is correct, but the time of day is always set to midnight. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure that specified when a file was last written to or the directory created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.LastWriteTime">
            <summary>
            Gets a <see cref="T:System.DateTime"/> structure. 
            For a file, the structure specifies the last time that a file is written to. 
            For a directory, the structure specifies when the directory is created. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure that specified when a file was last written to or the directory created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.VolumeSerialNumber">
            <summary>
            Gets the the serial number of the volume that contains a file.
            </summary>
            <value>The serial number of the volume that contains a file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.NumberOfLinks">
            <summary>
            Gets the number of links to this file. For the FAT file system this member is always 1. For the NTFS file system, it can be more than 1.
            </summary>
            <value>The number of links to this file. </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.FileIndex">
            <summary>
            Gets the unique identifier associated with the file. The identifier and the volume serial number uniquely identify a 
            file on a single computer. To determine whether two open handles represent the same file, combine the identifier 
            and the volume serial number for each file and compare them.
            </summary>
            <value>The unique identifier of the file.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamTypes">
            <summary>The type of the data contained in the backup stream.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.None">
            <summary>This indicates an error.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.Data">
            <summary>Standard data. This corresponds to the NTFS $DATA stream type on the default (unnamed) data stream.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.ExtendedAttributesData">
            <summary>Extended attribute data. This corresponds to the NTFS $EA stream type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.SecurityData">
            <summary>Security descriptor data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.AlternateData">
            <summary>Alternative data streams. This corresponds to the NTFS $DATA stream type on a named data stream.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.Link">
            <summary>Hard link information. This corresponds to the NTFS $FILE_NAME stream type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.PropertyData">
            <summary>Property data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.ObjectId">
            <summary>Objects identifiers. This corresponds to the NTFS $OBJECT_ID stream type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.ReparseData">
            <summary>Reparse points. This corresponds to the NTFS $REPARSE_POINT stream type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.SparseBlock">
            <summary>Sparse file. This corresponds to the NTFS $DATA stream type for a sparse file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.TxfsData">
            <summary>Transactional NTFS (TxF) data stream.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException">
            <summary>
            The exception that is thrown when an attempt to create a directory or file that already exists was made.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="path">The path.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.MAX_PATH">
            <summary>
            MAX_PATH = 260
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.MAX_PATH_UNICODE">
            <summary>
            MAX_PATH_UNICODE = 32767
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.INTERNET_MAX_URL_LENGTH">
            <summary>
            INTERNET_MAX_URL_LENGTH = 2083
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UnitSizeToText``1(``0,System.Boolean[])">
            <summary>Convert a number of type T to string with UnitSize or Percentage suffixed.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PercentCalculate(System.Double,System.Double,System.Double)">
            <summary>Calculates a percentage value.</summary>
            <param name="currentValue"></param>
            <param name="minimumValue"></param>
            <param name="maximumValue"></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetErrorMode(Alphaleonis.Win32.Filesystem.ErrorModes)">
            <summary>
            Controls whether the system will handle the specified types of serious errors or whether the process will handle them.
            </summary>
            <returns>The return value is the previous state of the error-mode bit attributes.</returns>
            <remarks>
            Because the error mode is set for the entire process, you must ensure that multi-threaded applications
            do not set different error-mode attributes. Doing so can lead to inconsistent error handling.
            </remarks>
            <remarks>2012-01-07: Yomodo; Added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.HasFunction(System.String,System.String)">
            <summary>
            Functions to check if a specific Win32 API function is available to 
            differentiate between "Windows XP / Windows 2003 Server" and "Windows Vista / Windows 2008 Server" platforms.
            </summary>
            <returns>
            true if the function exists; otherwise, false. To get extended error information, call GetLastError.
            </returns>
            <remarks>2012-02-28: Yomodo; Added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
            </summary>
            <returns>
            If the function succeeds, the return value is a handle to the module.
            If the function fails, the return value is null.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <returns>
            If the function succeeds, the return value is the address of the exported function or variable.
            If the function fails, the return value is null.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.WNetGetUniversalName(System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.Int32@)">
            <summary>The WNetGetUniversalName function takes a drive-based path for a network resource and returns an information structure that contains a more universal form of the name.</summary>
            <returns>
            If the function succeeds, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.NO_ERROR"/>
            If the function fails, the return value is a system error code, <see cref="T:Alphaleonis.Win32.Win32Errors"/>
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DefineDosDevice(Alphaleonis.Win32.Filesystem.DosDeviceAttributes,System.String,System.String)">
            <summary>
            Defines, redefines, or deletes MS-DOS device names.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.QueryDosDevice(System.String,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.Int32)">
            <summary>
            Retrieves information about MS-DOS device names.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            To get extended error information, call new Win32Exception(returned int)
            If the buffer is too small, the function fails and the last error code is ERROR_INSUFFICIENT_BUFFER.
            </returns>
            <remarks>
            Windows Server 2003 and Windows XP: QueryDosDevice first searches the Local MS-DOS Device namespace for the specified device name.
            If the device name is not found, the function will then search the Global MS-DOS Device namespace.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetShortPathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves the short path form of the specified path.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetLongPathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Converts the specified path to its long form.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstVolume(System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves the name of a volume on a computer. 
            </summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to the FindNextVolume and FindVolumeClose functions.
            If the function fails to find any volumes, the return value is the INVALID_HANDLE_VALUE error code.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstVolumeMountPoint(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves the name of a mounted folder on the specified volume. 
            </summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to the FindNextVolumeMountPoint and FindVolumeMountPointClose functions.
            If the function fails to find a mounted folder on the volume, the return value is the INVALID_HANDLE_VALUE error code.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextVolume(System.Runtime.InteropServices.SafeHandle,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Continues a volume search started by a call to the FindFirstVolume function. 
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. If no matching files can be found, the GetLastError function
            returns the ERROR_NO_MORE_FILES error code. In that case, close the search with the FindVolumeClose function.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextVolumeMountPoint(System.Runtime.InteropServices.SafeHandle,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function. 
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. If no more mounted folders can be found, the GetLastError function returns the ERROR_NO_MORE_FILES error code.
            In that case, close the search with the FindVolumeMountPointClose function.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindVolumeClose(System.IntPtr)">
            <summary>
            Closes the specified volume search handle.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindVolumeMountPointClose(System.IntPtr)">
            <summary>
            Closes the specified mounted folder search handle.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumeNameForVolumeMountPoint(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves a volume GUID path for the volume that is associated with the specified volume mount point (drive letter, volume GUID path, or mounted folder).
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumePathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves the volume mount point where the specified path is mounted.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumePathNamesForVolumeName(System.String,System.Char[],System.UInt32,System.UInt32@)">
            <summary>
            Retrieves a list of drive letters and mounted folder paths for the specified volume.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            To get extended error information, call new Win32Exception(returned int)
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumeInformation(System.String,System.Text.StringBuilder,System.UInt32,System.UInt32@,System.UInt32@,Alphaleonis.Win32.Filesystem.FileSystemAttributes@,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves information about the file system and volume associated with the specified root directory.
            </summary>
            <returns>
            If all the requested information is retrieved, the return value is nonzero.
            If not all the requested information is retrieved, the return value is zero.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumeInformationByHandle(System.Runtime.InteropServices.SafeHandle,System.Text.StringBuilder,System.UInt32,System.UInt32@,System.UInt32@,Alphaleonis.Win32.Filesystem.FileSystemAttributes@,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves information about the file system and volume associated with the specified file.
            </summary>
            <returns>
            If all the requested information is retrieved, the return value is nonzero.
            If not all the requested information is retrieved, the return value is zero.
            To get extended error information, call new Win32Exception()
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeleteVolumeMountPointW(System.String)">
            <summary>
            Deletes a drive letter or mounted folder.
            </summary>
            If all the requested information is retrieved, the return value is nonzero.
            If not all the requested information is retrieved, the return value is zero.
            To get extended error information, call new Win32Exception()
            <remarks>Deleting a mounted folder does not cause the underlying directory to be deleted.
            It's not an error to attempt to unmount a volume from a volume mount point when there is no volume actually mounted at that volume mount point.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetDriveType(System.String)">
            <summary>Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.</summary>
            <returns>The return value specifies the type of drive, which can be one of the following <see cref="T:System.IO.DriveType"/> values.</returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetDiskFreeSpace(System.String,System.UInt64@,System.UInt64@,System.UInt64@,System.UInt64@)">
            <summary>Retrieves information about the specified disk, including the amount of free space on the disk.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Symbolic link behavior; if the path points to a symbolic link, the operation is performed on the target.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)">
            <summary>
            Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space,
            the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Symbolic link behavior; if the path points to a symbolic link, the operation is performed on the target.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetLogicalDrives">
            <summary>Retrieves a bitmask representing the currently available disk drives.</summary>
            <returns>
            If the function succeeds, the return value is a bitmask representing the currently available disk drives.
            Bit position 0 (the least-significant bit) is drive A, bit position 1 is drive B, bit position 2 is drive C, and so on.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathCreateFromUrl(System.String,System.Text.StringBuilder,System.UInt32@,System.UInt32)">
            <summary>Converts a file URL to a Microsoft MS-DOS path.</summary>
            <returns>Type: HRESULT
            If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathCreateFromUrlAlloc(System.String,System.Text.StringBuilder@,System.UInt32)">
            <summary>Creates a path from a file URL.</summary>
            <returns>Type: HRESULT
            If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UrlCreateFromPath(System.String,System.Text.StringBuilder,System.UInt32@,System.UInt32)">
            <summary>Converts a Microsoft MS-DOS path to a canonicalized URL.</summary>
            <returns>Type: HRESULT
            Returns S_FALSE if pszPath is already in URL format. In this case, pszPath will simply be copied to pszUrl.
            Otherwise, it returns S_OK if successful or a standard COM error value if not.
            </returns>
            <remarks>
            UrlCreateFromPath does not support extended paths. These are paths that include the extended-length path prefix "\\?\".
            </remarks>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UrlIs(System.String,Alphaleonis.Win32.Filesystem.Shell32.UrlTypes)">
            <summary>Tests whether a URL is a specified type.</summary>
            <returns>
            Type: BOOL
            For all but one of the URL types, UrlIs returns true if the URL is the specified type, or false if not.
            If UrlIs is set to <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsAppliable"/>, UrlIs will attempt to determine the URL scheme.
            If the function is able to determine a scheme, it returns true, or false otherwise.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateDirectoryW(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes)">
            <summary>
            Creates a new directory. If the underlying file system supports security on files and directories,
            the function applies a specified security descriptor to the new directory.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateDirectoryExW(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes)">
            <summary>
            Creates a new directory with the attributes of a specified template directory.
            If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory.
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateDirectoryTransactedW(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes,System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Creates a new directory as a transacted operation, with the attributes of a specified template directory.
            If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory.
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.RemoveDirectoryW(System.String)">
            <summary>
            Deletes an existing empty directory.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            RemoveDirectory removes a directory junction, even if the contents of the target are not empty; the function removes directory
            junctions regardless of the state of the target object. For more information on junctions, see Hard Links and Junctions.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.RemoveDirectoryTransacted(System.String,System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Deletes an existing empty directory as a transacted operation.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            RemoveDirectory removes a directory junction, even if the contents of the target are not empty; the function removes directory
            junctions regardless of the state of the target object. For more information on junctions, see Hard Links and Junctions.
            </remarks>
            <remarks>Minimum supported client:Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFileMapping(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes,Alphaleonis.Win32.Filesystem.FileMapProtections,System.UInt32,System.UInt32,System.String)">
            <summary>
            Creates or opens a named or unnamed file mapping object for a specified file.
            </summary>
            <returns>
            If the function succeeds, the return value is a handle to the newly created file mapping object.
            If the function fails, the return value is null.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetMappedFileName(System.IntPtr,Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Checks whether the specified address is within a memory-mapped file in the address space of the specified process.
            If so, the function returns the name of the memory-mapped file.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.MapViewOfFile(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.FileMapAccess,System.UInt32,System.UInt32,System.UIntPtr)">
            <summary>
            Maps a view of a file mapping into the address space of a calling process.
            </summary>
            <returns>
            If the function succeeds, the return value is the starting address of the mapped view.
            If the function fails, the return value is null.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UnmapViewOfFile(Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle)">
            <summary>
            Unmaps a mapped view of a file from the calling process's address space.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFinalPathNameByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Text.StringBuilder,System.UInt32,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <summary>
            Retrieves the final path for the specified file.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileType(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Retrieves the file type of the specified file.
            </summary>
            <returns>
            You can distinguish between a "valid" return of FILE_TYPE_UNKNOWN and its return due to a calling error
            (for example, passing an invalid handle to GetFileType) by calling Win32Exception().
            If the function worked properly and FILE_TYPE_UNKNOWN was returned, a call to GetLastError will return NO_ERROR.
            If the function returned FILE_TYPE_UNKNOWN due to an error in calling GetFileType, Win32Exception() will return the error code. 
            </returns>
            <remarks>
            "Don't let more than one process try to read from stdin at the same time."
            http://blogs.msdn.com/b/oldnewthing/archive/2011/12/02/10243553.aspx
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SHGetFileInfo(System.String,System.IO.FileAttributes,Alphaleonis.Win32.Filesystem.Shell32.FileInfo@,System.UInt32,Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes)">
            <summary>
            Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.
            </summary>
            <remarks>
            You should call this function from a background thread. Failure to do so could cause the UI to stop responding.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindExecutable(System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.
            This is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu.
            </summary>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.AssocQueryString(Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes,Alphaleonis.Win32.Filesystem.Shell32.AssociationString,System.String,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Searches for and retrieves a file or protocol association-related string from the registry.
            </summary>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CopyFileEx(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyProgressRoutine,System.Runtime.InteropServices.SafeHandle,System.Int32@,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>
            Copies an existing file to a new file, notifying the application of its progress through a callback function.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CopyFileTransacted(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyProgressRoutine,System.Runtime.InteropServices.SafeHandle,System.Int32@,Alphaleonis.Win32.Filesystem.CopyOptions,System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback function.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.MoveFileWithProgress(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyProgressRoutine,System.IntPtr,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>
            Moves a file or directory, including its children. You can provide a callback function that receives progress notifications.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.MoveFileTransacted(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyProgressRoutine,System.IntPtr,Alphaleonis.Win32.Filesystem.MoveOptions,System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Moves an existing file or a directory, including its children, as a transacted operation.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFile(System.String,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Runtime.InteropServices.SafeHandle)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_HANDLE"/>. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFile(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Runtime.InteropServices.SafeHandle)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_HANDLE"/>. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFile(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.IntPtr)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_HANDLE"/>. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFileTransacted(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.IntPtr)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_HANDLE"/>. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFileTransacted(System.String,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.FileAttributeConstants,System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.IntPtr)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_HANDLE"/>. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeleteFile(System.String)">
            <summary>
            Deletes an existing file.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeleteFileTransacted(System.String,System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Deletes an existing file as a transacted operation.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateHardLink(System.String,System.String,System.IntPtr)">
            <summary>
            Establishes a hard link between an existing file and a new file. 
            This function is only supported on the NTFS file system, and only for files, not directories.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateHardLinkTransacted(System.String,System.String,System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Establishes a hard link between an existing file and a new file as a transacted operation.
            This function is only supported on the NTFS file system, and only for files, not directories.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileEx(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels,Alphaleonis.Win32.Filesystem.Win32FindData@,Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps,System.IntPtr,Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags)">
            <summary>Searches a directory for a file or subdirectory with a name and attributes that match those specified.</summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to FindNextFile or FindClose, and the lpFindFileData parameter contains information about the first file or directory found.
            If the function fails or fails to locate files from the search string in the lpFileName parameter, the return value is INVALID_HANDLE_VALUE and the contents of lpFindFileData are indeterminate. To get extended error information, call the GetLastError function.
            </returns>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileTransacted(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels,Alphaleonis.Win32.Filesystem.Win32FindData@,Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps,System.IntPtr,Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags,System.Runtime.InteropServices.SafeHandle)">
            <summary>Searches a directory for a file or subdirectory with a name that matches a specific name as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to FindNextFile or FindClose, and the lpFindFileData parameter contains information about the first file or directory found.
            If the function fails or fails to locate files from the search string in the lpFileName parameter, the return value is INVALID_HANDLE_VALUE and the contents of lpFindFileData are indeterminate. To get extended error information, call the GetLastError function.
            </returns>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextFile(Alphaleonis.Win32.Filesystem.SafeFindFileHandle,Alphaleonis.Win32.Filesystem.Win32FindData@)">
            <summary>Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions.</summary>
            <returns>
            If the function succeeds, the return value is nonzero and the lpFindFileData parameter contains information about the next file or directory found.
            If the function fails, the return value is zero and the contents of lpFindFileData are indeterminate. To get extended error information, call the GetLastError function.
            If the function fails because no more matching files can be found, the GetLastError function returns ERROR_NO_MORE_FILES.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindClose(System.IntPtr)">
            <summary>Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileName(System.String,System.UInt32,System.UInt32@,System.Text.StringBuilder)">
            <summary>Creates an enumeration of all the hard links to the specified file. 
            The FindFirstFileNameW function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function.
            </summary>
            <returns>
            If the function succeeds, the return value is a search handle that can be used with the FindNextFileNameW function or closed with the FindClose function.
            If the function fails, the return value is INVALID_HANDLE_VALUE (0xffffffff). To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileNameTransacted(System.String,System.Int32,System.UInt32@,System.Text.StringBuilder,System.Runtime.InteropServices.SafeHandle)">
            <summary>Creates an enumeration of all the hard links to the specified file as a transacted operation. The function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function.</summary>
            <returns>
            If the function succeeds, the return value is a search handle that can be used with the FindNextFileNameW function or closed with the FindClose function.
            If the function fails, the return value is INVALID_HANDLE_VALUE (0xffffffff). To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextFileName(System.Runtime.InteropServices.SafeHandle,System.UInt32@,System.Text.StringBuilder)">
            <summary>Continues enumerating the hard links to a file using the handle returned by a successful call to the FindFirstFileNameW function.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            If no matching files can be found, the GetLastError function returns ERROR_HANDLE_EOF.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathFileExists(System.String)">
            <summary>Determines whether a path to a file system object such as a file or folder is valid.</summary>
            <returns>true if the file exists; otherwise, false. Call GetLastError for extended error information.</returns>
            <remarks>
            This function tests the validity of the path.
            A path specified by Universal Naming Convention (UNC) is limited to a file only; that is, \\server\share\file is permitted.
            A network share path to a server or server share is not permitted; that is, \\server or \\server\share.
            This function returns FALSE if a mounted remote drive is out of service.
            </remarks>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileAttributesEx(System.String,Alphaleonis.Win32.Filesystem.GetFileExInfoStandard,Alphaleonis.Win32.Filesystem.Win32FileAttributeData@)">
            <summary>Retrieves attributes for a specified file or directory.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            The GetFileAttributes function retrieves file system attribute information. GetFileAttributesEx can obtain other sets of file or directory attribute information.
            Currently, GetFileAttributesEx retrieves a set of standard attributes that is a superset of the file system attribute information.
            When the GetFileAttributesEx function is called on a directory that is a mounted folder, it returns the attributes of the directory, not those of
            the root directory in the volume that the mounted folder associates with the directory. To obtain the attributes of the associated volume,
            call GetVolumeNameForVolumeMountPoint to obtain the name of the associated volume. Then use the resulting name in a call to GetFileAttributesEx.
            The results are the attributes of the root directory on the associated volume.
            Symbolic link behavior: If the path points to a symbolic link, the function returns attributes for the symbolic link.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileAttributesTransacted(System.String,Alphaleonis.Win32.Filesystem.GetFileExInfoStandard,Alphaleonis.Win32.Filesystem.Win32FileAttributeData@,System.Runtime.InteropServices.SafeHandle)">
            <summary>Retrieves file system attributes for a specified file or directory as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Transacted Operations
            If a file is open for modification in a transaction, no other thread can open the file for modification until the transaction is committed.
            Conversely, if a file is open for modification outside of a transaction, no transacted thread can open the file for modification until the
            non-transacted handle is closed. If a non-transacted thread has a handle opened to modify a file, a call to GetFileAttributesTransacted for
            that file will fail with an ERROR_TRANSACTIONAL_CONFLICT error.
            </remarks>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.ReplaceFile(System.String,System.String,System.String,System.Security.AccessControl.FileSystemRights,System.IntPtr,System.IntPtr)">
            <summary>Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetFileAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the attributes for a file or directory.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetFileAttributesTransacted(System.String,System.IO.FileAttributes,System.Runtime.InteropServices.SafeHandle)">
            <summary>Sets the attributes for a file or directory as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle)">
            <summary>Sets the date and time that the specified file or directory was created, last accessed, or last modified.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileSizeEx(System.Runtime.InteropServices.SafeHandle,System.Int64@)">
            <summary>Retrieves the size of the specified file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetCompressedFileSize(System.String,System.UInt32@)">
            <summary>Retrieves the actual number of bytes of disk storage used to store a specified file.</summary>
            <returns>
            If the function succeeds, the return value is the low-order DWORD of the actual number of bytes of disk storage used to store the specified file, and if lpFileSizeHigh is non-NULL, the function puts the high-order DWORD of that actual value into the DWORD pointed to by that parameter. This is the compressed file size for compressed files, the actual file size for noncompressed files.
            If the function fails, and lpFileSizeHigh is NULL, the return value is INVALID_FILE_SIZE. To get extended error information, call GetLastError.
            If the return value is INVALID_FILE_SIZE and lpFileSizeHigh is non-NULL, an application must call GetLastError to determine whether the function has succeeded (value is NO_ERROR) or failed (value is other than NO_ERROR).
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetCompressedFileSizeTransacted(System.String,System.UInt32@,System.Runtime.InteropServices.SafeHandle)">
            <summary>Retrieves the actual number of bytes of disk storage used to store a specified file as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is the low-order DWORD of the actual number of bytes of disk storage used to store the specified file, and if lpFileSizeHigh is non-NULL, the function puts the high-order DWORD of that actual value into the DWORD pointed to by that parameter. This is the compressed file size for compressed files, the actual file size for noncompressed files.
            If the function fails, and lpFileSizeHigh is NULL, the return value is INVALID_FILE_SIZE. To get extended error information, call GetLastError.
            If the return value is INVALID_FILE_SIZE and lpFileSizeHigh is non-NULL, an application must call GetLastError to determine whether the function has succeeded (value is NO_ERROR) or failed (value is other than NO_ERROR).
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FlushFileBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Flushes the buffers of a specified file and causes all buffered data to be written to a file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.LockFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Locks the specified file for exclusive access by the calling process.</summary>
            <returns>
            If the function succeeds, the return value is nonzero (TRUE).
            If the function fails, the return value is zero (FALSE). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UnlockFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Unlocks a region in an open file. Unlocking a region enables other processes to access the region.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.ByHandleFileInfo)">
            <summary>Retrieves file information for the specified file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero and file information data is contained in the buffer pointed to by the lpFileInformation parameter.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Depending on the underlying network features of the operating system and the type of server connected to,
            the GetFileInformationByHandle function may fail, return partial information, or full information for the given file.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileInformationByHandleEx(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.FileInformationClass,System.Runtime.InteropServices.SafeHandle,System.UInt32)">
            <summary>Retrieves file information for the specified file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero and file information data is contained in the buffer pointed to by the lpFileInformation parameter.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
            <remarks>Redistributable: Windows SDK on Windows Server 2003 and Windows XP.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeviceIoControl(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.IoControlCode,System.Int16@,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptFile(System.String)">
            <summary>
            Encrypts a file or directory. All data streams in a file are encrypted. All new files created in an encrypted directory are encrypted.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            The EncryptFile function requires exclusive access to the file being encrypted, and will fail if another process is using the file.
            If the file is already encrypted, EncryptFile simply returns a nonzero value, which indicates success. If the file is compressed,
            EncryptFile will decompress the file before encrypting it. If lpFileName specifies a read-only file, the function fails and GetLastError
            returns ERROR_FILE_READ_ONLY. If lpFileName specifies a directory that contains a read-only file, the functions succeeds but the directory is not encrypted.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DecryptFile(System.String,System.UInt32)">
            <summary>
            Decrypts an encrypted file or directory.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            The DecryptFile function requires exclusive access to the file being decrypted, and will fail if another process is using the file.
            If the file is not encrypted, DecryptFile simply returns a nonzero value, which indicates success.
            If lpFileName specifies a read-only file, the function fails and GetLastError returns ERROR_FILE_READ_ONLY.
            If lpFileName specifies a directory that contains a read-only file, the functions succeeds but the directory is not decrypted.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptionDisable(System.String,System.Boolean)">
            <summary>
            Disables or enables encryption of the specified directory and the files in it.
            It does not affect encryption of subdirectories below the indicated directory. 
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            EncryptionDisable disables encryption of directories and files.
            It does not affect the visibility of files with the FILE_ATTRIBUTE_SYSTEM attribute set.
            This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=0|1"
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FileEncryptionStatus(System.String,Alphaleonis.Win32.Filesystem.FileEncryptionStatus@)">
            <summary>
            Retrieves the encryption status of the specified file.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupRead(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)">
            <summary>The BackupRead function can be used to back up a file or directory, including the security information.
            The function reads data associated with a specified file or directory into a buffer, which can then be written to the backup medium using the WriteFile function.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero, indicating that an I/O error occurred. To get extended error information, call GetLastError.
            </returns>
            <remarks>This function is not intended for use in backing up files encrypted under the Encrypted File System. Use ReadEncryptedFileRaw for that purpose.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupWrite(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)">
            <summary>The BackupWrite function can be used to restore a file or directory that was backed up using BackupRead.
            Use the ReadFile function to get a stream of data from the backup medium, then use BackupWrite to write the data to the specified file or directory.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero, indicating that an I/O error occurred. To get extended error information, call GetLastError.
            </returns>
            <remarks>This function is not intended for use in restoring files encrypted under the Encrypted File System. Use WriteEncryptedFileRaw for that purpose.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupSeek(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32@,System.UInt32@,System.IntPtr@)">
            <summary>The BackupSeek function seeks forward in a data stream initially accessed by using the BackupRead or BackupWrite function.</summary>
            <returns>
            If the function could seek the requested amount, the function returns a nonzero value.
            If the function could not seek the requested amount, the function returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Applications use the BackupSeek function to skip portions of a data stream that cause errors.
            This function does not seek across stream headers. For example, this function cannot be used to skip the stream name.
            If an application attempts to seek past the end of a substream, the function fails, the lpdwLowByteSeeked and lpdwHighByteSeeked parameters
            indicate the actual number of bytes the function seeks, and the file position is placed at the start of the next stream header.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateTransaction(Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes,System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>Creates a new transaction object.</summary>
            <returns>
            If the function succeeds, the return value is a handle to the transaction. 
            If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CommitTransaction(System.Runtime.InteropServices.SafeHandle)">
            <summary>Requests that the specified transaction be committed.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.RollbackTransaction(System.Runtime.InteropServices.SafeHandle)">
            <summary>Requests that the specified transaction be rolled back. This function is synchronous.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CloseHandle(System.IntPtr)">
            <summary>Closes an open object handle.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeviceIoControl(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Filesystem.IoControlCode,System.Runtime.InteropServices.SafeHandle,System.UInt32,System.Runtime.InteropServices.SafeHandle,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiDestroyDeviceInfoList(System.IntPtr)">
            <summary>The SetupDiDestroyDeviceInfoList function deletes a device information set and frees all associated memory.</summary>
            <returns>
            The function returns true if it is successful.
            Otherwise, it returns false and the logged error can be retrieved with a call to GetLastError.
            </returns>
            <remarks>Available in Microsoft Windows 2000 and later versions of Windows.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId">
            <summary>The Win32StreamId structure contains stream data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId.StreamId">
            <summary>Type of data.
            This member can be one of the following values:
              BACKUP_DATA            0x00000001  Standard data. This corresponds to the NTFS $DATA stream type on the default (unnamed) data stream.
              BACKUP_EA_DATA         0x00000002  Extended attribute data. This corresponds to the NTFS $EA stream type.
              BACKUP_SECURITY_DATA   0x00000003  Security descriptor data.
              BACKUP_ALTERNATE_DATA  0x00000004  Alternative data streams. This corresponds to the NTFS $DATA stream type on a named data stream.
              BACKUP_LINK            0x00000005  Hard link information. This corresponds to the NTFS $FILE_NAME stream type.
              BACKUP_PROPERTY_DATA   0x00000006  Property data.
              BACKUP_OBJECT_ID       0x00000007  Objects identifiers. This corresponds to the NTFS $OBJECT_ID stream type.
              BACKUP_REPARSE_DATA    0x00000008  Reparse points. This corresponds to the NTFS $REPARSE_POINT stream type.
              BACKUP_SPARSE_BLOCK    0x00000009  Sparse file. This corresponds to the NTFS $DATA stream type for a sparse file.
              BACKUP_TXFS_DATA       0x0000000A  Transactional NTFS (TxF) data stream. This corresponds to the NTFS $TXF_DATA stream type.
                                                 Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId.StreamAttributes">
            <summary>Attributes of data to facilitate cross-operating system transfer.
            This member can be one or more of the following values:
              STREAM_MODIFIED_WHEN_READ  0x00000001  Attribute set if the stream contains data that is modified when read. Allows the backup application to know that verification of data will fail.
              STREAM_CONTAINS_SECURITY   0x00000002  Stream contains security data (general attributes). Allows the stream to be ignored on cross-operations restore.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId.Size">
            <summary>Size of data, in bytes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId.StreamNameSize">
            <summary>Length of the name of the alternative data stream, in bytes.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes">
            <summary>Class used to represent the SECURITY_ATTRIBUES native win32 structure. It provides initialization function from an <see cref="T:System.Security.AccessControl.ObjectSecurity"/> object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SecurityAttributes.Initialize(Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@,System.Security.AccessControl.ObjectSecurity)">
            <summary>Initializes the SecurityAttributes structure from an instance of <see cref="T:System.Security.AccessControl.ObjectSecurity"/>.</summary>
            <param name="memoryHandle">A handle that will refer to the memory allocated by this object for storage of the 
            security descriptor. As long as this object is used, the memory handle should be kept alive, and afterwards it
            should be disposed as soon as possible.</param>
            <param name="securityDescriptor">The <see cref="T:System.Security.AccessControl.ObjectSecurity"/> security descriptor to assign to this object. This parameter may be <see langword="null"/>.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels">
            <summary>
            Defines values that are used with the FindFirstFileEx function to specify the information level of the returned data.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels.FindExInfoStandard">
            <summary>
            The FindFirstFileEx function retrieves a standard set of attribute information.
            The data is returned in a <see cref="T:Alphaleonis.Win32.Filesystem.Win32FindData"/> structure.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels.FindExInfoBasic">
            <summary>
            The FindFirstFileEx function does not query the short file name, improving overall enumeration speed.
            The data is returned in a <see cref="T:Alphaleonis.Win32.Filesystem.Win32FindData"/> structure, and cAlternateFileName member is always a NULL string.
            </summary>
            <remarks>This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels.FindExInfoMaxLevel">
            <summary>
            This value is used for validation. Supported values are less than this value.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps">
            <summary>
            Defines values that are used with the FindFirstFileEx function to specify the type of filtering to perform.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps.FindExSearchNameMatch">
            <summary>
            The search for a file that matches a specified file name. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps.FindExSearchLimitToDirectories">
            <summary>
            This is an advisory flag. If the file system supports directory filtering, the function searches for a file that matches
            the specified name and is also a directory. If the file system does not support directory filtering, this flag is silently ignored. 
            </summary>
            <remarks>
            The lpSearchFilter parameter of the FindFirstFileEx function must be NULL when this search value is used.
            If directory filtering is desired, this flag can be used on all file systems, but because it is an advisory flag and only affects file systems that support it,
            the application must examine the file attribute data stored in the lpFindFileData parameter of the FindFirstFileEx function to determine whether the function has returned a handle to a directory.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps.FindExSearchLimitToDevices">
            <summary>
            This filtering type is not available.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags">
            <summary>
            Additional flags that control the search.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.FindFirstExNone">
            <summary>
            No additional flags used.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.FindFirstExCaseSensitive">
            <summary>
            Searches are case-sensitive.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.FindFirstExLargeFetch">
            <summary>
            Uses a larger buffer for directory queries, which can increase performance of the find operation.
            </summary>
            <remarks>This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo">
            <summary>
            Contains information about files in the specified directory. Used for directory handles.
            Use only when calling GetFileInformationByHandleEx.
            </summary>
            <remarks>
            The number of files that are returned for each call to GetFileInformationByHandleEx depends on the size of the buffer that is passed to the function.
            Any subsequent calls to GetFileInformationByHandleEx on the same handle will resume the enumeration operation after the last file is returned.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.NextEntryOffset">
            <summary>
            The offset for the next FILE_ID_BOTH_DIR_INFO structure that is returned. Contains zero (0) if no other entries follow this one.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileIndex">
            <summary>
            The byte offset of the file within the parent directory. This member is undefined for file systems, such as NTFS,
            in which the position of a file within the parent directory is not fixed and can be changed at any time to maintain sort order.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.CreationTime">
            <summary>
            The time that the file was created.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.LastAccessTime">
            <summary>
            The time that the file was last accessed.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.LastWriteTime">
            <summary>
            The time that the file was last written to.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.ChangeTime">
            <summary>
            The time that the file was last changed.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.EndOfFile">
            <summary>
            The absolute new end-of-file position as a byte offset from the start of the file to the end of the file.
            Because this value is zero-based, it actually refers to the first free byte in the file.
            In other words, EndOfFile is the offset to the byte that immediately follows the last valid byte in the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.AllocationSize">
            <summary>
            The number of bytes that are allocated for the file.
            This value is usually a multiple of the sector or cluster size of the underlying physical device.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileAttributes">
            <summary>
            The file attributes. This member can be any valid combination of the following attributes:
              FILE_ATTRIBUTE_ARCHIVE     (0x00000020)
              FILE_ATTRIBUTE_COMPRESSED  (0x00000800)
              FILE_ATTRIBUTE_DIRECTORY   (0x00000010)
              FILE_ATTRIBUTE_HIDDEN      (0x00000002)
              FILE_ATTRIBUTE_NORMAL      (0x00000080)
              FILE_ATTRIBUTE_READONLY    (0x00000001)
              FILE_ATTRIBUTE_SYSTEM      (0x00000004)
              FILE_ATTRIBUTE_TEMPORARY   (0x00000100)
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileNameLength">
            <summary>
            The length of the file name.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.EaSize">
            <summary>
            The size of the extended attributes for the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.ShortNameLength">
            <summary>
            The length of ShortName.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.ShortName">
            <summary>
            The short 8.3 file naming convention (for example, "FILENAME.TXT") name of the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileId">
            <summary>
            The file ID.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileName">
            <summary>
            The first character of the file name string. This is followed in memory by the remainder of the string.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException">
            <summary>
            The function attempted to use a name that is reserved for use by another transaction.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32">
            <summary>
            Provides access to a file system object, using Shell32.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.PathFileExists(System.String)">
            <summary>Determines whether a path to a file system object such as a file or folder is valid.</summary>
            <param name="filePath">A string of maximum length <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MAX_PATH"/> that contains the full path of the object to verify.</param>
            <returns><c>true</c> if the file exists; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetAssociation(System.String)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <param name="filePath">A path to the file.</param>
            <returns>
            Returns the associated file- or protocol-related string from the registry.
            if <paramref name="filePath"/> is <cref>null</cref>, null will also be returned.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetAssociation(System.String,Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <param name="filePath">A path to the file.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes"/> attribute. Only one "InitXXX" attribute can be used.</param>
            <returns>
            Returns the associated file- or protocol-related string from the registry.
            if <paramref name="filePath"/> is <cref>null</cref>, null will also be returned.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetAssociation(System.String,Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes,Alphaleonis.Win32.Filesystem.Shell32.AssociationString)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <param name="filePath">A path to a file.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes"/> attribute. Only one "InitXXX" attribute can be used.</param>
            <param name="associationType">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationString"/> attribute.</param>
            <returns>
            Returns the associated file- or protocol-related string from the registry.
            if <paramref name="filePath"/> is <cref>null</cref>, null will also be returned.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.PathCreateFromUrl(System.String)">
            <summary>Converts a file URL to a Microsoft MS-DOS path.</summary>
            <param name="urlPath">A string that contains the file URL.</param>
            <returns>
            A <see langref="string"/> containing a Microsoft MS-DOS path or <see langref="null"/> on failure or when <see param="urlPath"/> is also <see langref="null"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.PathCreateFromUrlAlloc(System.String)">
            <summary>Creates a path from a file URL.</summary>
            <param name="urlPath">A string that contains the URL.</param>
            <returns>
            A <see langref="string"/> containing the file path or <see langref="null"/> on failure or when <see param="url"/> is also <see langref="null"/>.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlCreateFromPath(System.String)">
            <summary>Converts a Microsoft MS-DOS path to a canonicalized URL.</summary>
            <param name="path"></param>
            <returns>
            A <see langref="string"/> containing the URL or <see langref="null"/> on failure or when <see param="path"/> is also <see langref="null"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIsFileUrl(System.String)">
            <summary>Tests a URL to determine if it is a file URL.</summary>
            <param name="url">A string containing the URL.</param>
            <returns>Returns true if the URL is a file URL, or false otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIsNoHistory(System.String)">
            <summary>Returns whether a URL is a URL that browsers typically do not include in navigation history.</summary>
            <param name="url">A string containing the URL.</param>
            <returns>Returns true if the URL is a URL that is not included in navigation history, or false otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIsOpaque(System.String)">
            <summary>Returns whether a URL is opaque.</summary>
            <param name="url">A string containing the URL.</param>
            <returns>Returns true if the URL is opaque, or false otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIs(System.String,Alphaleonis.Win32.Filesystem.Shell32.UrlTypes)">
            <summary>Tests whether a URL is a specified type.</summary>
            <param name="url">A string containing the URL.</param>
            <param name="urlType"> </param>
            <returns>
            For all but one of the URL types, UrlIs returns true if the URL is the specified type, or false if not.
            If UrlIs is set to <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsAppliable"/>, UrlIs will attempt to determine the URL scheme.
            If the function is able to determine a scheme, it returns true, or false otherwise.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.SHGetFileInfo(System.String)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="path">The path to the file system object which should not exceed <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MAX_PATH"/>. Both absolute and relative paths are valid.</param>
            <remarks>You should call this function from a background thread. Failure to do so could cause the UI to stop responding.</remarks>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo"/> struct object.</returns>
            <remarks>LongPath not supported.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.SHGetFileInfo(System.String,System.IO.FileAttributes)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="path">The path to the file system object which should not exceed <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MAX_PATH"/>. Both absolute and relative paths are valid.</param>
            <param name="attributes">A <see cref="T:System.IO.FileAttributes"/> attribute.</param>
            <remarks>You should call this function from a background thread. Failure to do so could cause the UI to stop responding.</remarks>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo"/> struct object.</returns>
            <remarks>LongPath not supported.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.SHGetFileInfo(System.String,System.IO.FileAttributes,Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="path">The path to the file system object which should not exceed <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MAX_PATH"/>. Both absolute and relative paths are valid.</param>
            <param name="attributes">A <see cref="T:System.IO.FileAttributes"/> attribute.</param>
            <param name="fileInfoAttributes">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes"/> attribute.</param>
            <remarks>You should call this function from a background thread. Failure to do so could cause the UI to stop responding.</remarks>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo"/> struct object.</returns>
            <remarks>LongPath not supported.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo">
            <summary>
            FileInfo structure, contains information about a file system object.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.IconHandle">
            <summary>
            A handle to the icon that represents the file.
            </summary>
            <remarks>You are responsible for destroying this handle with DestroyIcon() when you no longer need it.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.IconIndex">
            <summary>
            The index of the icon image within the system image list.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.Attributes">
            <summary>
            An array of values that indicates the attributes of the file object.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.DisplayName">
            <summary>
            A string that contains the name of the file as it appears in the Windows Shell, or the path and file name of the file that contains the icon representing the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.TypeName">
            <summary>
            A string that describes the type of file.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes">
            <summary>
            FileInfoAttributes structure, used to retrieve the different types of a file system object.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.LargeIcon">
            <summary>
            Get file system object large icon.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.SmallIcon">
            <summary>
            Get file system object small icon.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.OpenIcon">
            <summary>
            Get file system object open icon.
            </summary>
            <remarks>
            A container object displays an open icon to indicate that the container is open.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.ShellIconSize">
            <summary>
            Get file system object Shell-sized icon.
            </summary>
            <remarks>
            If this attribute is not specified the function sizes the icon according to the system metric values.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Pidl">
            <summary>
            Get file system object by its PIDL.
            </summary>
            <remarks>
            Indicate that the given file contains the address of an ITEMIDLIST structure rather than a path name.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.UseFileAttributes">
            <summary>
            Indicates that the given file should not be accessed.
            Rather, it should act as if the given file exists and use the supplied attributes.
            </summary>
            <remarks>
            This flag cannot be combined with the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Attributes"/>, <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.ExeType"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Pidl"/> attributes.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.AddOverlays">
            <summary>
            Apply the appropriate overlays to the file's icon.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.OverlayIndex">
            <summary>
            Returns the index of the overlay icon.
            </summary>
            <remarks>
            The value of the overlay index is returned in the upper eight bits of the iIcon member of the structure specified by psfi.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Icon">
            <summary>
            Retrieve the handle to the icon that represents the file and the index of the icon within the system image list.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.DisplayName">
            <summary>
            Retrieve the display name for the file.
            </summary>
            <remarks>
            The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.TypeName">
            <summary>
            Retrieve the string that describes the file's type.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Attributes">
            <summary>
            Retrieve the item attributes.
            </summary>
            <remarks>
            Will touch every file, degrading performance.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.IconLocation">
            <summary>
            Retrieve the name of the file that contains the icon representing the file specified by the given file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.ExeType">
            <summary>
            Retrieve the type of the executable file if pszPath identifies an executable file.
            </summary>
            <remarks>
            This flag cannot be specified with any other attributes.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.SysIconIndex">
            <summary>
            Retrieve the index of a system image list icon.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.LinkOverlay">
            <summary>
            Add the link overlay to the file's icon.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Selected">
            <summary>
            Blend the file's icon with the system highlight color.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.AttrSpecified">
            <summary>
            Indicates that <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Attributes"/> contains specific attributes that are desired.
            </summary>
            <remarks>
            Will touch every file, degrading performance.
            This flag cannot be specified with the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Icon"/> attribute.
            </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf">
            <summary>
            Attributes that can be retrieved from a file system object.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanCopy">
            <summary>
            The specified items can be copied.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanMove">
            <summary>
            The specified items can be moved.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanLink">
            <summary>
            Shortcuts can be created for the specified items.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Storage">
            <summary>
            The specified items can be bound to an IStorage object through IShellFolder::BindToObject.
            For more information about namespace manipulation capabilities, see IStorage.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanRename">
            <summary>
            The specified items can be renamed. Note that this value is essentially a suggestion; not all
            namespace clients allow items to be renamed. However, those that do must have this attribute set.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanDelete">
            <summary>
            The specified items can be deleted.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.HasPropSheet">
            <summary>
            The specified items have property sheets.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.DropTarget">
            <summary>
            The specified items are drop targets.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CapabilityMask">
            <summary>
            Mask for the capability attributes.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.System">
            <summary>
            The specified items are system items.
            <remarks>Windows 7 and later.</remarks>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Encrypted">
            <summary>
            The specified items are encrypted and might require special presentation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.IsSlow">
            <summary>
            Accessing the item (through IStream or other storage interfaces) is expected to be a slow operation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Ghosted">
            <summary>
            The specified items are shown as dimmed and unavailable to the user.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Link">
            <summary>
            The specified items are shortcuts.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Share">
            <summary>
            The specified objects are shared.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.ReadOnly">
            <summary>
            The specified items are read-only. In the case of folders, this means that new items cannot be created in those folders.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Hidden">
            <summary>
            The item is hidden and should not be displayed unless the Show hidden files and folders option is enabled in Folder Settings.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.DisplayAttrMask">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.NonEnumerated">
            <summary>
            The items are nonenumerated items and should be hidden. They are not returned through an enumerator such as that created by the IShellFolder::EnumObjects method.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.NewContent">
            <summary>
            The items contain new content, as defined by the particular application.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Stream">
            <summary>
            Indicates that the item has a stream associated with it.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.StorageAncestor">
            <summary>
            Children of this item are accessible through IStream or IStorage.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Validate">
            <summary>
            When specified as input, instructs the folder to validate that the items contained in a folder or Shell item array exist.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Removable">
            <summary>
            The specified items are on removable media or are themselves removable devices.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Compressed">
            <summary>
            The specified items are compressed.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Browsable">
            <summary>
            The specified items can be hosted inside a web browser or Windows Explorer frame.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.FileSysAncestor">
            <summary>
            The specified folders are either file system folders or contain at least one descendant (child, grandchild, or later) that is a file system folder.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Folder">
            <summary>
            The specified items are folders.
            </summary>
            <remarks>
            Some items can be flagged with both <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Stream"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Folder"/>, such as a compressed file
            with a .zip file name extension. Some applications might include this flag when testing for items that are both files and containers.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.FileSystem">
            <summary>
            The specified folders or files are part of the file system (that is, they are files, directories, or root directories).
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.HasSubFolder">
            <summary>
            The specified folders have subfolders.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes">
            <summary>
            Provides information for the IQueryAssociations interface methods, used by Shell32.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.None">
            <summary>
            None of the following options are set.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitNoRemapClsid">
            <summary>
            Instructs not to map CLSID values to ProgID values.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitByExeName">
            <summary>
            Identifies the value of the supplied file parameter (3rd parameter of function GetAssociation()) as an executable file name.
            </summary>
            <remarks>
            If this flag is not set, the root key will be set to the ProgID associated with the .exe key instead of the executable file's ProgID.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.OpenByExeName">
            <summary>
            Identical to <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitByExeName"/>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitDefaultToStar">
            <summary>
            Specifies that when an IQueryAssociation method does not find the requested value under the root key, 
            it should attempt to retrieve the comparable value from the * subkey.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitDefaultToFolder">
            <summary>
            Specifies that when an IQueryAssociation method does not find the requested value under the root key, 
            it should attempt to retrieve the comparable value from the Folder subkey.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.NoUserSettings">
            <summary>
            Specifies that only HKEY_CLASSES_ROOT should be searched, and that HKEY_CURRENT_USER should be ignored.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.NoTruncate">
            <summary>
            Specifies that the return string should not be truncated. 
            Instead, return an error value and the required size for the complete string.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.Verify">
            <summary>
            Instructs IQueryAssociations methods to verify that data is accurate.
            This setting allows IQueryAssociations methods to read data from the user's hard disk for verification.
            For example, they can check the friendly name in the registry against the one stored in the .exe file.
            </summary>
            <remarks>
            Setting this flag typically reduces the efficiency of the method.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.RemapRunDll">
            <summary>
            Instructs IQueryAssociations methods to ignore Rundll.exe and return information about its target.
            Typically IQueryAssociations methods return information about the first .exe or .dll in a command string.
            If a command uses Rundll.exe, setting this flag tells the method to ignore Rundll.exe and return information about its target.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.NoFixUps">
            <summary>
            Instructs IQueryAssociations methods not to fix errors in the registry,
            such as the friendly name of a function not matching the one found in the .exe file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.IgnoreBaseClass">
            <summary>
            Specifies that the BaseClass value should be ignored.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitIgnoreUnknown">
            <summary>
            Specifies that the "Unknown" ProgID should be ignored; instead, fail.
            </summary>
            <remarks>
            Introduced in Windows 7.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitFixedProgId">
            <summary>
            (No description available on MSDN)
            </summary>
            <remarks>
            Introduced in Windows 8.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.IsProtocol">
            <summary>
            (No description available on MSDN)
            </summary>
            <remarks>
            Introduced in Windows 8.
            </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationString">
            <summary>
            Used by the GetAssociation() function (IQueryAssociations) to define the type of string that is to be returned.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Command">
            <summary>
            A command string associated with a Shell verb.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Executable">
            <summary>
            An executable from a Shell verb command string.
            For example, this string is found as the (Default) value for a subkey such as HKEY_CLASSES_ROOT\ApplicationName\shell\Open\command.
            If the command uses Rundll.exe, set the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.RemapRunDll"/> flag in the attributes parameter of IQueryAssociations::GetString to retrieve the target executable.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.FriendlyDocName">
            <summary>
            The friendly name of a document type.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.FriendlyAppName">
            <summary>
            The friendly name of an executable file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.NoOpen">
            <summary>
            Ignore the information associated with the open subkey.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.ShellNewValue">
            <summary>
            Look under the ShellNew subkey.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DDECommand">
            <summary>
            A template for DDE commands.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DDEIfExec">
            <summary>
            The DDE command to use to create a process.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DDEApplication">
            <summary>
            The application name in a DDE broadcast.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DDETopic">
            <summary>
            The topic name in a DDE broadcast.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip">
            <summary>
            Corresponds to the InfoTip registry value.
            Returns an info tip for an item, or list of properties in the form of an IPropertyDescriptionList from which to create an info tip, such as when hovering the cursor over a file name.
            The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.QuickTip">
            <summary>
            Corresponds to the QuickTip registry value. This is the same as <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/>, except that it always returns a list of property names in the form of an IPropertyDescriptionList.
            The difference between this value and <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/> is that this returns properties that are safe for any scenario that causes slow property retrieval, such as offline or slow networks.
            Some of the properties returned from <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/> might not be appropriate for slow property retrieval scenarios.
            The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.TileInfo">
            <summary>
            Corresponds to the TileInfo registry value. Contains a list of properties to be displayed for a particular file type in a Windows Explorer window that is in tile view.
            This is the same as <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/>, but, like <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.QuickTip"/>, it also returns a list of property names in the form of an IPropertyDescriptionList.
            The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.ContentType">
            <summary>
            Describes a general type of MIME file association, such as image and bmp,
            so that applications can make general assumptions about a specific file type.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DefaultIcon">
            <summary>
            Returns the path to the icon resources to use by default for this association.
            Positive numbers indicate an index into the dll's resource table, while negative numbers indicate a resource ID.
            An example of the syntax for the resource is "c:\myfolder\myfile.dll,-1".
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.ShellExtension">
            <summary>
            For an object that has a Shell extension associated with it,
            you can use this to retrieve the CLSID of that Shell extension object by passing a string representation
            of the IID of the interface you want to retrieve as the pwszExtra parameter of IQueryAssociations::GetString.
            For example, if you want to retrieve a handler that implements the IExtractImage interface,
            you would specify "{BB2E617C-0920-11d1-9A0B-00C04FC2D6C1}", which is the IID of IExtractImage.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DropTarget">
            <summary>
            For a verb invoked through COM and the IDropTarget interface, you can use this flag to retrieve the IDropTarget object's CLSID.
            This CLSID is registered in the DropTarget subkey.
            The verb is specified in the supplied file parameter in the call to IQueryAssociations::GetString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DelegateExecute">
            <summary>
            For a verb invoked through COM and the IExecuteCommand interface, you can use this flag to retrieve the IExecuteCommand object's CLSID.
            This CLSID is registered in the verb's command subkey as the DelegateExecute entry.
            The verb is specified in the supplied file parameter in the call to IQueryAssociations::GetString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.SupportedUriProtocols">
            <summary>
            (No description available on MSDN)
            </summary>
            <remarks>
            Introduced in Windows 8.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Max">
            <summary>
            The maximum defined <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationString"/> value, used for validation purposes.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes">
            <summary>
            Used by method UrlIs() to define a URL type.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsUrl">
            <summary>
            Is the URL valid?
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsOpaque">
            <summary>
            Is the URL opaque?
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsNoHistory">
            <summary>
            Is the URL a URL that is not typically tracked in navigation history?
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsFileUrl">
            <summary>
            Is the URL a file URL?
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsAppliable">
            <summary>
            Attempt to determine a valid scheme for the URL.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsDirectory">
            <summary>
            Does the URL string end with a directory?
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsHasquery">
            <summary>
            Does the URL have an appended query string?
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Path">
            <summary>
            Performs operations on string instances that contain file or directory path information.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll">
            <summary>
            WildcardStarMatchAll = "*"
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion">
            <summary>
            WildcardQuestion = "?"
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.ExtensionSeparatorChar">
            <summary>
            ExtensionSeparatorChar = "."
            Provides an Extension Separator string.
            </summary>
            <remarks>Equivalent to <see cref="F:System.IO.Path.VolumeSeparatorChar"/></remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.CurrentDirectoryPrefix">
            <summary>
            CurrentDirectoryPrefix = "."
            Provides a current directory string.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.ParentDirectoryPrefix">
            <summary>
            ParentDirectoryPrefix = ".."
            Provides a parent directory string.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.StringTerminatorSuffix">
            <summary>
            StringTerminatorSuffix = "\0"
            string Terminator Suffix.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="paths">
            An array of parts of the path.
            </param>
            <exception cref="T:System.ArgumentException">
            One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            One of the strings in the array is null.
            </exception>
            <returns>
            The combined paths.
            </returns>
            <returns></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPath">
            <summary>
            Returns the absolute path for the current directory.
            </summary>
            <returns>A string containing the fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>A string containing the fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)">
            <summary>
            	Retrieves the full long (or extended) unicode version of the specified <paramref name="path"/>.
            </summary>
            <remarks>
            <para>
            	This method takes care of different path conversions to be usable in Unicode
            	variants of the Win32 functions (which are internally used throughout AlphaFS).
            </para>
            <para>
            	Regular paths are changed like the following:
            	<list type="table">
            		<item>
            			<term><c>C:\Somewhere\Something.txt</c></term>
            			<description><c>\\?\C:\Somewhere\Something.txt</c></description>
            		</item>
            		<item>
            			<term><c>\\Somewhere\Something.txt</c></term>
            			<description><c>\\?\UNC\Somewhere\Something.txt</c></description>
            		</item>
            	</list>
            </para>
            <para>
            	Already processed paths are preserved untouched so to avoid mistakes of double prefixing.
            </para>
            <para>
            	If the <paramref name="path"/> is not an absolute path, or is not rooted, the path of the
            	current directory (and drive) is combined with the specified <paramref name="path"/> to form
            	an absolute path.
            </para>
            </remarks>
            <param name="path">File or Folder name to sanitize and prefix with proper standard.</param>
            <returns>The full long (or extended) unicode version of the specified <paramref name="path"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetRegularPath(System.String)">
            <summary>
            Gets the regular path from long prefixed one. i.e. \\?\C:\Temp\file.txt to C:\Temp\file.txt
            \\?\UNC\Server\share\file.txt to \\Server\share\file.txt
            </summary>
            <param name="path">The path.</param>
            <returns>Regular form path string.</returns>
            <remarks>This method does not handle paths with volume names, eg. \\?\Volume{GUID}\Folder\file.txt </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetShort83Path(System.String)">
            <summary>
            Retrieves the short path form: 8.3 of the specified path.
            </summary>
            <param name="path">The existing path. Can be regular and long paths. Otherwise throws an error.</param>
            <returns>A path that has 8.3 type names.</returns>
            <remarks>Will fail on NTFS volumes with disabled 8.3 name generation.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongFrom83Path(System.String)">
            <summary>
            Converts the specified existing path to its regular long form.
            </summary>
            <param name="path">The existing path.</param>
            <returns>The full path.</returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempPath">
             <summary>
             Returns the path of the current user's temporary folder.
             </summary>
             <exception cref="T:System.Security.SecurityException">
             The caller does not have the required permissions.
             </exception>
             <returns>
             A <see cref="T:System.String"/> containing the path information of a temporary directory.
             If <see param="combineFolder"/> is specified,  and <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)"/>
             are applied, path validity is then checked through the <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> class.
             </returns>
             <remarks>
             The GetTempPath function checks for the existence of environment variables
             in the following order and uses the first path found:
                 The path specified by the TMP environment variable.
                 The path specified by the TEMP environment variable.
                 The path specified by the USERPROFILE environment variable.
                 The Windows directory.
            
             Note that the function does not verify that the path exists, nor does it test to see if the current
             process has any kind of access rights to the path. The GetTempPath function returns the properly
             formatted string that specifies the fully-qualified path based on the environment variable search
             order as previously specified. The application should verify the existence of the path and adequate
             access rights to the path prior to any use for file I/O operations.
            
             Symbolic link behavior; if the path points to a symbolic link, the temp path name maintains any symbolic links.
             </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempPath(System.String)">
             <summary>
             Returns the path of the current user's temporary folder.
             </summary>
             <param name="combinePath">
             A <see cref="T:System.String"/> foldername to append to the TempPath.
             </param>
             <exception cref="T:System.Security.SecurityException">
             The caller does not have the required permissions.
             </exception>
             <returns>
             A <see cref="T:System.String"/> containing the path information of a temporary directory.
             If <see param="combinePath"/> is specified and has no backslash, the returned string is also without a backslash.
             If <see param="combinePath"/> is specified, and <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)"/> are applied, path validity is then checked through the <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> class.
             </returns>
             <remarks>
             The GetTempPath function checks for the existence of environment variables
             in the following order and uses the first path found:
                 The path specified by the TMP environment variable.
                 The path specified by the TEMP environment variable.
                 The path specified by the USERPROFILE environment variable.
                 The Windows directory.
            
             Note that the function does not verify that the path exists, nor does it test to see if the current
             process has any kind of access rights to the path. The GetTempPath function returns the properly
             formatted string that specifies the fully-qualified path based on the environment variable search
             order as previously specified. The application should verify the existence of the path and adequate
             access rights to the path prior to any use for file I/O operations.
            
             Symbolic link behavior; if the path points to a symbolic link, the temp path name maintains any symbolic links.
             </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">
            The path from which to obtain root directory information.
            </param>
            <returns>
            The root directory of path, such as "C:\", or null if path is null, or an empty string if path does not contain root directory information.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetPathRoot(System.String,System.Boolean)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">
            The path from which to obtain root directory information.
            </param>
            <param name="removeDirectorySeparator">
            If true, removes the trailing directory separator character.</param>
            <returns>
            The root directory of path, such as "C:\", or null if path is null, or an empty string if path does not contain root directory information.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
            <returns>
            An array containing the characters that are not allowed in path names.
            </returns>
            <remarks>
            This method calls <see cref="M:System.IO.Path.GetInvalidPathChars"/>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns>
            	<c>true</c> if <paramref ref="path"/> contains an absolute path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsLongPath(System.String)">
            <summary>
            Check if the given path starts with <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/>.
            </summary>
            <param name="path">File or folder full path.</param>
            <returns><c>true</c> if it has long path prefix, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsValidName(System.String)">
            <summary>
            Check if file or folder name has any illegal characters.
            </summary>
            <param name="name">File or folder name.</param>
            <returns>True or False</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsValidPath(System.String)">
            <summary>
            Verifies that the specified <paramref name="path"/> is valid and optionally may contain wildcards.
            </summary>
            <param name="path">The string to test if it contains a valid path.</param>
            <returns>
            	<see langword="true"/> if <paramref name="path"/> is a valid path, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsValidPath(System.String,System.Boolean)">
            <summary>
            Verifies that the specified <paramref name="path"/> is valid and optionally may contain wildcards.
            </summary>
            <param name="path">The string to test if it contains a valid path.</param>
            <param name="allowWildcards">if set to <c>true</c> wildcards are allowed in the filename part of the path, otherwise the
            presence of wildcards will render the path invalid.</param>
            <returns>
            	<see langword="true"/> if <paramref name="path"/> is a valid path, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsLogicalDrive(System.String)">
            <summary>
            Determines whether the specified path starts with a Logical Drive; "C:"
            </summary>
            <param name="drive">
            A pointer to a string that contains the volume's Drive letter as either:  "C" or "C:\..."
            </param>
            <remarks>2012-01-28: Yomodo; Added.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.MakeDriveLetter(System.String)">
            <summary>
            Create a minimal drive letter from a letter-string: "C" --> "C:"
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsUnc(System.String)">
            <summary>
            Determines whether the specified path is network share path.
            Supports long path prefix.
            </summary>
            <param name="path">The path to check.</param>
            <returns>
            true if the specified path is a real network share path, otherwise false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.LocalToUnc(System.String)">
            <summary>
            Converts a local path to a network share path.
            A Local path, e.g.: "C:\Windows" will be returned as: "\\localhostname\C$\Windows"
            If a logical drive points to a network share path, the share path will be returned.
            </summary>
            <param name="localPath">
            A local path, e.g.: "C:\Windows"
            </param>
            <returns>
            A Unc path or an empty <see cref="T:System.String"/> on failure.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.LocalToUnc(System.String,System.Boolean)">
            <summary>
            Converts a local path to a network share path.
            A Local path, e.g.: "C:\Windows" will be returned as: "\\localhostname\C$\Windows"
            If a logical drive points to a network share path, the share path will be returned.
            </summary>
            <param name="localPath">
            A local path, e.g.: "C:\Windows"
            </param>
            <param name="toLongPath">
            If true will prepend a <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/>.
            </param>
            <returns>
            A Unc path or an empty <see cref="T:System.String"/> on failure.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedConnectionName(System.String)">
            <summary>
            Gets the connection name of the locally mapped drive.
            </summary>
            <param name="path">The local path with drive name. This method does not support long path prefixes.</param>
            <returns>string which has the following format <c>\\servername\sharename</c>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedUncName(System.String)">
            <summary>
            Gets the network share name from the locally mapped path.
            </summary>
            <param name="path">The local path with drive name. </param>
            <returns>string in which drive name being replaced with it's network share connection name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedNameInfo(System.String)">
            <summary>
            This method uses RemoteNameInfo level to retieve full REMOTE_NAME_INFO structure and marshals it to RemoteNameInfo structure
            </summary>
            <param name="path">The local path with drive name.</param>
            <returns><see cref="T:Alphaleonis.Win32.Filesystem.RemoteNameInfo"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified <paramref name="path"/> with a trailing directory separator.
            </summary>
            <param name="path">
            The path.
            </param>
            <returns>The directory information for the specified <paramref name="path"/> with a trailing directory separator.</returns>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryName"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryName(System.String,System.Boolean)">
            <summary>
            Returns the directory information for the specified <paramref name="path"/> with a trailing directory separator.
            </summary>
            <param name="path">
            The path.
            </param>
            <param name="removeDirectorySeparator">
            If true, removes the trailing directory separator character.
            </param>
            <returns>The directory information for the specified <paramref name="path"/> with a trailing directory separator.</returns>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryName"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameWithoutRoot(System.String)">
            <summary>
            Returns the directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator.
            </summary>
            <param name="path">
            The path.
            </param>
            <returns>The directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator.</returns>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryNameWithoutRoot"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameWithoutRoot(System.String,System.Boolean)">
            <summary>
            Returns the directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator.
            </summary>
            <param name="path">
            The path.
            </param>
            <param name="removeDirectorySeparator">
            If true, removes the trailing directory separator character.
            </param>
            <returns>The directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator.</returns>
            <seealso cref="P:Alphaleonis.Win32.Filesystem.PathInfo.SuffixedDirectoryNameWithoutRoot"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)"/>
            <seealso cref="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path.</param>
            <returns>The path without the file name part (if any).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)">
            <summary>
            Returns the directory information for the specified path string without the root information.
            </summary>
            <param name="path">The path.</param>
            <returns>The path without the file name part and without the root information (if any).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A string consisting of the characters after the last directory character in path.
            If the last character of path is a directory or volume separator character,
            this method returns Empty. If path is a null reference, this method returns
            null.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name without extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name.</param>
            <returns>A string consisting of the characters after the last directory character in path
            up to the extension.
            If the last character of path is a directory or volume separator character,
            this method returns an empty string. If path is a null reference, this method returns
            null.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandle(System.IO.FileStream)">
            <summary>Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <param name="stream">Then handle to a <see cref="T:System.IO.FileStream"/> instance.</param>
            <returns>
            If the function fails, or handle is null, invalid or closed, the return value is string.Empty.
            No exceptions will be thrown.
            To get extended error information, call new Win32Exception()
            </returns>
            <remarks>
            A final path is the path that is returned when a path is fully resolved.
            For example, for a symbolic link named "C:\tmp\mydir" that points to "D:\yourdir", the final path would be "D:\yourdir".
            The string that is returned by this function uses the <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> syntax.
            </remarks>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandle(System.IO.FileStream,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <summary>Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <param name="stream">Then handle to a <see cref="T:System.IO.FileStream"/> instance.</param>
            <param name="finalPath">The final path, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/></param>
            <returns>
            If the function fails, or handle is null, invalid or closed, the return value is string.Empty.
            No exceptions will be thrown.
            To get extended error information, call new Win32Exception()
            </returns>
            <remarks>
            A final path is the path that is returned when a path is fully resolved.
            For example, for a symbolic link named "C:\tmp\mydir" that points to "D:\yourdir", the final path would be "D:\yourdir".
            The string that is returned by this function uses the <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> syntax.
            </remarks>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <param name="handle">Then handle to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> instance.</param>
            <returns>
            If the function fails, or handle is null, invalid or closed, the return value is string.Empty.
            No exceptions will be thrown.
            To get extended error information, call new Win32Exception()
            </returns>
            <remarks>
            A final path is the path that is returned when a path is fully resolved.
            For example, for a symbolic link named "C:\tmp\mydir" that points to "D:\yourdir", the final path would be "D:\yourdir".
            The string that is returned by this function uses the <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> syntax.
            </remarks>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandleInternal(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <summary>Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <param name="handle">Then handle to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> instance.</param>
            <param name="finalPath">The final path, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/></param>
            <returns>
            If the function fails, or handle is null, invalid or closed, the return value is string.Empty.
            No exceptions will be thrown.
            To get extended error information, call new Win32Exception()
            </returns>
            <remarks>
            A final path is the path that is returned when a path is fully resolved.
            For example, for a symbolic link named "C:\tmp\mydir" that points to "D:\yourdir", the final path would be "D:\yourdir".
            The string that is returned by this function uses the <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> syntax.
            </remarks>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandleX3(System.IO.FileStream)">
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandleX3(System.IO.FileStream,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandleX3(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandleX3Internal(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidFileNameChars">
            <summary>
            Gets an array containing the characters that are not allowed in file names.
            </summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
            <remarks>See also <see cref="M:System.IO.Path.GetInvalidFileNameChars"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetRandomFileName">
            <summary>
            Returns a random folder name or file name.
            </summary>
            <returns>A random folder name or file name.</returns>
            <remarks>This is equivalent to <see cref="M:System.IO.Path.GetRandomFileName"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempFileName">
            <summary>
            Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the full path of the temporary file.</returns>
            <remarks>This is equivalent to <see cref="M:System.IO.Path.GetTempFileName"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension. </param>
            <returns>
            	<c>true</c> if the specified path has extension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>The extension of the specified <paramref name="path"/>, or an empty string
            if the path contains no extension. If the path is null, this method
            returns null.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension of a path string.
            </summary>
            <param name="path">The path information to modify. The path cannot contain any of the characters defined in GetInvalidPathChars.</param>
            <param name="extension">The new extension (with a leading period). Specify null to remove an existing extension from path.</param>
            <returns>The <paramref name="path"/> specified with the extension of the file name changed to the specified <paramref name="extension"/>.</returns>
            <remarks>A leading extension-period is required and will be added.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar">
            <summary>
            AltDirectorySeparatorChar = "/"
            Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
            <remarks>Equivalent to <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/></remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar">
            <summary>
            DirectorySeparatorChar = "\"
            Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
            <remarks>Equivalent to <see cref="F:System.IO.Path.DirectorySeparatorChar"/></remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.PathSeparator">
            <summary>
            PathSeparator = ";"
            A platform-specific separator character used to separate path strings in environment variables.
            </summary>
            <remarks>Equivalent to <see cref="F:System.IO.Path.PathSeparator"/></remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar">
            <summary>
            VolumeSeparatorChar = ":"
            Provides a platform-specific Volume Separator string.
            </summary>
            <remarks>Equivalent to <see cref="F:System.IO.Path.VolumeSeparatorChar"/></remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.MsDosNamespacePrefix">
            <summary>
            MsDosNamespacePrefix = "\\\\.\\"
            Provides standard Win32 Namespace prefix.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.UncPrefix">
            <summary>
            UncPrefix = "\\"
            Provides standard Windows Path UNC prefix.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix">
            <summary>
            LongPathPrefix = "\\?\"
            Provides standard Windows Long Path prefix.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.LongPathUncPrefix">
            <summary>
            LongPathUncPrefix = "\\?\UNC\"
            Provides standard Windows Long Path UNC prefix.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.GlobalRootPrefix">
            <summary>
            GlobalRootPrefix = "\\?\GLOBALROOT\"
            Provides standard Windows Volume prefix.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.VolumePrefix">
            <summary>
            VolumePrefix = "\\?\Volume\"
            Provides standard Windows Volume prefix.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.VolumeGuidPrefix">
            <summary>
            VolumeGuidPrefix = "\\?\Volume{"
            Provides standard Windows Volume Guid prefix.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DevicePrefix">
            <summary>
            DevicePrefix = "\Device\"
            Provides standard Windows Device prefix.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.SubstitutePrefix">
            <summary>
            SubstitutePrefix = "\??\"
            Provides a SUBST.EXE Path prefix to a Logical Drive.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DosDeviceUncPrefix">
            <summary>
            DosDeviceUncPrefix = "\??\UNC\"
            Provides a SUBST.EXE Path UNC prefix to a network share.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DosDeviceLanmanPrefix">
            <summary>
            DosDeviceLanmanPrefix = "\Device\LanmanRedirector\"
            Provides a MS-Dos Lanman Redirector Path UNC prefix to a network share.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorAdd(System.String)">
            <summary>
            Adds a <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character to the string.
            </summary>
            <param name="path">
            A text string to which the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> is to be added.
            </param>
            <returns>
            A text string with the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character suffixed.
            The function returns null when <see param="path"/> is null.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorAdd(System.String,System.Boolean)">
            <summary>
            Adds a <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character to the string.
            </summary>
            <param name="path">
            A text string to which the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> is to be added.
            </param>
            <param name="addAlternateSeparator">
            if true the <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character will be added instead.
            </param>
            <returns>
            A text string with the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character suffixed.
            The function returns null when <see param="path"/> is null.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorRemove(System.String)">
            <summary>
            Removes the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character from the string.
            </summary>
            <param name="path">
            A text string from which the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> is to be removed.
            </param>
            <returns>
            A text string where the suffixed <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> has been removed.
            The function returns null when <see param="path"/> is null.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorRemove(System.String,System.Boolean)">
            <summary>
            Removes the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character from the string.
            </summary>
            <param name="path">
            A text string from which the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> is to be removed.
            </param>
            <param name="removeAlternateSeparator">
            If true the <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character will be removed instead.
            </param>
            <returns>
            A text string where the suffixed <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character has been removed.
            The function returns null when <see param="path"/> is null.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.CheckInvalidPathChars(System.String)">
            <summary>
            Checks that the path contains only valid path-characters.
            </summary>
            <param name="path">A Path to a Folder or File.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.PrefixLongPathInternal(System.String)">
            <summary>Makes a LongPath (unicode path) version of the specified <paramref name="path"/>.
            Note that no path validity checking is performed, this method is to prevent <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/> object creation.
            If necessary, a <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> is prefixed to ensure/enable LongPath usability for the Win32Api's and is called by the AlphaFS xxxInternal methods explicitly.
            </summary>
            <param name="path">File or Folder name to prefix with proper standard.</param>
            <returns>The LongPath (unicode path) version of the specified <paramref name="path"/>.</returns>
            <remarks>To get path-validated LongPath, use the <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)"/> method which uses <see cref="T:Alphaleonis.Win32.Filesystem.PathInfo"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.DosDeviceToDosPath(System.String,System.String,System.Boolean[])">
            <summary>
            Tranlates DosDevicePath, Volume GUID.
            For example: "\Device\HarddiskVolumeX\path\filename.ext" can translate to: "\path\filename.ext" or: "\\?\Volume{GUID}\path\filename.ext".
            </summary>
            <param name="dosDevice">A DosDevicePath, for example: \Device\HarddiskVolumeX\path\filename.ext</param>
            <param name="deviceReplacement">Alternate path/device text, usually string.Empty or null.</param>
            <param name="options">Array of booleans for method GetLogicalDrives();
            (Optional, default: false)
            options[0] = true: Get drives from Environment.
            options[1] = true: Get only .IsReady drives.
            options[2] = true: Remove the trailing backslash upon return.
            </param>
            <returns>A translated path.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo">
            <summary>
            Represents information about a file system entry. Used together with <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryEnumerator"/>.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.#ctor(Alphaleonis.Win32.Filesystem.Win32FindData)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> class.
            </summary>
            <param name="findData">The WIN32 find data structure.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Win32FindData">
            <summary>
            Gets internal WIN32 FIND Data
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.AlternateFileName">
            <summary>
            Gets the 8.3 version of the filename.
            </summary>
            <value>the 8.3 version of the filename.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Created">
            <summary>
            Gets the time this entry was created.
            </summary>
            <value>The time this entry was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastAccessed">
            <summary>
            Gets the time this entry was last accessed.
            </summary>
            <value>The time this entry was last accessed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastModified">
            <summary>
            Gets the time this entry was last modified.
            </summary>
            <value>The time this entry was last modified.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsDirectory">
            <summary>
            Gets a value indicating whether this instance represents a directory.
            </summary>
            <value>
            	<c>true</c> if this instance represents a directory; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsFile">
            <summary>
            Gets a value indicating whether this instance is definitely a file.
            </summary>
            <value><c>true</c> if this instance is file; otherwise, <c>false</c>.</value>
            <remarks>File system object is NOT a directory and NOT a device.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsReparsePoint">
            <summary>
            Gets a value indicating whether this instance is a reparse point.
            </summary>
            <value>
            	<c>true</c> if this instance is a reparse point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsMountPoint">
            <summary>
            Gets a value indicating whether this instance is a mount point.
            </summary>
            <value>
            	<c>true</c> if this instance is a mount point; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsSymbolicLink">
            <summary>
            Gets a value indicating whether this instance is a symbolic link.
            </summary>
            <value>
            	<c>true</c> if this instance is a symbolic link; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.ReparsePointTag">
            <summary>
            Gets the reparse point tag of this entry.
            </summary>
            <value>The reparse point tag of this entry.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FullPath">
            <summary>
            The real full path of the file system object/entry.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.VirtualFullPath">
            <summary>
            This property is intended to be used with in the future versions of the library
            to store a full path that is relative to a parent symbolic link or junction point.
            It will be correctly set by enumerating methods.
            <code>
            Parent Symbolic Directory Link Pointed
            From: C:\Users\Novels\Application Data
            To: C:\Users\Novels\AppData\Roaming
            so the entryu info for vlc-qt-interface.ini file will have following values
            FullPath: C:\Users\Novels\AppData\Roaming\vlc\vlc-qt-interface.ini
            VirtualFullPath: C:\Users\Novels\Application Data\vlc\vlc-qt-interface.ini
            </code>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemAttributes">
            <summary>
            FileSystem Flags
            </summary>
            <remarks>2012-02-12: Yomodo; Added.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.None">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.CaseSensitiveSearch">
            <summary>
            FILE_CASE_SENSITIVE_SEARCH
            The specified volume supports case-sensitive file names.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.CasePreservedNames">
            <summary>
            FILE_CASE_PRESERVED_NAMES
            The specified volume supports preserved case of file names when it places a name on disk.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.UnicodeOnDisk">
            <summary>
            FILE_UNICODE_ON_DISK
            The specified volume supports Unicode in file names as they appear on disk.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.PersistentAcls">
            <summary>
            FILE_PERSISTENT_ACLS
            The specified volume preserves and enforces access control lists (ACL).
            For example, the NTFS file system preserves and enforces ACLs, and the FAT file system does not.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.Compression">
            <summary>
            FILE_FILE_COMPRESSION
            The specified volume supports file-based compression.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.VolumeQuotas">
            <summary>
            FILE_VOLUME_QUOTAS
            The specified volume supports disk quotas.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsSparseFiles">
            <summary>
            FILE_SUPPORTS_SPARSE_FILES
            The specified volume supports sparse files.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsReparsePoints">
            <summary>
            FILE_SUPPORTS_REPARSE_POINTS
            The specified volume supports re-parse points.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsRemoteStorage">
            <summary>
            (doesn't appear on MSDN)
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.VolumeIsCompressed">
            <summary>
            FILE_VOLUME_IS_COMPRESSED
            The specified volume is a compressed volume, for example, a DoubleSpace volume.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsObjectIds">
            <summary>
            FILE_SUPPORTS_OBJECT_IDS
            The specified volume supports object identifiers.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsEncryption">
            <summary>
            FILE_SUPPORTS_ENCRYPTION
            The specified volume supports the Encrypted File System (EFS).
            For more information, see File Encryption.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.NamedStreams">
            <summary>
            FILE_NAMED_STREAMS
            The specified volume supports named streams.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.ReadOnlyVolume">
            <summary>
            FILE_READ_ONLY_VOLUME
            The specified volume is read-only.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SequentialWriteOnce">
            <summary>
            FILE_SEQUENTIAL_WRITE_ONCE
            The specified volume is read-only.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsTransactions">
            <summary>
            FILE_SUPPORTS_TRANSACTIONS
            The specified volume supports transactions.
            For more information, see About KTM.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsHardLinks">
            <summary>
            FILE_SUPPORTS_HARD_LINKS
            The specified volume supports hard links.
            For more information, see Hard Links and Junctions.
            </summary>
            <remarks>
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported until Windows Server 2008 R2 and Windows 7.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsExtendedAttributes">
            <summary>
            FILE_SUPPORTS_EXTENDED_ATTRIBUTES
            The specified volume supports extended attributes.
            An extended attribute is a piece of application-specific metadata that
            an application can associate with a file and is not part of the file's data.
            </summary>
            <remarks>
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported until Windows Server 2008 R2 and Windows 7.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsOpenByFileId">
            <summary>
            FILE_SUPPORTS_OPEN_BY_FILE_ID
            The file system supports open by FileID.
            For more information, see FILE_ID_BOTH_DIR_INFO.
            </summary>
            <remarks>
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported until Windows Server 2008 R2 and Windows 7.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemAttributes.SupportsUsnJournal">
            <summary>
            FILE_SUPPORTS_USN_JOURNAL
            The specified volume supports update sequence number (USN) journals.
            For more information, see Change Journal Records.
            </summary>
            <remarks>
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported until Windows Server 2008 R2 and Windows 7.
            </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle">
            <summary>
            Represents a wrapper class for a handle used by the FindFirstVolume/FindNextVolume methods of the Win32 API
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">if set to <c>true</c> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileTime.dwLowDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileTime.dwHighDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileTime.AsLong">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileTime.AsDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileTime.op_Implicit(Alphaleonis.Win32.Filesystem.FileTime)~System.Int64">
            <summary>
            
            </summary>
            <param name="ft"></param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyOptions">
            <summary>Flags that specify how a file is to be copied.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.None">
            <summary>None CopyOptions used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists">
            <summary>The copy operation fails immediately if the target file already exists.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.Restartable">
            <summary>Progress of the copy is tracked in the target file in case the copy fails. 
            The failed copy can be restarted at a later time by specifying the same values for 
            existing file name and new file name as those used in the call that failed.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.OpenSourceForWrite">
            <summary>The file is copied and the original file is opened for write access.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.AllowDecryptedDestination">
            <summary>An attempt to copy an encrypted file will succeed even if the destination copy cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.CopySymlink">
            <summary>If the source file is a symbolic link, the destination file is also a symbolic link pointing to the same file that the source symbolic link is pointing to.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering">
            <summary>Do not apply buffering when copying a file.</summary>
        </member>
    </members>
</doc>
