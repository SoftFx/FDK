<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OtpSharp</name>
    </assembly>
    <members>
        <member name="T:OtpSharp.Hotp">
            <summary>
            Calculate HMAC-One-Time-Passwords (HOTP) from a secret key
            </summary>
        </member>
        <member name="M:OtpSharp.Hotp.#ctor(System.Byte[],OtpSharp.OtpHashMode)">
            <summary>
            Create an HOTP instance
            </summary>
            <param name="secretKey">The secret key to use in HOTP calculations</param>
            <param name="mode">The hash mode to use</param>
        </member>
        <member name="M:OtpSharp.Hotp.#ctor(OtpSharp.IKeyProvider,OtpSharp.OtpHashMode)">
            <summary>
            Create an HOTP instance
            </summary>
            <param name="secretKey">The secret key to use in HOTP calculations</param>
            <param name="mode">The hash mode to use</param>
        </member>
        <member name="M:OtpSharp.Hotp.ComputeHotp(System.Int64)">
            <summary>
            Takes a counter and produces an HOTP value
            </summary>
            <param name="counter">the counter to be incremented each time this method is called</param>
            <returns>Hotp</returns>
        </member>
        <member name="M:OtpSharp.Hotp.ComputeHotpDecimal(System.Int64,OtpSharp.OtpHashMode)">
            <remarks>
            This method mainly exists for unit tests.
            The RFC defines a decimal value in the test table that is an
            intermediate step to a final HOTP value
            </remarks>
        </member>
        <member name="M:OtpSharp.Hotp.Compute(System.Int64,OtpSharp.OtpHashMode)">
            <summary>
            Takes a counter and runs it through the HOTP algorithm.
            </summary>
            <param name="counter">Counter or step</param>
            <param name="mode">The hash mode to use</param>
            <returns>HOTP calculated code</returns>
        </member>
        <member name="T:OtpSharp.IKeyProvider">
            <summary>
            Interface used to interact with a key
            </summary>
        </member>
        <member name="M:OtpSharp.IKeyProvider.ComputeHmac(OtpSharp.OtpHashMode,System.Byte[])">
            <summary>
            Uses the key to get an HMAC using the specified algorithm and data
            </summary>
            <remarks>
            This is a much better API than the previous API which would briefly expose the key for all derived types.
            
            Now a derived type could be bound to an HSM/smart card/etc if required and a lot of the security limitations
            of in app/memory exposure of the key can be eliminated.
            </remarks>
            <param name="mode">The HMAC algorithm to use</param>
            <param name="data">The data used to compute the HMAC</param>
            <returns>HMAC of the key and data</returns>
        </member>
        <member name="T:OtpSharp.KeyUrl">
            <summary>
            Class that generates and reads the de-facto url format used by google
            </summary>
            <remarks>
            https://code.google.com/p/google-authenticator/wiki/KeyUriFormat
            </remarks>
        </member>
        <member name="T:OtpSharp.KeyUrl.UrlConstants">
            <summary>
            Several constants used for the URL format
            </summary>
        </member>
        <member name="M:OtpSharp.KeyUrl.GetTotpUrl(System.Byte[],System.String,System.Int32,OtpSharp.OtpHashMode,System.Int32)">
            <summary>
            Get a url for a TOTP key
            </summary>
            <param name="key">Plaintext key</param>
            <param name="user">The username</param>
            <param name="step">Timestep</param>
            <param name="mode">Hash mode</param>
            <param name="totpSize">Digits</param>
            <returns>URL</returns>
        </member>
        <member name="M:OtpSharp.KeyUrl.GetHotpUrl(System.Byte[],System.String,System.Int64,System.Int32)">
            <summary>
            Get a URL for HOTP
            </summary>
            <param name="key">key</param>
            <param name="user">user</param>
            <param name="counter">Current Counter</param>
            <param name="hotpSize">Digits</param>
            <returns></returns>
        </member>
        <member name="M:OtpSharp.KeyUrl.GetBaseKeyUrl(System.Byte[],System.String,OtpSharp.OtpType,System.Int32)">
            <summary>
            Gets a URL that conforms to the de-facto standard
            created and used by Google
            </summary>
        </member>
        <member name="M:OtpSharp.KeyUrl.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a new parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">value</param>
            <returns>URL Encoded name value</returns>
        </member>
        <member name="M:OtpSharp.KeyUrl.FromUrl(System.String)">
            <summary>
            Takes a URL and converts it 
            </summary>
            <param name="rawUrl">the url to convert</param>
            <returns>An otp object</returns>
        </member>
        <member name="M:OtpSharp.KeyUrl.FromUrl(System.String,System.String@)">
            <summary>
            Takes a URL and converts it 
            </summary>
            <param name="rawUrl">the url to convert</param>
            <param name="user">The username</param>
            <returns>An otp object</returns>
        </member>
        <member name="M:OtpSharp.KeyUrl.ValidateQueryStringFields(System.Collections.Specialized.NameValueCollection,System.String[])">
            <summary>
            Ensures that only acceptable keys are contained in the collection
            </summary>
            <param name="query">collection</param>
            <param name="acceptableValues">the whitelist of keys</param>
            <returns></returns>
        </member>
        <member name="T:OtpSharp.KeyUtilities">
            <summary>
            Some helper methods to perform common key functions
            </summary>
        </member>
        <member name="M:OtpSharp.KeyUtilities.Destroy(System.Byte[])">
            <summary>
            Overwrite potentially sensitive data with random junk
            </summary>
            <remarks>
            Warning!
            
            This isn't foolproof by any means.  The garbage collector could have moved the actual
            location in memory to another location during a collection cycle and left the old data in place
            simply marking it as available.  We can't control this or even detect it.
            This method is simply a good faith effort to limit the exposure of sensitive data in memory as much as possible
            </remarks>
        </member>
        <member name="M:OtpSharp.KeyUtilities.GetBigEndianBytes(System.Int64)">
            <summary>
            converts a long into a big endian byte array.
            </summary>
            <remarks>
            RFC 4226 specifies big endian as the method for converting the counter to data to hash.
            </remarks>
        </member>
        <member name="M:OtpSharp.KeyUtilities.GetBigEndianBytes(System.Int32)">
            <summary>
            converts an int into a big endian byte array.
            </summary>
            <remarks>
            RFC 4226 specifies big endian as the method for converting the counter to data to hash.
            </remarks>
        </member>
        <member name="T:OtpSharp.Ntp">
            <summary>
            Class to aide with NTP (network time protocol) time corrections
            </summary>
            <remarks>
            This is experimental and doesn't have great test coverage
            nor is this idea fully developed.
            This API may change
            </remarks>
        </member>
        <member name="M:OtpSharp.Ntp.GetTimeCorrectionFromNistAsync(System.Threading.CancellationToken)">
            <summary>
            Get a time correction factor against NIST
            </summary>
            <returns>Time Correction</returns>
            <remarks>
            This implementation is experimental and doesn't have any tests against it.
            This isn't even close to a robust and reliable implementation.
            </remarks>
        </member>
        <member name="M:OtpSharp.Ntp.GetTimeCorrectionFromGoogleAsync">
            <summary>
            Get a time correction factor using Google's webservers as the time source.  Extremely fast and reliable but not authoritative.
            </summary>
            <returns>Time Correction</returns>
        </member>
        <member name="M:OtpSharp.Ntp.GetTimeCorrectionFromNist(System.Threading.CancellationToken)">
            <summary>
            Get a time correction factor against NIST
            </summary>
            <returns>Time Correction</returns>
            <remarks>
            This implementation is experimental and doesn't have any tests against it.
            This isn't even close to a robust and reliable implementation.
            </remarks>
        </member>
        <member name="M:OtpSharp.Ntp.GetTimeCorrectionFromGoogle">
            <summary>
            Get a time correction factor using Google's webservers as the time source.  Extremely fast and reliable but not authoritative.
            </summary>
            <returns>Time Correction</returns>
        </member>
        <member name="T:OtpSharp.NtpException">
            <summary>
            An generic ntp exception
            </summary>
        </member>
        <member name="M:OtpSharp.NtpException.#ctor(System.String)">
            <summary>
            NtpException with a message
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="T:OtpSharp.OtpType">
            <summary>
            The type of one time password
            </summary>
        </member>
        <member name="F:OtpSharp.OtpType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:OtpSharp.OtpType.Hotp">
            <summary>
            HOTP
            </summary>
        </member>
        <member name="F:OtpSharp.OtpType.Totp">
            <summary>
            TOTP
            </summary>
        </member>
        <member name="T:OtpSharp.TimeCorrection">
            <summary>
            Class to apply a correction factor to the system time
            </summary>
            <remarks>
            In cases where the local system time is incorrect it is preferable to simply correct the system time.
            This class is provided to handle cases where it isn't possible for the client, the server, or both, to be on the correct time.
            
            This library provides limited facilities to to ping NIST for a correct network time.  This class can be used manually however in cases where a server's time is off
            and the consumer of this library can't control it.  In that case create an instance of this class and provide the current server time as the correct time parameter
            
            This class is immutable and therefore threadsafe
            </remarks>
        </member>
        <member name="F:OtpSharp.TimeCorrection.UncorrectedInstance">
            <summary>
            An instance that provides no correction factor
            </summary>
        </member>
        <member name="M:OtpSharp.TimeCorrection.#ctor">
            <summary>
            Constructor used solely for the UncorrectedInstance static field to provide an instance without a correction factor.
            </summary>
        </member>
        <member name="M:OtpSharp.TimeCorrection.#ctor(System.DateTime)">
            <summary>
            Creates a corrected time object by providing the known correct current UTC time.  The current system UTC time will be used as the reference
            </summary>
            <remarks>
            This overload assumes UTC.  If a base and reference time other than UTC are required then use the other overlaod.
            </remarks>
            <param name="correctUtc">The current correct UTC time</param>
        </member>
        <member name="M:OtpSharp.TimeCorrection.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a corrected time object by providing the known correct current time and the current reference time that needs correction
            </summary>
            <param name="correctTime">The current correct time</param>
            <param name="referenceTime">The current reference time (time that will have the correction factor applied in subsequent calls)</param>
        </member>
        <member name="M:OtpSharp.TimeCorrection.GetCorrectedTime(System.DateTime)">
            <summary>
            Applies the correction factor to the reference time and returns a corrected time
            </summary>
            <param name="referenceTime">The reference time</param>
            <returns>The reference time with the correction factor applied</returns>
        </member>
        <member name="P:OtpSharp.TimeCorrection.CorrectedUtcNow">
            <summary>
            Applies the correction factor to the current system UTC time and returns a corrected time
            </summary>
        </member>
        <member name="P:OtpSharp.TimeCorrection.CorrectionFactor">
            <summary>
            The timespan that is used to calculate a corrected time
            </summary>
        </member>
        <member name="T:OtpSharp.InMemoryKey">
            <summary>
            Represents a key in memory
            </summary>
            <remarks>
            This will attempt to use the Windows data protection api to encrypt the key in memory.
            However, this type favors working over memory protection. This is an attempt to minimize
            exposure in memory, nothing more. This protection is flawed in many ways and is limited
            to Windows.
            
            In order to use the key to compute an hmac it must be temporarily decrypted, used,
            then re-encrypted. This does expose the key in memory for a time. If a memory dump occurs in this time
            the plaintext key will be part of it. Furthermore, there are potentially
            artifacts from the hmac computation, GC compaction, or any number of other leaks even after
            the key is re-encrypted.
            
            This type favors working over memory protection. If the particular platform isn't supported then,
            unless forced by modifying the IsPlatformSupported method, it will just store the key in a standard
            byte array.
            </remarks>
        </member>
        <member name="M:OtpSharp.InMemoryKey.CreateProtectedKeyAndDestroyPlaintextKey(System.Byte[])">
            <summary>
            Static method to create a protected key from a plaintext key.  It will wipe the reference that was passed in once the protected key instance is initialized
            </summary>
            <param name="plaintextKey">The key</param>
            <returns>A protected key instance from the provided key</returns>
        </member>
        <member name="M:OtpSharp.InMemoryKey.CreateProtectedKeyFromPreProtectedMemory(System.Byte[],System.Int32,System.Security.Cryptography.MemoryProtectionScope)">
            <summary>
            Creates an instance of the protected key from a byte array that has already been protected using the ProtectedMemory.Protect method call.
            </summary>
            <param name="preProtectedKey">Pre-protected key data</param>
            <param name="keyLength">The length of the plaintext key (protected memory may need to be padded)</param>
            <param name="scope">The memory protection scope that was used to protect the memory</param>
            <returns>A protected key instance from the provided key</returns>
        </member>
        <member name="M:OtpSharp.InMemoryKey.#ctor(System.Byte[])">
            <summary>
            Creates an instance of a protected key.
            </summary>
            <param name="key">Plaintext key data</param>
        </member>
        <member name="M:OtpSharp.InMemoryKey.GetCopyOfKey">
            <summary>
            Gets a copy of the plaintext key
            </summary>
            <remarks>
            This is internal rather than protected so that the tests can use this method
            </remarks>
            <returns>Plaintext Key</returns>
        </member>
        <member name="M:OtpSharp.InMemoryKey.ComputeHmac(OtpSharp.OtpHashMode,System.Byte[])">
            <summary>
            Uses the key to get an HMAC using the specified algorithm and data
            </summary>
            <param name="mode">The HMAC algorithm to use</param>
            <param name="data">The data used to compute the HMAC</param>
            <returns>HMAC of the key and data</returns>
        </member>
        <member name="M:OtpSharp.InMemoryKey.CreateHmacHash(OtpSharp.OtpHashMode)">
            <summary>
            Create an HMAC object for the specified algorithm
            </summary>
        </member>
        <member name="T:OtpSharp.OtpHashMode">
            <summary>
            Indicates which HMAC hashing algorithm should be used
            </summary>
        </member>
        <member name="F:OtpSharp.OtpHashMode.Sha1">
            <summary>
            Sha1 is used as the HMAC hashing algorithm
            </summary>
        </member>
        <member name="F:OtpSharp.OtpHashMode.Sha256">
            <summary>
            Sha256 is used as the HMAC hashing algorithm
            </summary>
        </member>
        <member name="F:OtpSharp.OtpHashMode.Sha512">
            <summary>
            Sha512 is used as the HMAC hashing algorithm
            </summary>
        </member>
        <member name="T:OtpSharp.Otp">
            <summary>
            An abstract class that contains common OTP calculations
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4226
            </remarks>
        </member>
        <member name="F:OtpSharp.Otp.secretKey">
            <summary>
            Secret key
            </summary>
        </member>
        <member name="F:OtpSharp.Otp.hashMode">
            <summary>
            The hash mode to use
            </summary>
        </member>
        <member name="M:OtpSharp.Otp.#ctor(System.Byte[],OtpSharp.OtpHashMode)">
            <summary>
            Constructor for the abstract class.  This is to guarantee that all implementations have a secret key
            </summary>
            <param name="secretKey"></param>
            <param name="mode">The hash mode to use</param>
        </member>
        <member name="M:OtpSharp.Otp.#ctor(OtpSharp.IKeyProvider,OtpSharp.OtpHashMode)">
            <summary>
            Constrocutor for the abstract class.  This is to guarantee that all implementations have a secret key
            </summary>
            <param name="secretKey"></param>
            <param name="mode">The hash mode to use</param>
        </member>
        <member name="M:OtpSharp.Otp.Compute(System.Int64,OtpSharp.OtpHashMode)">
            <summary>
            An abstract definition of a compute method.  Takes a counter and runs it through the derived algorithm.
            </summary>
            <param name="counter">Counter or step</param>
            <param name="mode">The hash mode to use</param>
            <returns>OTP calculated code</returns>
        </member>
        <member name="M:OtpSharp.Otp.CalculateOtp(System.Byte[],OtpSharp.OtpHashMode)">
            <summary>
            Helper method that calculates OTPs
            </summary>
        </member>
        <member name="M:OtpSharp.Otp.Digits(System.Int64,System.Int32)">
            <summary>
            truncates a number down to the specified number of digits
            </summary>
        </member>
        <member name="M:OtpSharp.Otp.Verify(System.Int64,System.String,System.Int64@,OtpSharp.VerificationWindow)">
            <summary>
            Verify an OTP value
            </summary>
            <param name="initialStep">The initial step to try</param>
            <param name="valueToVerify">The value to verify</param>
            <param name="matchedStep">Output parameter that provides the step where the match was found.  If no match was found it will be 0</param>
            <param name="window">The window to verify</param>
            <returns>True if a match is found</returns>
        </member>
        <member name="T:OtpSharp.KeyGeneration">
            <summary>
            Helpers to work with keys
            </summary>
        </member>
        <member name="M:OtpSharp.KeyGeneration.GenerateRandomKey(System.Int32)">
            <summary>
            Generates a random key in accordance with the RFC recommened length for each algorithm
            </summary>
            <param name="length">Key length</param>
            <returns>The generated key</returns>
        </member>
        <member name="M:OtpSharp.KeyGeneration.GenerateRandomKey(OtpSharp.OtpHashMode)">
            <summary>
            Generates a random key in accordance with the RFC recommened length for each algorithm
            </summary>
            <param name="mode">HashMode</param>
            <returns>Key</returns>
        </member>
        <member name="M:OtpSharp.KeyGeneration.DeriveKeyFromMaster(OtpSharp.IKeyProvider,System.Byte[],OtpSharp.OtpHashMode)">
            <summary>
            Uses the procedure defined in RFC 4226 section 7.5 to derive a key from the master key
            </summary>
            <param name="masterKey">The master key from which to derive a device specific key</param>
            <param name="publicIdentifier">The public identifier that is unique to the authenticating device</param>
            <param name="mode">The hash mode to use.  This will determine the resulting key lenght.  The default is sha-1 (as per the RFC) which is 20 bytes</param>
            <returns>Derived key</returns>
        </member>
        <member name="M:OtpSharp.KeyGeneration.DeriveKeyFromMaster(OtpSharp.IKeyProvider,System.Int32,OtpSharp.OtpHashMode)">
            <summary>
            Uses the procedure defined in RFC 4226 section 7.5 to derive a key from the master key
            </summary>
            <param name="masterKey">The master key from which to derive a device specific key</param>
            <param name="serialNumber">A serial number that is unique to the authenticating device</param>
            <param name="mode">The hash mode to use.  This will determine the resulting key lenght.  The default is sha-1 (as per the RFC) which is 20 bytes</param>
            <returns>Derived key</returns>
        </member>
        <member name="T:OtpSharp.Totp">
            <summary>
            Calculate Timed-One-Time-Passwords (TOTP) from a secret key
            </summary>
            <remarks>
            The specifications for this are found in RFC 6238
            http://tools.ietf.org/html/rfc6238
            </remarks>
        </member>
        <member name="F:OtpSharp.Totp.unixEpochTicks">
            <summary>
            The number of ticks as Measured at Midnight Jan 1st 1970;
            </summary>
        </member>
        <member name="F:OtpSharp.Totp.ticksToSeconds">
            <summary>
            A divisor for converting ticks to seconds
            </summary>
        </member>
        <member name="M:OtpSharp.Totp.#ctor(System.Byte[],System.Int32,OtpSharp.OtpHashMode,System.Int32,OtpSharp.TimeCorrection)">
            <summary>
            Create a TOTP instance
            </summary>
            <param name="secretKey">The secret key to use in TOTP calculations</param>
            <param name="step">The time window step amount to use in calculating time windows.  The default is 30 as recommended in the RFC</param>
            <param name="mode">The hash mode to use</param>
            <param name="totpSize">The number of digits that the returning TOTP should have.  The default is 6.</param>
            <param name="timeCorrection">If required, a time correction can be specified to compensate of an out of sync local clock</param>
        </member>
        <member name="M:OtpSharp.Totp.#ctor(OtpSharp.IKeyProvider,System.Int32,OtpSharp.OtpHashMode,System.Int32,OtpSharp.TimeCorrection)">
            <summary>
            Create a TOTP instance
            </summary>
            <param name="secretKey">The secret key to use in TOTP calculations</param>
            <param name="step">The time window step amount to use in calculating time windows.  The default is 30 as recommended in the RFC</param>
            <param name="mode">The hash mode to use</param>
            <param name="totpSize">The number of digits that the returning TOTP should have.  The default is 6.</param>
            <param name="timeCorrection">If required, a time correction can be specified to compensate of an out of sync local clock</param>
        </member>
        <member name="M:OtpSharp.Totp.ComputeTotp(System.DateTime)">
            <summary>
            Takes a timestamp and applies correction (if provided) and then computes a TOTP value
            </summary>
            <param name="timestamp">The timestamp to use for the TOTP calculation</param>
            <returns>a TOTP value</returns>
        </member>
        <member name="M:OtpSharp.Totp.ComputeTotp">
            <summary>
            Takes a timestamp and computes a TOTP value for corrected UTC now
            </summary>
            <remarks>
            It will be corrected against a corrected UTC time using the provided time correction.  If none was provided then simply the current UTC will be used.
            </remarks>
            <returns>a TOTP value</returns>
        </member>
        <member name="M:OtpSharp.Totp.VerifyTotp(System.String,System.Int64@,OtpSharp.VerificationWindow)">
            <summary>
            Verify a value that has been provided with the calculated value.
            </summary>
            <remarks>
            It will be corrected against a corrected UTC time using the provided time correction.  If none was provided then simply the current UTC will be used.
            </remarks>
            <param name="totp">the trial TOTP value</param>
            <param name="timeStepMatched">
            This is an output parameter that gives that time step that was used to find a match.
            This is useful in cases where a TOTP value should only be used once.  This value is a unique identifier of the
            time step (not the value) that can be used to prevent the same step from being used multiple times
            </param>
            <param name="window">The window of steps to verify</param>
            <returns>True if there is a match.</returns>
        </member>
        <member name="M:OtpSharp.Totp.VerifyTotp(System.DateTime,System.String,System.Int64@,OtpSharp.VerificationWindow)">
            <summary>
            Verify a value that has been provided with the calculated value
            </summary>
            <param name="timestamp">The timestamp to use</param>
            <param name="totp">the trial TOTP value</param>
            <param name="timeStepMatched">
            This is an output parameter that gives that time step that was used to find a match.
            This is usefule in cases where a TOTP value should only be used once.  This value is a unique identifier of the
            time step (not the value) that can be used to prevent the same step from being used multiple times
            </param>
            <param name="window">The window of steps to verify</param>
            <returns>True if there is a match.</returns>
        </member>
        <member name="M:OtpSharp.Totp.CalculateTimeStepFromTimestamp(System.DateTime)">
            <summary>
            Takes a timestamp and calculates a time step
            </summary>
        </member>
        <member name="M:OtpSharp.Totp.RemainingSeconds">
            <summary>
            Remaining seconds in current window based on UtcNow
            </summary>
            <remarks>
            It will be corrected against a corrected UTC time using the provided time correction.  If none was provided then simply the current UTC will be used.
            </remarks>
            <returns>Number of remaining seconds</returns>
        </member>
        <member name="M:OtpSharp.Totp.RemainingSeconds(System.DateTime)">
            <summary>
            Remaining seconds in current window
            </summary>
            <param name="timestamp">The timestamp</param>
            <returns>Number of remaining seconds</returns>
        </member>
        <member name="M:OtpSharp.Totp.Compute(System.Int64,OtpSharp.OtpHashMode)">
            <summary>
            Takes a time step and computes a TOTP code
            </summary>
            <param name="counter">time step</param>
            <param name="mode">The hash mode to use</param>
            <returns>TOTP calculated code</returns>
        </member>
        <member name="T:OtpSharp.VerificationWindow">
            <summary>
            A verification window
            </summary>
        </member>
        <member name="M:OtpSharp.VerificationWindow.#ctor(System.Int32,System.Int32)">
            <summary>
            Create an instance of a verification window
            </summary>
            <param name="previous">The number of previous frames to accept</param>
            <param name="future">The number of future frames to accept</param>
        </member>
        <member name="M:OtpSharp.VerificationWindow.ValidationCandidates(System.Int64)">
            <summary>
            Gets an enumberable of all the possible validation candidates
            </summary>
            <param name="initialFrame">The initial frame to validate</param>
            <returns>Enumberable of all possible frames that need to be validated</returns>
        </member>
        <member name="F:OtpSharp.VerificationWindow.RfcSpecifiedNetworkDelay">
            <summary>
            The verification window that accomodates network delay that is recommended in the RFC
            </summary>
        </member>
    </members>
</doc>
