namespace SoftFX.Extended.Errors
{
    using System;
    using System.Runtime.Serialization;
    using System.Security.Permissions;
    using SoftFX.Extended.Core;

    /// <summary>
    /// Generated by API, if a feature is not supported by used protocol version.
    /// </summary>
    [Serializable]
    public class UnsupportedFeatureException : RuntimeException
    {
        /// <summary>
        /// Constructs a new exception instance.
        /// </summary>
        /// <param name="message">Exception message; can not be null.</param>
        internal UnsupportedFeatureException(string message)
            : base(HResults.E_FAIL, message)
        {
            this.Feature = string.Empty;
        }


        /// <summary>
        /// Constructs a new exception instance.
        /// </summary>
        /// <param name="message">Exception message; can not be null.</param>
        /// <param name="feature">Feature name.</param>
        internal UnsupportedFeatureException(string message, string feature)
            : this(message)
        {
            if (feature != null)
                this.Feature = feature;
        }

        /// <summary>
        /// Constructs a new exception instance.
        /// </summary>
        /// <param name="message">Exception message; can not be null.</param>
        /// <param name="innerException">Inner exception.</param>
        internal UnsupportedFeatureException(string message, Exception innerException)
            : base(HResults.E_FAIL, message, innerException)
        {
            this.Feature = string.Empty;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
        protected UnsupportedFeatureException(SerializationInfo info, StreamingContext context)
            : base(info, context)
        {
            this.Feature = info.GetString("Feature") ?? string.Empty;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData(info, context);
            info.AddValue("Feature", this.Feature);
        }

        /// <summary>
        /// Gets unsupported feature name.
        /// </summary>
        public string Feature { get; internal set; }
    }
}
